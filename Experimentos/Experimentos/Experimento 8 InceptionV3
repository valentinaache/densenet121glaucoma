{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1bjaSRpUcyvdW5ToIZOb6Chi25LFZdZfA","timestamp":1730224807557},{"file_id":"1iW4qIigqB1uLTToYyPiOVwfgxmCnYXu9","timestamp":1729724070861},{"file_id":"14fteFtlnQAPiYwhAGEJVG3hHVHd9Fws5","timestamp":1729721692840},{"file_id":"14Z8LyP99xukHAoKBlOND6lfaRzOw024N","timestamp":1729719207228},{"file_id":"1hIS32OaEWe-ub6AUubjHFbCV-8Z9u3e9","timestamp":1729717024634},{"file_id":"1Dy-ngKQNSjbvLSnW9IYEw7uWEdMIUFgq","timestamp":1729713437883},{"file_id":"1OiHTrqHFB4BjQ4f7IPOxietIlC52S_-i","timestamp":1729710879543},{"file_id":"1iai0MKDIBpG8pBwceGufqM_mQrDGZK7p","timestamp":1729633654784},{"file_id":"1wthMRVFFFGVjNES7VdM8WmkjT1qoCcMK","timestamp":1729632597533},{"file_id":"1EuTB-NizY2iH3JrbCqFE3YPuNjKEQw8-","timestamp":1729622886260}],"gpuType":"T4","authorship_tag":"ABX9TyMhhxXdDv0KxdW9zoZAF0XP"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"boX8ZPtfYMuE","executionInfo":{"status":"ok","timestamp":1732061989701,"user_tz":300,"elapsed":25440,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"ebe0572f-7cec-4848-bc3c-672aeedb9802"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mQzpyzneXrW8","executionInfo":{"status":"ok","timestamp":1732061999209,"user_tz":300,"elapsed":7029,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"bf3b9f18-e5a6-43c5-f77a-0d0094e3c438"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train DataFrame:\n","                                             filename   id eye Diagnosis\n","2   /content/drive/My Drive/Proyecto de Grado G/Pr...  004  OD         1\n","3   /content/drive/My Drive/Proyecto de Grado G/Pr...  004  OS         1\n","4   /content/drive/My Drive/Proyecto de Grado G/Pr...  005  OD         1\n","5   /content/drive/My Drive/Proyecto de Grado G/Pr...  005  OS         1\n","14  /content/drive/My Drive/Proyecto de Grado G/Pr...  010  OD         1\n","\n","Test DataFrame:\n","                                             filename   id eye Diagnosis\n","20  /content/drive/My Drive/Proyecto de Grado G/Pr...  015  OD         1\n","21  /content/drive/My Drive/Proyecto de Grado G/Pr...  015  OS         1\n","32  /content/drive/My Drive/Proyecto de Grado G/Pr...  023  OD         1\n","33  /content/drive/My Drive/Proyecto de Grado G/Pr...  023  OS         1\n","42  /content/drive/My Drive/Proyecto de Grado G/Pr...  028  OD         0\n"]}],"source":["import pandas as pd\n","from sklearn.model_selection import StratifiedShuffleSplit\n","import numpy as np\n","import os\n","\n","directorio_imagenes = '/content/drive/My Drive/Proyecto de Grado G/ProcessedImages_Disc_Exp2'\n","\n","imagenes_info = []\n","for filename in os.listdir(directorio_imagenes):\n","    if filename.endswith('.jpg') or filename.endswith('.png'):\n","        base = filename.split('_')[0]\n","        id_paciente = base[3:-2]  # Extrae correctamente el ID del paciente\n","        tipo_ojo = base[-2:]\n","        full_path = os.path.join(directorio_imagenes, filename)\n","        imagenes_info.append({'filename': full_path, 'id': id_paciente, 'eye': tipo_ojo})\n","\n","imagenes_df = pd.DataFrame(imagenes_info)\n","\n","# Cargar y preparar los datos clínicos\n","data_od = pd.read_excel('/content/drive/My Drive/Proyecto de Grado G/patient_data_od.xlsx')\n","data_os = pd.read_excel('/content/drive/My Drive/Proyecto de Grado G/patient_data_os.xlsx')\n","\n","data_od['id'] = data_od['Unnamed: 0'].str.replace('#', '').astype(str)\n","data_os['id'] = data_os['Unnamed: 0'].str.replace('#', '').astype(str)\n","\n","data_od['eye'] = 'OD'\n","data_os['eye'] = 'OS'\n","\n","data_clinica = pd.concat([data_od[['id', 'eye', 'Diagnosis']], data_os[['id', 'eye', 'Diagnosis']]])\n","\n","full_df = pd.merge(imagenes_df, data_clinica, on=['id', 'eye'], how='left')\n","full_df = full_df[full_df['Diagnosis'] != 2]\n","\n","dominant_diagnosis = full_df.groupby('id')['Diagnosis'].agg(lambda x: x.mode()[0])\n","\n","\n","patient_df = pd.DataFrame(dominant_diagnosis).reset_index()\n","\n","splitter = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n","train_patients, test_patients = next(splitter.split(patient_df, patient_df['Diagnosis']))\n","\n","train_ids = patient_df.iloc[train_patients]['id']\n","test_ids = patient_df.iloc[test_patients]['id']\n","\n","train_df = full_df[full_df['id'].isin(train_ids)]\n","test_df = full_df[full_df['id'].isin(test_ids)]\n","\n","print(\"Train DataFrame:\")\n","print(train_df[['filename', 'id', 'eye', 'Diagnosis']].head())\n","\n","print(\"\\nTest DataFrame:\")\n","print(test_df[['filename', 'id', 'eye', 'Diagnosis']].head())"]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import os\n","from tensorflow.keras.applications.inception_v3 import InceptionV3, preprocess_input\n","from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Input\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n","from sklearn.metrics import roc_auc_score\n","from sklearn.model_selection import StratifiedShuffleSplit\n","from sklearn.utils.class_weight import compute_class_weight\n","# Preparar los generadores de datos\n","train_datagen = ImageDataGenerator(\n","    preprocessing_function=preprocess_input,\n","    rotation_range=10,\n","    width_shift_range=0.2,\n","    height_shift_range=0.2,\n","    horizontal_flip=True,\n","    vertical_flip=False,\n","    fill_mode='nearest',\n","    validation_split = 0.2\n",")\n","\n","test_datagen = ImageDataGenerator(\n","    preprocessing_function=preprocess_input,\n",")\n","\n","train_df['Diagnosis'] = train_df['Diagnosis'].astype(str)\n","test_df['Diagnosis'] = test_df['Diagnosis'].astype(str)\n","\n","train_data = train_datagen.flow_from_dataframe(\n","    dataframe=train_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=20,\n","    class_mode='binary'\n",")\n","\n","test_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode='binary'\n",")\n","\n","valid_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode='binary'\n",")\n"],"metadata":{"id":"4YD6q2Ue5XkZ","colab":{"base_uri":"https://localhost:8080/"},"outputId":"db27a465-bf18-4cb2-9ec4-9ff2bce2eef0","executionInfo":{"status":"ok","timestamp":1732062003198,"user_tz":300,"elapsed":2808,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}}},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 335 validated image filenames belonging to 2 classes.\n","Found 84 validated image filenames belonging to 2 classes.\n","Found 84 validated image filenames belonging to 2 classes.\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-3-d2558d8b6ad4>:29: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train_df['Diagnosis'] = train_df['Diagnosis'].astype(str)\n","<ipython-input-3-d2558d8b6ad4>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_df['Diagnosis'] = test_df['Diagnosis'].astype(str)\n"]}]},{"cell_type":"code","source":["from sklearn.utils.class_weight import compute_class_weight\n","import pandas as pd\n","\n","# Convertir 'Diagnosis' de cadena a enteros\n","train_df['Diagnosis'] = train_df['Diagnosis'].astype(int)\n","test_df['Diagnosis'] = test_df['Diagnosis'].astype(int)\n","\n","# Verificar que la conversión fue exitosa\n","print(\"Valores únicos en 'Diagnosis' después de la conversión:\", train_df['Diagnosis'].unique())\n","\n","# Calcular los pesos de clases\n","class_weights = compute_class_weight(\n","    class_weight='balanced',\n","    classes=np.unique(train_df['Diagnosis']),\n","    y=train_df['Diagnosis']\n",")\n","class_weights = dict(enumerate(class_weights))\n","\n","print(\"Class weights:\", class_weights)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j6-13qP2n_02","executionInfo":{"status":"ok","timestamp":1732062005221,"user_tz":300,"elapsed":393,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"7c6731fa-6067-4ecc-ee00-6e2b6d6c958e"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Valores únicos en 'Diagnosis' después de la conversión: [1 0]\n","Class weights: {0: 0.6320754716981132, 1: 2.392857142857143}\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-4-5d28dd34677d>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train_df['Diagnosis'] = train_df['Diagnosis'].astype(int)\n","<ipython-input-4-5d28dd34677d>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_df['Diagnosis'] = test_df['Diagnosis'].astype(int)\n"]}]},{"cell_type":"code","source":["input_tensor = Input(shape=(299, 299, 3))\n","base_model = InceptionV3(input_tensor=input_tensor, weights='imagenet', include_top=False, pooling='avg')\n","\n","x = base_model.output\n","x = Dense(2048, activation='relu')(x)\n","predictions = Dense(1, activation='sigmoid')(x)\n","model = Model(inputs=base_model.input, outputs=predictions)\n","\n","for layer in base_model.layers:\n","    layer.trainable = False\n","\n","model.compile(optimizer=Adam(learning_rate=0.0001), loss='binary_crossentropy')\n","\n","checkpoint = ModelCheckpoint('best_model_warmup.keras', monitor='val_loss', save_best_only=True, mode='min', verbose=1)\n","early_stop = EarlyStopping(monitor='val_loss', patience=25, restore_best_weights=True, mode='min')\n","\n","print(\"Inicio de Warm-Up Training...\\n\")\n","warmup_history = model.fit(\n","    train_data,\n","    validation_data=valid_data,\n","    epochs=50,\n","    callbacks=[checkpoint, early_stop],\n","    class_weight=class_weights\n",")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RNcbG_WLm8Ma","executionInfo":{"status":"ok","timestamp":1732062603377,"user_tz":300,"elapsed":594856,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"e6b43985-f6d6-4618-d8e3-3524a03a3c7e"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/inception_v3/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n","\u001b[1m87910968/87910968\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 0us/step\n","Inicio de Warm-Up Training...\n","\n","Epoch 1/50\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:122: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 945ms/step - loss: 0.6973\n","Epoch 1: val_loss improved from inf to 0.57488, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m60s\u001b[0m 2s/step - loss: 0.6994 - val_loss: 0.5749\n","Epoch 2/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 352ms/step - loss: 0.6279\n","Epoch 2: val_loss improved from 0.57488 to 0.54288, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 458ms/step - loss: 0.6273 - val_loss: 0.5429\n","Epoch 3/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 273ms/step - loss: 0.6050\n","Epoch 3: val_loss improved from 0.54288 to 0.52869, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 375ms/step - loss: 0.6043 - val_loss: 0.5287\n","Epoch 4/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 278ms/step - loss: 0.5231\n","Epoch 4: val_loss did not improve from 0.52869\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 310ms/step - loss: 0.5241 - val_loss: 0.6318\n","Epoch 5/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 368ms/step - loss: 0.4762\n","Epoch 5: val_loss did not improve from 0.52869\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 401ms/step - loss: 0.4776 - val_loss: 0.6057\n","Epoch 6/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 273ms/step - loss: 0.4343\n","Epoch 6: val_loss did not improve from 0.52869\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 313ms/step - loss: 0.4367 - val_loss: 0.6252\n","Epoch 7/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 275ms/step - loss: 0.5144\n","Epoch 7: val_loss did not improve from 0.52869\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 305ms/step - loss: 0.5148 - val_loss: 0.6472\n","Epoch 8/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 329ms/step - loss: 0.5198\n","Epoch 8: val_loss did not improve from 0.52869\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 364ms/step - loss: 0.5201 - val_loss: 0.6789\n","Epoch 9/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 322ms/step - loss: 0.5394\n","Epoch 9: val_loss did not improve from 0.52869\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 362ms/step - loss: 0.5387 - val_loss: 1.0057\n","Epoch 10/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 274ms/step - loss: 0.4908\n","Epoch 10: val_loss did not improve from 0.52869\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 304ms/step - loss: 0.4899 - val_loss: 0.7439\n","Epoch 11/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 303ms/step - loss: 0.4272\n","Epoch 11: val_loss did not improve from 0.52869\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 334ms/step - loss: 0.4280 - val_loss: 0.7124\n","Epoch 12/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 357ms/step - loss: 0.4014\n","Epoch 12: val_loss did not improve from 0.52869\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 391ms/step - loss: 0.4026 - val_loss: 0.5805\n","Epoch 13/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 275ms/step - loss: 0.4214\n","Epoch 13: val_loss did not improve from 0.52869\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 310ms/step - loss: 0.4225 - val_loss: 0.6833\n","Epoch 14/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 284ms/step - loss: 0.4409\n","Epoch 14: val_loss did not improve from 0.52869\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 318ms/step - loss: 0.4408 - val_loss: 0.7288\n","Epoch 15/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 355ms/step - loss: 0.3962\n","Epoch 15: val_loss did not improve from 0.52869\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 390ms/step - loss: 0.3973 - val_loss: 0.8898\n","Epoch 16/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 275ms/step - loss: 0.4712\n","Epoch 16: val_loss improved from 0.52869 to 0.45136, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 375ms/step - loss: 0.4707 - val_loss: 0.4514\n","Epoch 17/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 272ms/step - loss: 0.4540\n","Epoch 17: val_loss did not improve from 0.45136\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 304ms/step - loss: 0.4550 - val_loss: 0.5867\n","Epoch 18/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 368ms/step - loss: 0.3534\n","Epoch 18: val_loss did not improve from 0.45136\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 398ms/step - loss: 0.3544 - val_loss: 0.5173\n","Epoch 19/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 271ms/step - loss: 0.4464\n","Epoch 19: val_loss did not improve from 0.45136\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 350ms/step - loss: 0.4449 - val_loss: 0.7756\n","Epoch 20/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 272ms/step - loss: 0.3601\n","Epoch 20: val_loss did not improve from 0.45136\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 301ms/step - loss: 0.3592 - val_loss: 0.5302\n","Epoch 21/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 341ms/step - loss: 0.4164\n","Epoch 21: val_loss did not improve from 0.45136\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 381ms/step - loss: 0.4145 - val_loss: 0.5948\n","Epoch 22/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 362ms/step - loss: 0.4157\n","Epoch 22: val_loss improved from 0.45136 to 0.44750, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 463ms/step - loss: 0.4125 - val_loss: 0.4475\n","Epoch 23/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 275ms/step - loss: 0.3929\n","Epoch 23: val_loss did not improve from 0.44750\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 308ms/step - loss: 0.3926 - val_loss: 0.6986\n","Epoch 24/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 363ms/step - loss: 0.3244\n","Epoch 24: val_loss did not improve from 0.44750\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 395ms/step - loss: 0.3242 - val_loss: 0.6854\n","Epoch 25/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 270ms/step - loss: 0.3409\n","Epoch 25: val_loss did not improve from 0.44750\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 351ms/step - loss: 0.3415 - val_loss: 0.5754\n","Epoch 26/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 278ms/step - loss: 0.2772\n","Epoch 26: val_loss did not improve from 0.44750\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 312ms/step - loss: 0.2799 - val_loss: 0.5744\n","Epoch 27/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 384ms/step - loss: 0.2841\n","Epoch 27: val_loss did not improve from 0.44750\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 424ms/step - loss: 0.2877 - val_loss: 0.5174\n","Epoch 28/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 287ms/step - loss: 0.3395\n","Epoch 28: val_loss improved from 0.44750 to 0.40355, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 400ms/step - loss: 0.3426 - val_loss: 0.4036\n","Epoch 29/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 276ms/step - loss: 0.3565\n","Epoch 29: val_loss did not improve from 0.40355\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 309ms/step - loss: 0.3550 - val_loss: 0.5170\n","Epoch 30/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 322ms/step - loss: 0.3107\n","Epoch 30: val_loss did not improve from 0.40355\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 355ms/step - loss: 0.3103 - val_loss: 0.5402\n","Epoch 31/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 322ms/step - loss: 0.2676\n","Epoch 31: val_loss did not improve from 0.40355\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 403ms/step - loss: 0.2697 - val_loss: 0.6836\n","Epoch 32/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 272ms/step - loss: 0.2757\n","Epoch 32: val_loss did not improve from 0.40355\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 306ms/step - loss: 0.2778 - val_loss: 0.5711\n","Epoch 33/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 272ms/step - loss: 0.2657\n","Epoch 33: val_loss improved from 0.40355 to 0.38901, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 377ms/step - loss: 0.2661 - val_loss: 0.3890\n","Epoch 34/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 388ms/step - loss: 0.3621\n","Epoch 34: val_loss did not improve from 0.38901\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 421ms/step - loss: 0.3631 - val_loss: 0.7360\n","Epoch 35/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 302ms/step - loss: 0.3057\n","Epoch 35: val_loss did not improve from 0.38901\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 345ms/step - loss: 0.3061 - val_loss: 0.6422\n","Epoch 36/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 279ms/step - loss: 0.2737\n","Epoch 36: val_loss did not improve from 0.38901\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 313ms/step - loss: 0.2745 - val_loss: 0.5306\n","Epoch 37/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 279ms/step - loss: 0.3150\n","Epoch 37: val_loss did not improve from 0.38901\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 315ms/step - loss: 0.3138 - val_loss: 0.4802\n","Epoch 38/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 385ms/step - loss: 0.2833\n","Epoch 38: val_loss did not improve from 0.38901\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 425ms/step - loss: 0.2838 - val_loss: 0.5790\n","Epoch 39/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 282ms/step - loss: 0.2727\n","Epoch 39: val_loss did not improve from 0.38901\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 362ms/step - loss: 0.2725 - val_loss: 0.5643\n","Epoch 40/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 276ms/step - loss: 0.3302\n","Epoch 40: val_loss did not improve from 0.38901\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 308ms/step - loss: 0.3292 - val_loss: 0.5460\n","Epoch 41/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 366ms/step - loss: 0.2846\n","Epoch 41: val_loss did not improve from 0.38901\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 400ms/step - loss: 0.2837 - val_loss: 0.4331\n","Epoch 42/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 393ms/step - loss: 0.3469\n","Epoch 42: val_loss did not improve from 0.38901\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 435ms/step - loss: 0.3445 - val_loss: 0.6043\n","Epoch 43/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 280ms/step - loss: 0.3125\n","Epoch 43: val_loss did not improve from 0.38901\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 312ms/step - loss: 0.3107 - val_loss: 0.4577\n","Epoch 44/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 362ms/step - loss: 0.2315\n","Epoch 44: val_loss did not improve from 0.38901\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 396ms/step - loss: 0.2337 - val_loss: 0.4987\n","Epoch 45/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 270ms/step - loss: 0.2408\n","Epoch 45: val_loss did not improve from 0.38901\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 303ms/step - loss: 0.2404 - val_loss: 0.5002\n","Epoch 46/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 281ms/step - loss: 0.2963\n","Epoch 46: val_loss did not improve from 0.38901\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 314ms/step - loss: 0.2952 - val_loss: 0.5290\n","Epoch 47/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 372ms/step - loss: 0.2572\n","Epoch 47: val_loss did not improve from 0.38901\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 404ms/step - loss: 0.2572 - val_loss: 0.6585\n","Epoch 48/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 269ms/step - loss: 0.2582\n","Epoch 48: val_loss did not improve from 0.38901\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 350ms/step - loss: 0.2591 - val_loss: 0.6579\n","Epoch 49/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 282ms/step - loss: 0.2561\n","Epoch 49: val_loss did not improve from 0.38901\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 313ms/step - loss: 0.2568 - val_loss: 0.4379\n","Epoch 50/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 371ms/step - loss: 0.2452\n","Epoch 50: val_loss did not improve from 0.38901\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 405ms/step - loss: 0.2444 - val_loss: 0.6802\n"]}]},{"cell_type":"code","source":["from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n","\n","model.load_weights(\"best_model_warmup.keras\")\n","\n","for layer in base_model.layers:\n","    layer.trainable = True\n","\n","model.compile(optimizer=Adam(learning_rate=0.00000001), loss='binary_crossentropy')\n","\n","checkpoint_finetune_path = \"best_model_finetune.keras\"\n","checkpoint_finetune = ModelCheckpoint(\n","    checkpoint_finetune_path,\n","    save_best_only=True,\n","    monitor=\"val_loss\",\n","    mode='min',\n","    verbose=1\n",")\n","early_stopping = EarlyStopping(\n","    monitor='val_loss',\n","    patience=50,\n","    restore_best_weights=True,\n","    mode='min'\n",")\n","\n","print(\"Inicio de Fine-Tuning Training...\\n\")\n","history_finetune = model.fit(\n","    train_data,\n","    validation_data=valid_data,\n","    epochs=200,\n","    callbacks=[checkpoint_finetune, early_stopping],\n","    class_weight=class_weights\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kEOK8le1nAVq","executionInfo":{"status":"ok","timestamp":1732063585771,"user_tz":300,"elapsed":913551,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"2319e5ba-aebf-441d-8c15-6f661e910712"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Inicio de Fine-Tuning Training...\n","\n","Epoch 1/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4s/step - loss: 1.7410\n","Epoch 1: val_loss improved from inf to 0.41574, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m163s\u001b[0m 4s/step - loss: 1.7434 - val_loss: 0.4157\n","Epoch 2/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 487ms/step - loss: 1.8421\n","Epoch 2: val_loss improved from 0.41574 to 0.41093, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 649ms/step - loss: 1.8352 - val_loss: 0.4109\n","Epoch 3/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 485ms/step - loss: 1.7902\n","Epoch 3: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 520ms/step - loss: 1.7813 - val_loss: 0.4139\n","Epoch 4/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 432ms/step - loss: 1.4386\n","Epoch 4: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 474ms/step - loss: 1.4543 - val_loss: 0.4203\n","Epoch 5/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 398ms/step - loss: 1.4508\n","Epoch 5: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 478ms/step - loss: 1.4601 - val_loss: 0.4208\n","Epoch 6/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 392ms/step - loss: 1.8385\n","Epoch 6: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 426ms/step - loss: 1.8327 - val_loss: 0.4370\n","Epoch 7/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 492ms/step - loss: 1.5250\n","Epoch 7: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 526ms/step - loss: 1.5369 - val_loss: 0.4499\n","Epoch 8/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 398ms/step - loss: 1.3677\n","Epoch 8: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 478ms/step - loss: 1.3861 - val_loss: 0.4600\n","Epoch 9/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 419ms/step - loss: 1.7023\n","Epoch 9: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 452ms/step - loss: 1.7015 - val_loss: 0.4677\n","Epoch 10/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 388ms/step - loss: 1.6363\n","Epoch 10: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 468ms/step - loss: 1.6385 - val_loss: 0.4865\n","Epoch 11/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 386ms/step - loss: 1.5297\n","Epoch 11: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 420ms/step - loss: 1.5389 - val_loss: 0.4975\n","Epoch 12/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 455ms/step - loss: 1.7694\n","Epoch 12: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 491ms/step - loss: 1.7598 - val_loss: 0.5181\n","Epoch 13/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 487ms/step - loss: 1.3568\n","Epoch 13: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 520ms/step - loss: 1.3670 - val_loss: 0.5327\n","Epoch 14/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 392ms/step - loss: 1.5826\n","Epoch 14: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 433ms/step - loss: 1.5909 - val_loss: 0.5220\n","Epoch 15/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 382ms/step - loss: 1.7648\n","Epoch 15: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 416ms/step - loss: 1.7653 - val_loss: 0.5200\n","Epoch 16/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 482ms/step - loss: 1.7016\n","Epoch 16: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 514ms/step - loss: 1.7015 - val_loss: 0.5256\n","Epoch 17/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 488ms/step - loss: 1.5838\n","Epoch 17: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 522ms/step - loss: 1.5873 - val_loss: 0.5208\n","Epoch 18/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 386ms/step - loss: 1.6874\n","Epoch 18: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 417ms/step - loss: 1.6914 - val_loss: 0.5174\n","Epoch 19/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 416ms/step - loss: 1.6276\n","Epoch 19: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 450ms/step - loss: 1.6274 - val_loss: 0.5266\n","Epoch 20/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 480ms/step - loss: 1.5040\n","Epoch 20: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 512ms/step - loss: 1.5132 - val_loss: 0.5247\n","Epoch 21/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 396ms/step - loss: 2.1557\n","Epoch 21: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 438ms/step - loss: 2.1275 - val_loss: 0.5241\n","Epoch 22/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 422ms/step - loss: 1.5454\n","Epoch 22: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 455ms/step - loss: 1.5515 - val_loss: 0.5225\n","Epoch 23/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 386ms/step - loss: 1.8737\n","Epoch 23: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 466ms/step - loss: 1.8666 - val_loss: 0.5350\n","Epoch 24/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 381ms/step - loss: 1.5933\n","Epoch 24: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 412ms/step - loss: 1.5986 - val_loss: 0.5439\n","Epoch 25/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 389ms/step - loss: 1.3744\n","Epoch 25: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 421ms/step - loss: 1.3923 - val_loss: 0.5487\n","Epoch 26/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 479ms/step - loss: 1.3423\n","Epoch 26: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 509ms/step - loss: 1.3556 - val_loss: 0.5565\n","Epoch 27/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 385ms/step - loss: 1.8339\n","Epoch 27: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 426ms/step - loss: 1.8271 - val_loss: 0.5664\n","Epoch 28/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 389ms/step - loss: 1.7066\n","Epoch 28: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 419ms/step - loss: 1.7019 - val_loss: 0.5688\n","Epoch 29/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 413ms/step - loss: 1.9147\n","Epoch 29: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 454ms/step - loss: 1.8974 - val_loss: 0.5748\n","Epoch 30/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 390ms/step - loss: 1.8754\n","Epoch 30: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 420ms/step - loss: 1.8692 - val_loss: 0.5787\n","Epoch 31/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 380ms/step - loss: 1.6465\n","Epoch 31: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 413ms/step - loss: 1.6505 - val_loss: 0.5838\n","Epoch 32/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 442ms/step - loss: 1.4776\n","Epoch 32: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 472ms/step - loss: 1.4846 - val_loss: 0.5869\n","Epoch 33/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 494ms/step - loss: 1.6698\n","Epoch 33: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 528ms/step - loss: 1.6697 - val_loss: 0.5886\n","Epoch 34/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 385ms/step - loss: 1.6617\n","Epoch 34: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 417ms/step - loss: 1.6628 - val_loss: 0.5895\n","Epoch 35/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 478ms/step - loss: 1.4177\n","Epoch 35: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 511ms/step - loss: 1.4305 - val_loss: 0.5897\n","Epoch 36/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 427ms/step - loss: 1.5331\n","Epoch 36: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 465ms/step - loss: 1.5415 - val_loss: 0.5950\n","Epoch 37/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 376ms/step - loss: 1.8296\n","Epoch 37: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 415ms/step - loss: 1.8180 - val_loss: 0.5986\n","Epoch 38/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 399ms/step - loss: 1.7417\n","Epoch 38: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 430ms/step - loss: 1.7322 - val_loss: 0.6008\n","Epoch 39/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 490ms/step - loss: 1.9423\n","Epoch 39: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 521ms/step - loss: 1.9258 - val_loss: 0.5998\n","Epoch 40/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 433ms/step - loss: 1.7326\n","Epoch 40: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 464ms/step - loss: 1.7271 - val_loss: 0.5990\n","Epoch 41/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 391ms/step - loss: 1.7597\n","Epoch 41: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 431ms/step - loss: 1.7587 - val_loss: 0.5989\n","Epoch 42/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 392ms/step - loss: 1.6265\n","Epoch 42: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 424ms/step - loss: 1.6285 - val_loss: 0.5991\n","Epoch 43/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 381ms/step - loss: 1.8796\n","Epoch 43: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 414ms/step - loss: 1.8643 - val_loss: 0.6015\n","Epoch 44/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 468ms/step - loss: 1.6529\n","Epoch 44: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 501ms/step - loss: 1.6558 - val_loss: 0.6008\n","Epoch 45/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 505ms/step - loss: 1.2680\n","Epoch 45: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 541ms/step - loss: 1.2903 - val_loss: 0.6008\n","Epoch 46/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 401ms/step - loss: 1.9905\n","Epoch 46: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 446ms/step - loss: 1.9712 - val_loss: 0.6017\n","Epoch 47/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 385ms/step - loss: 1.6125\n","Epoch 47: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 425ms/step - loss: 1.6116 - val_loss: 0.6008\n","Epoch 48/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 387ms/step - loss: 1.6247\n","Epoch 48: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 421ms/step - loss: 1.6245 - val_loss: 0.6029\n","Epoch 49/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 444ms/step - loss: 1.4808\n","Epoch 49: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 478ms/step - loss: 1.4901 - val_loss: 0.6038\n","Epoch 50/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 392ms/step - loss: 1.5435\n","Epoch 50: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 436ms/step - loss: 1.5437 - val_loss: 0.6053\n","Epoch 51/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 389ms/step - loss: 1.5523\n","Epoch 51: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 422ms/step - loss: 1.5546 - val_loss: 0.6048\n","Epoch 52/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 381ms/step - loss: 1.4598\n","Epoch 52: val_loss did not improve from 0.41093\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 413ms/step - loss: 1.4739 - val_loss: 0.6056\n"]}]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.metrics import precision_score, recall_score, f1_score, classification_report, roc_auc_score\n","import matplotlib.pyplot as plt\n","\n","predictions_test = model.predict(test_data)\n","y_test = test_data.classes\n","\n","thresholds = np.arange(0.1, 1.0, 0.1)\n","best_threshold = 0.5\n","best_f1 = 0\n","\n","for threshold in thresholds:\n","    predicted_classes_test = (predictions_test >= threshold).astype(int)\n","    f1 = f1_score(y_test, predicted_classes_test)\n","    precision = precision_score(y_test, predicted_classes_test)\n","    recall = recall_score(y_test, predicted_classes_test)\n","\n","    print(f'Threshold: {threshold:.2f}')\n","    print(f'Precision: {precision:.4f}, Recall: {recall:.4f}, F1 Score: {f1:.4f}\\n')\n","\n","    if f1 > best_f1:\n","        best_f1 = f1\n","        best_threshold = threshold\n","\n","print(f'Mejor threshold: {best_threshold} con F1 Score: {best_f1}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uHZiJlsF-6ye","executionInfo":{"status":"ok","timestamp":1732064087255,"user_tz":300,"elapsed":13511,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"3a6eaa7f-7e28-4d24-dd4a-dad4e0982381"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 3s/step\n","Threshold: 0.10\n","Precision: 0.2258, Recall: 0.8235, F1 Score: 0.3544\n","\n","Threshold: 0.20\n","Precision: 0.1951, Recall: 0.4706, F1 Score: 0.2759\n","\n","Threshold: 0.30\n","Precision: 0.1724, Recall: 0.2941, F1 Score: 0.2174\n","\n","Threshold: 0.40\n","Precision: 0.2000, Recall: 0.2353, F1 Score: 0.2162\n","\n","Threshold: 0.50\n","Precision: 0.2143, Recall: 0.1765, F1 Score: 0.1935\n","\n","Threshold: 0.60\n","Precision: 0.2500, Recall: 0.1765, F1 Score: 0.2069\n","\n","Threshold: 0.70\n","Precision: 0.4286, Recall: 0.1765, F1 Score: 0.2500\n","\n","Threshold: 0.80\n","Precision: 0.5000, Recall: 0.1176, F1 Score: 0.1905\n","\n","Threshold: 0.90\n","Precision: 0.0000, Recall: 0.0000, F1 Score: 0.0000\n","\n","Mejor threshold: 0.1 con F1 Score: 0.35443037974683544\n"]}]},{"cell_type":"code","source":["precisions = []\n","recalls = []\n","f1_scores = []\n","\n","for threshold in thresholds:\n","    predicted_classes_test = (predictions_test >= threshold).astype(int)\n","    precisions.append(precision_score(y_test, predicted_classes_test))\n","    recalls.append(recall_score(y_test, predicted_classes_test))\n","    f1_scores.append(f1_score(y_test, predicted_classes_test))\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(thresholds, precisions, label='Precision')\n","plt.plot(thresholds, recalls, label='Recall')\n","plt.plot(thresholds, f1_scores, label='F1 Score')\n","plt.xlabel('Threshold')\n","plt.ylabel('Metric Value')\n","plt.title('Metrics vs. Threshold')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"IBrACRli-6iA","executionInfo":{"status":"ok","timestamp":1732064090083,"user_tz":300,"elapsed":991,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"4be4c284-a5a0-4229-d777-b092ba831595"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["predicted_classes_test = (predictions_test >= best_threshold).astype(int)\n","\n","# Imprimir el reporte de clasificación con el mejor threshold\n","print(\"Test set classification report with custom threshold:\")\n","print(classification_report(y_test, predicted_classes_test, target_names=['Clase 0', 'Clase 1']))\n","\n","# Calcular la precisión y el recall con el mejor threshold\n","precision = precision_score(y_test, predicted_classes_test)\n","recall = recall_score(y_test, predicted_classes_test)\n","\n","print(\"Precision (Test Set, Class 1) with custom threshold:\", precision)\n","print(\"Recall (Test Set, Class 1) with custom threshold:\", recall)\n","\n","# AUC Score no se afecta por el threshold, pero se puede recalcular para referencia\n","auc_score_test = roc_auc_score(y_test, predictions_test)\n","print(\"Test set AUC Score:\", auc_score_test)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nDUJzXyf-6cQ","executionInfo":{"status":"ok","timestamp":1732064092677,"user_tz":300,"elapsed":380,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"194e7caa-02f9-483a-cbfc-94cf02d3c0af"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Test set classification report with custom threshold:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.86      0.28      0.43        67\n","     Clase 1       0.23      0.82      0.35        17\n","\n","    accuracy                           0.39        84\n","   macro avg       0.54      0.55      0.39        84\n","weighted avg       0.73      0.39      0.41        84\n","\n","Precision (Test Set, Class 1) with custom threshold: 0.22580645161290322\n","Recall (Test Set, Class 1) with custom threshold: 0.8235294117647058\n","Test set AUC Score: 0.5188762071992976\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import roc_curve, auc\n","import matplotlib.pyplot as plt\n","\n","# Calcular la curva ROC y el AUC\n","fpr, tpr, _ = roc_curve(y_test, predictions_test)\n","roc_auc = auc(fpr, tpr)\n","\n","# Graficar la curva ROC\n","plt.figure(figsize=(10, 6))\n","plt.plot(fpr, tpr, color='blue', label=f'ROC Curve (AUC = {roc_auc:.4f})')\n","plt.plot([0, 1], [0, 1], color='gray', linestyle='--')  # Línea de referencia (clasificador aleatorio)\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic (ROC) Curve')\n","plt.legend(loc='lower right')\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"7y7YTIeS-6QS","executionInfo":{"status":"ok","timestamp":1732064095469,"user_tz":300,"elapsed":611,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"a0deb318-e923-4d41-d57d-9651def5caef"},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#RESULTADOS ANTERIORES"],"metadata":{"id":"gL4gyy8i-7V-"}},{"cell_type":"code","source":["from sklearn.metrics import classification_report, roc_auc_score\n","import matplotlib.pyplot as plt\n","\n","predictions_test = model.predict(test_data)\n","predicted_classes_test = np.round(predictions_test).astype(int)\n","\n","y_test = test_data.classes\n","\n","print(\"Test set classification report after fine-tuning:\")\n","print(classification_report(y_test, predicted_classes_test, target_names=['Clase 0', 'Clase 1']))\n","\n","auc_score_test = roc_auc_score(y_test, predictions_test)\n","print(\"Test set AUC Score after fine-tuning:\", auc_score_test)\n","\n","predictions_train = model.predict(train_data, steps=len(train_data), verbose=1)\n","predicted_classes_train = np.round(predictions_train).astype(int)\n","\n","y_train = train_data.classes\n","\n","print(\"Train set classification report after fine-tuning:\")\n","print(classification_report(y_train, predicted_classes_train, target_names=['Clase 0', 'Clase 1']))\n","\n","auc_score_train = roc_auc_score(y_train, predictions_train)\n","print(\"Train set AUC Score after fine-tuning:\", auc_score_train)\n"],"metadata":{"id":"4-LSwrhIkB7e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731539006345,"user_tz":300,"elapsed":26012,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"46675566-e3d7-4c97-b74b-66ae1d74e179"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 3s/step\n","Test set classification report after fine-tuning:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.77      0.82      0.80        67\n","     Clase 1       0.08      0.06      0.07        17\n","\n","    accuracy                           0.67        84\n","   macro avg       0.43      0.44      0.43        84\n","weighted avg       0.63      0.67      0.65        84\n","\n","Test set AUC Score after fine-tuning: 0.4416154521510096\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 723ms/step\n","Train set classification report after fine-tuning:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.80      0.88      0.84       265\n","     Clase 1       0.24      0.14      0.18        70\n","\n","    accuracy                           0.73       335\n","   macro avg       0.52      0.51      0.51       335\n","weighted avg       0.68      0.73      0.70       335\n","\n","Train set AUC Score after fine-tuning: 0.5195148247978436\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import precision_score, recall_score\n","\n","predictions_test = model.predict(test_data)\n","predicted_classes_test = np.round(predictions_test).astype(int)\n","y_test = test_data.classes\n","\n","precision = precision_score(y_test, predicted_classes_test, average='binary', pos_label=1)\n","recall = recall_score(y_test, predicted_classes_test, average='binary', pos_label=1)\n","\n","print(\"Precision (Test Set, Class 1):\", precision)\n","print(\"Recall (Test Set, Class 1):\", recall)\n"],"metadata":{"id":"-XZD7a7bS_E-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731539007201,"user_tz":300,"elapsed":860,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"f33682c2-c2f2-45a0-ea6c-5de5ad071f5a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 144ms/step\n","Precision (Test Set, Class 1): 0.15384615384615385\n","Recall (Test Set, Class 1): 0.11764705882352941\n"]}]}]}