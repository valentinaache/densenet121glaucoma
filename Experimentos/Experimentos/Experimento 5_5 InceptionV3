{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":115731,"status":"ok","timestamp":1732048638173,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"boX8ZPtfYMuE","outputId":"874fb7d5-f8d3-46cb-e7d7-a09d6a4ca431"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6297,"status":"ok","timestamp":1732048650973,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"mQzpyzneXrW8","outputId":"c28eaeaa-f1b5-4af3-82b9-e0bab443d575"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train DataFrame:\n","                                             filename   id eye Diagnosis\n","2   /content/drive/My Drive/Proyecto de Grado G/Pr...  004  OD         1\n","3   /content/drive/My Drive/Proyecto de Grado G/Pr...  004  OS         1\n","4   /content/drive/My Drive/Proyecto de Grado G/Pr...  005  OD         1\n","5   /content/drive/My Drive/Proyecto de Grado G/Pr...  005  OS         1\n","14  /content/drive/My Drive/Proyecto de Grado G/Pr...  010  OD         1\n","\n","Test DataFrame:\n","                                             filename   id eye Diagnosis\n","20  /content/drive/My Drive/Proyecto de Grado G/Pr...  015  OD         1\n","21  /content/drive/My Drive/Proyecto de Grado G/Pr...  015  OS         1\n","32  /content/drive/My Drive/Proyecto de Grado G/Pr...  023  OD         1\n","33  /content/drive/My Drive/Proyecto de Grado G/Pr...  023  OS         1\n","42  /content/drive/My Drive/Proyecto de Grado G/Pr...  028  OD         0\n"]}],"source":["import pandas as pd\n","from sklearn.model_selection import StratifiedShuffleSplit\n","import numpy as np\n","import os\n","\n","# Ruta al directorio con las imágenes\n","directorio_imagenes = '/content/drive/My Drive/Proyecto de Grado G/ProcessedImages_Disc_Exp2'\n","\n","imagenes_info = []\n","for filename in os.listdir(directorio_imagenes):\n","    if filename.endswith('.jpg') or filename.endswith('.png'):\n","        base = filename.split('_')[0]\n","        id_paciente = base[3:-2]  # Extrae correctamente el ID del paciente\n","        tipo_ojo = base[-2:]\n","        full_path = os.path.join(directorio_imagenes, filename)\n","        imagenes_info.append({'filename': full_path, 'id': id_paciente, 'eye': tipo_ojo})\n","\n","imagenes_df = pd.DataFrame(imagenes_info)\n","\n","# Cargar y preparar los datos clínicos\n","data_od = pd.read_excel('/content/drive/My Drive/Proyecto de Grado G/patient_data_od.xlsx')\n","data_os = pd.read_excel('/content/drive/My Drive/Proyecto de Grado G/patient_data_os.xlsx')\n","\n","data_od['id'] = data_od['Unnamed: 0'].str.replace('#', '').astype(str)\n","data_os['id'] = data_os['Unnamed: 0'].str.replace('#', '').astype(str)\n","\n","data_od['eye'] = 'OD'\n","data_os['eye'] = 'OS'\n","\n","data_clinica = pd.concat([data_od[['id', 'eye', 'Diagnosis']], data_os[['id', 'eye', 'Diagnosis']]])\n","\n","full_df = pd.merge(imagenes_df, data_clinica, on=['id', 'eye'], how='left')\n","full_df = full_df[full_df['Diagnosis'] != 2]\n","\n","dominant_diagnosis = full_df.groupby('id')['Diagnosis'].agg(lambda x: x.mode()[0])\n","\n","\n","patient_df = pd.DataFrame(dominant_diagnosis).reset_index()\n","\n","splitter = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n","train_patients, test_patients = next(splitter.split(patient_df, patient_df['Diagnosis']))\n","\n","train_ids = patient_df.iloc[train_patients]['id']\n","test_ids = patient_df.iloc[test_patients]['id']\n","\n","train_df = full_df[full_df['id'].isin(train_ids)]\n","test_df = full_df[full_df['id'].isin(test_ids)]\n","\n","print(\"Train DataFrame:\")\n","print(train_df[['filename', 'id', 'eye', 'Diagnosis']].head())\n","\n","print(\"\\nTest DataFrame:\")\n","print(test_df[['filename', 'id', 'eye', 'Diagnosis']].head())"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3649,"status":"ok","timestamp":1732048662362,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"4YD6q2Ue5XkZ","outputId":"f6c46d2e-c566-4a7e-df83-fa984cf0ea3e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Found 335 validated image filenames belonging to 2 classes.\n","Found 84 validated image filenames belonging to 2 classes.\n","Found 84 validated image filenames belonging to 2 classes.\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-3-30586d175b29>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train_df['Diagnosis'] = train_df['Diagnosis'].astype(str)\n","<ipython-input-3-30586d175b29>:26: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_df['Diagnosis'] = test_df['Diagnosis'].astype(str)\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import os\n","from tensorflow.keras.applications.inception_v3 import InceptionV3, preprocess_input\n","from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Input\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n","from sklearn.metrics import roc_auc_score\n","from sklearn.model_selection import StratifiedShuffleSplit\n","from sklearn.utils.class_weight import compute_class_weight\n","# Preparar los generadores de datos\n","train_datagen = ImageDataGenerator(\n","    preprocessing_function=preprocess_input,\n","    horizontal_flip=True,\n","    channel_shift_range=10.0,\n","    validation_split=0.2\n",")\n","\n","test_datagen = ImageDataGenerator(\n","    preprocessing_function=preprocess_input,\n",")\n","\n","train_df['Diagnosis'] = train_df['Diagnosis'].astype(str)\n","test_df['Diagnosis'] = test_df['Diagnosis'].astype(str)\n","\n","train_data = train_datagen.flow_from_dataframe(\n","    dataframe=train_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=20,\n","    class_mode='binary'\n",")\n","\n","test_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode='binary'\n",")\n","\n","valid_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode='binary'\n",")\n"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":298,"status":"ok","timestamp":1732048663769,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"j6-13qP2n_02","outputId":"cae9d4d3-e51a-47de-cd43-2ca41ab2b549"},"outputs":[{"output_type":"stream","name":"stdout","text":["Valores únicos en 'Diagnosis' después de la conversión: [1 0]\n","Class weights: {0: 0.6320754716981132, 1: 2.392857142857143}\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-4-5d28dd34677d>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train_df['Diagnosis'] = train_df['Diagnosis'].astype(int)\n","<ipython-input-4-5d28dd34677d>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_df['Diagnosis'] = test_df['Diagnosis'].astype(int)\n"]}],"source":["from sklearn.utils.class_weight import compute_class_weight\n","import pandas as pd\n","\n","# Convertir 'Diagnosis' de cadena a enteros\n","train_df['Diagnosis'] = train_df['Diagnosis'].astype(int)\n","test_df['Diagnosis'] = test_df['Diagnosis'].astype(int)\n","\n","# Verificar que la conversión fue exitosa\n","print(\"Valores únicos en 'Diagnosis' después de la conversión:\", train_df['Diagnosis'].unique())\n","\n","# Calcular los pesos de clases\n","class_weights = compute_class_weight(\n","    class_weight='balanced',\n","    classes=np.unique(train_df['Diagnosis']),\n","    y=train_df['Diagnosis']\n",")\n","class_weights = dict(enumerate(class_weights))\n","\n","print(\"Class weights:\", class_weights)\n"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RNcbG_WLm8Ma","executionInfo":{"status":"ok","timestamp":1732048916510,"user_tz":300,"elapsed":251622,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"4f8758b2-bd92-42df-8b5e-0da942db1c6c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/inception_v3/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n","\u001b[1m87910968/87910968\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","Inicio de Warm-Up Training...\n","\n","Epoch 1/50\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:122: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 709ms/step - loss: 1.6198\n","Epoch 1: val_loss improved from inf to 0.58414, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m50s\u001b[0m 2s/step - loss: 1.6074 - val_loss: 0.5841\n","Epoch 2/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 126ms/step - loss: 0.7021\n","Epoch 2: val_loss did not improve from 0.58414\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 207ms/step - loss: 0.7046 - val_loss: 1.8086\n","Epoch 3/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 100ms/step - loss: 0.8302\n","Epoch 3: val_loss improved from 0.58414 to 0.40952, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 205ms/step - loss: 0.8234 - val_loss: 0.4095\n","Epoch 4/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 102ms/step - loss: 0.5080\n","Epoch 4: val_loss did not improve from 0.40952\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 136ms/step - loss: 0.5086 - val_loss: 0.8091\n","Epoch 5/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 124ms/step - loss: 0.4348\n","Epoch 5: val_loss did not improve from 0.40952\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 205ms/step - loss: 0.4350 - val_loss: 0.4868\n","Epoch 6/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 100ms/step - loss: 0.4924\n","Epoch 6: val_loss did not improve from 0.40952\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 133ms/step - loss: 0.4905 - val_loss: 0.8175\n","Epoch 7/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 103ms/step - loss: 0.4153\n","Epoch 7: val_loss did not improve from 0.40952\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 136ms/step - loss: 0.4138 - val_loss: 0.6736\n","Epoch 8/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 127ms/step - loss: 0.4391\n","Epoch 8: val_loss did not improve from 0.40952\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 168ms/step - loss: 0.4428 - val_loss: 0.7065\n","Epoch 9/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 97ms/step - loss: 0.3441\n","Epoch 9: val_loss did not improve from 0.40952\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 136ms/step - loss: 0.3457 - val_loss: 0.5814\n","Epoch 10/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 99ms/step - loss: 0.2952 \n","Epoch 10: val_loss improved from 0.40952 to 0.34453, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 217ms/step - loss: 0.2960 - val_loss: 0.3445\n","Epoch 11/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 110ms/step - loss: 0.3296\n","Epoch 11: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 140ms/step - loss: 0.3293 - val_loss: 1.0188\n","Epoch 12/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 101ms/step - loss: 0.3287\n","Epoch 12: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 133ms/step - loss: 0.3302 - val_loss: 0.8234\n","Epoch 13/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 102ms/step - loss: 0.2770\n","Epoch 13: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 132ms/step - loss: 0.2757 - val_loss: 0.6838\n","Epoch 14/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 100ms/step - loss: 0.2204\n","Epoch 14: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 134ms/step - loss: 0.2192 - val_loss: 0.4284\n","Epoch 15/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 104ms/step - loss: 0.1882\n","Epoch 15: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 134ms/step - loss: 0.1887 - val_loss: 0.5797\n","Epoch 16/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 102ms/step - loss: 0.2038\n","Epoch 16: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 142ms/step - loss: 0.2049 - val_loss: 0.7011\n","Epoch 17/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 102ms/step - loss: 0.2300\n","Epoch 17: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 132ms/step - loss: 0.2344 - val_loss: 0.5508\n","Epoch 18/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 99ms/step - loss: 0.2589 \n","Epoch 18: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 130ms/step - loss: 0.2586 - val_loss: 0.5391\n","Epoch 19/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 137ms/step - loss: 0.1628\n","Epoch 19: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 184ms/step - loss: 0.1637 - val_loss: 0.5641\n","Epoch 20/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 137ms/step - loss: 0.1509\n","Epoch 20: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 178ms/step - loss: 0.1507 - val_loss: 0.5103\n","Epoch 21/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 101ms/step - loss: 0.0810\n","Epoch 21: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 134ms/step - loss: 0.0817 - val_loss: 0.4694\n","Epoch 22/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 105ms/step - loss: 0.0861\n","Epoch 22: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 135ms/step - loss: 0.0868 - val_loss: 0.3828\n","Epoch 23/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 119ms/step - loss: 0.0927\n","Epoch 23: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 149ms/step - loss: 0.0931 - val_loss: 0.4783\n","Epoch 24/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 101ms/step - loss: 0.0813\n","Epoch 24: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 129ms/step - loss: 0.0819 - val_loss: 0.4169\n","Epoch 25/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 106ms/step - loss: 0.0846\n","Epoch 25: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 146ms/step - loss: 0.0845 - val_loss: 0.9935\n","Epoch 26/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 117ms/step - loss: 0.1041\n","Epoch 26: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 146ms/step - loss: 0.1046 - val_loss: 0.7121\n","Epoch 27/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 104ms/step - loss: 0.1091\n","Epoch 27: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 135ms/step - loss: 0.1088 - val_loss: 0.5532\n","Epoch 28/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 105ms/step - loss: 0.0586\n","Epoch 28: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 134ms/step - loss: 0.0585 - val_loss: 0.6526\n","Epoch 29/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 100ms/step - loss: 0.0501\n","Epoch 29: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 130ms/step - loss: 0.0508 - val_loss: 0.4669\n","Epoch 30/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 104ms/step - loss: 0.0307\n","Epoch 30: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 144ms/step - loss: 0.0312 - val_loss: 0.6029\n","Epoch 31/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 101ms/step - loss: 0.0373\n","Epoch 31: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 130ms/step - loss: 0.0373 - val_loss: 0.6632\n","Epoch 32/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 126ms/step - loss: 0.0336\n","Epoch 32: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 158ms/step - loss: 0.0337 - val_loss: 0.5654\n","Epoch 33/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 103ms/step - loss: 0.0349\n","Epoch 33: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 135ms/step - loss: 0.0348 - val_loss: 0.5297\n","Epoch 34/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 99ms/step - loss: 0.0282 \n","Epoch 34: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 139ms/step - loss: 0.0283 - val_loss: 0.5808\n","Epoch 35/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 133ms/step - loss: 0.0236\n","Epoch 35: val_loss did not improve from 0.34453\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 164ms/step - loss: 0.0235 - val_loss: 0.5690\n"]}],"source":["input_tensor = Input(shape=(299, 299, 3))\n","base_model = InceptionV3(input_tensor=input_tensor, weights='imagenet', include_top=False, pooling='avg')\n","\n","x = base_model.output\n","x = Dense(2048, activation='relu')(x)\n","predictions = Dense(1, activation='sigmoid')(x)\n","model = Model(inputs=base_model.input, outputs=predictions)\n","\n","for layer in base_model.layers:\n","    layer.trainable = False\n","\n","model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy')\n","\n","checkpoint = ModelCheckpoint('best_model_warmup.keras', monitor='val_loss', save_best_only=True, mode='min', verbose=1)\n","early_stop = EarlyStopping(monitor='val_loss', patience=25, restore_best_weights=True, mode='min')\n","\n","print(\"Inicio de Warm-Up Training...\\n\")\n","warmup_history = model.fit(\n","    train_data,\n","    validation_data=valid_data,\n","    epochs=50,\n","    callbacks=[checkpoint, early_stop],\n","    class_weight=class_weights\n",")\n"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":581672,"status":"ok","timestamp":1732049602400,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"kEOK8le1nAVq","outputId":"3b1a0824-c69e-43ac-b8ee-9c23f0efa25b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Inicio de Fine-Tuning Training...\n","\n","Epoch 1/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3s/step - loss: 1.4886\n","Epoch 1: val_loss improved from inf to 0.42683, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m153s\u001b[0m 4s/step - loss: 1.4792 - val_loss: 0.4268\n","Epoch 2/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 278ms/step - loss: 1.2617\n","Epoch 2: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 312ms/step - loss: 1.2648 - val_loss: 0.4993\n","Epoch 3/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 275ms/step - loss: 1.0716\n","Epoch 3: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 309ms/step - loss: 1.0720 - val_loss: 0.6058\n","Epoch 4/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 277ms/step - loss: 1.2226\n","Epoch 4: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 310ms/step - loss: 1.2125 - val_loss: 0.6478\n","Epoch 5/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 279ms/step - loss: 1.2060\n","Epoch 5: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 320ms/step - loss: 1.1958 - val_loss: 0.6256\n","Epoch 6/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 272ms/step - loss: 1.0355\n","Epoch 6: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 304ms/step - loss: 1.0321 - val_loss: 0.5961\n","Epoch 7/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 268ms/step - loss: 1.1679\n","Epoch 7: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 302ms/step - loss: 1.1539 - val_loss: 0.5902\n","Epoch 8/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 267ms/step - loss: 0.8369\n","Epoch 8: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 298ms/step - loss: 0.8386 - val_loss: 0.6256\n","Epoch 9/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 275ms/step - loss: 0.8365\n","Epoch 9: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 310ms/step - loss: 0.8355 - val_loss: 0.6499\n","Epoch 10/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 269ms/step - loss: 0.9123\n","Epoch 10: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 349ms/step - loss: 0.9072 - val_loss: 0.6225\n","Epoch 11/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 270ms/step - loss: 0.7383\n","Epoch 11: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 304ms/step - loss: 0.7376 - val_loss: 0.6020\n","Epoch 12/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 274ms/step - loss: 0.7388\n","Epoch 12: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 318ms/step - loss: 0.7345 - val_loss: 0.6099\n","Epoch 13/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 271ms/step - loss: 0.5947\n","Epoch 13: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 305ms/step - loss: 0.6000 - val_loss: 0.5865\n","Epoch 14/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 281ms/step - loss: 0.4998\n","Epoch 14: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 311ms/step - loss: 0.5069 - val_loss: 0.5588\n","Epoch 15/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 272ms/step - loss: 0.6751\n","Epoch 15: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 301ms/step - loss: 0.6704 - val_loss: 0.5389\n","Epoch 16/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 269ms/step - loss: 0.5042\n","Epoch 16: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 303ms/step - loss: 0.5067 - val_loss: 0.5196\n","Epoch 17/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 270ms/step - loss: 0.5418\n","Epoch 17: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 306ms/step - loss: 0.5418 - val_loss: 0.5065\n","Epoch 18/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 267ms/step - loss: 0.4737\n","Epoch 18: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 301ms/step - loss: 0.4795 - val_loss: 0.5037\n","Epoch 19/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 277ms/step - loss: 0.5880\n","Epoch 19: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 310ms/step - loss: 0.5850 - val_loss: 0.5080\n","Epoch 20/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 274ms/step - loss: 0.5876\n","Epoch 20: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 309ms/step - loss: 0.5833 - val_loss: 0.5295\n","Epoch 21/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 276ms/step - loss: 0.4966\n","Epoch 21: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 356ms/step - loss: 0.4941 - val_loss: 0.5401\n","Epoch 22/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 270ms/step - loss: 0.4504\n","Epoch 22: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 304ms/step - loss: 0.4504 - val_loss: 0.5508\n","Epoch 23/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 274ms/step - loss: 0.4885\n","Epoch 23: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 354ms/step - loss: 0.4886 - val_loss: 0.5609\n","Epoch 24/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 271ms/step - loss: 0.4063\n","Epoch 24: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 305ms/step - loss: 0.4074 - val_loss: 0.5706\n","Epoch 25/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 273ms/step - loss: 0.4369\n","Epoch 25: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 354ms/step - loss: 0.4356 - val_loss: 0.5917\n","Epoch 26/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 275ms/step - loss: 0.4142\n","Epoch 26: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 318ms/step - loss: 0.4139 - val_loss: 0.5991\n","Epoch 27/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 275ms/step - loss: 0.4228\n","Epoch 27: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 306ms/step - loss: 0.4227 - val_loss: 0.6073\n","Epoch 28/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 268ms/step - loss: 0.3653\n","Epoch 28: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 301ms/step - loss: 0.3675 - val_loss: 0.6089\n","Epoch 29/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 273ms/step - loss: 0.4066\n","Epoch 29: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 354ms/step - loss: 0.4071 - val_loss: 0.6139\n","Epoch 30/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 269ms/step - loss: 0.4233\n","Epoch 30: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 302ms/step - loss: 0.4220 - val_loss: 0.6214\n","Epoch 31/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 270ms/step - loss: 0.4272\n","Epoch 31: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 303ms/step - loss: 0.4256 - val_loss: 0.6286\n","Epoch 32/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 269ms/step - loss: 0.4059\n","Epoch 32: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 303ms/step - loss: 0.4038 - val_loss: 0.6295\n","Epoch 33/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 277ms/step - loss: 0.4488\n","Epoch 33: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 309ms/step - loss: 0.4478 - val_loss: 0.6341\n","Epoch 34/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 270ms/step - loss: 0.3369\n","Epoch 34: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 312ms/step - loss: 0.3383 - val_loss: 0.6390\n","Epoch 35/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 272ms/step - loss: 0.3806\n","Epoch 35: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 305ms/step - loss: 0.3791 - val_loss: 0.6420\n","Epoch 36/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 275ms/step - loss: 0.3875\n","Epoch 36: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 313ms/step - loss: 0.3863 - val_loss: 0.6405\n","Epoch 37/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 270ms/step - loss: 0.3454\n","Epoch 37: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 302ms/step - loss: 0.3444 - val_loss: 0.6443\n","Epoch 38/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 273ms/step - loss: 0.3598\n","Epoch 38: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 310ms/step - loss: 0.3580 - val_loss: 0.6439\n","Epoch 39/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 271ms/step - loss: 0.3518\n","Epoch 39: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 305ms/step - loss: 0.3515 - val_loss: 0.6486\n","Epoch 40/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 279ms/step - loss: 0.3186\n","Epoch 40: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 313ms/step - loss: 0.3187 - val_loss: 0.6458\n","Epoch 41/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 268ms/step - loss: 0.2994\n","Epoch 41: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 309ms/step - loss: 0.2998 - val_loss: 0.6470\n","Epoch 42/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 273ms/step - loss: 0.2779\n","Epoch 42: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 305ms/step - loss: 0.2784 - val_loss: 0.6483\n","Epoch 43/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 270ms/step - loss: 0.2953\n","Epoch 43: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 304ms/step - loss: 0.2950 - val_loss: 0.6514\n","Epoch 44/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 269ms/step - loss: 0.3109\n","Epoch 44: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 304ms/step - loss: 0.3106 - val_loss: 0.6466\n","Epoch 45/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 277ms/step - loss: 0.2711\n","Epoch 45: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 321ms/step - loss: 0.2725 - val_loss: 0.6450\n","Epoch 46/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 270ms/step - loss: 0.2919\n","Epoch 46: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 310ms/step - loss: 0.2921 - val_loss: 0.6397\n","Epoch 47/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 268ms/step - loss: 0.3078\n","Epoch 47: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 299ms/step - loss: 0.3086 - val_loss: 0.6400\n","Epoch 48/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 269ms/step - loss: 0.3411\n","Epoch 48: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 303ms/step - loss: 0.3402 - val_loss: 0.6364\n","Epoch 49/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 275ms/step - loss: 0.2776\n","Epoch 49: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 308ms/step - loss: 0.2767 - val_loss: 0.6348\n","Epoch 50/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 272ms/step - loss: 0.3165\n","Epoch 50: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 313ms/step - loss: 0.3163 - val_loss: 0.6328\n","Epoch 51/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 272ms/step - loss: 0.2828\n","Epoch 51: val_loss did not improve from 0.42683\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 305ms/step - loss: 0.2829 - val_loss: 0.6288\n"]}],"source":["from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n","\n","model.load_weights(\"best_model_warmup.keras\")\n","\n","for layer in base_model.layers:\n","    layer.trainable = True\n","\n","model.compile(optimizer=Adam(learning_rate=0.000001), loss='binary_crossentropy')\n","\n","checkpoint_finetune_path = \"best_model_finetune.keras\"\n","checkpoint_finetune = ModelCheckpoint(\n","    checkpoint_finetune_path,\n","    save_best_only=True,\n","    monitor=\"val_loss\",\n","    mode='min',\n","    verbose=1\n",")\n","early_stopping = EarlyStopping(\n","    monitor='val_loss',\n","    patience=50,\n","    restore_best_weights=True,\n","    mode='min'\n",")\n","\n","print(\"Inicio de Fine-Tuning Training...\\n\")\n","history_finetune = model.fit(\n","    train_data,\n","    validation_data=valid_data,\n","    epochs=200,\n","    callbacks=[checkpoint_finetune, early_stopping],\n","    class_weight=class_weights\n",")"]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.metrics import precision_score, recall_score, f1_score, classification_report, roc_auc_score\n","import matplotlib.pyplot as plt\n","\n","predictions_test = model.predict(test_data)\n","y_test = test_data.classes\n","\n","thresholds = np.arange(0.1, 1.0, 0.1)\n","best_threshold = 0.5\n","best_f1 = 0\n","\n","for threshold in thresholds:\n","    predicted_classes_test = (predictions_test >= threshold).astype(int)\n","    f1 = f1_score(y_test, predicted_classes_test)\n","    precision = precision_score(y_test, predicted_classes_test)\n","    recall = recall_score(y_test, predicted_classes_test)\n","\n","    print(f'Threshold: {threshold:.2f}')\n","    print(f'Precision: {precision:.4f}, Recall: {recall:.4f}, F1 Score: {f1:.4f}\\n')\n","\n","    if f1 > best_f1:\n","        best_f1 = f1\n","        best_threshold = threshold\n","\n","print(f'Mejor threshold: {best_threshold} con F1 Score: {best_f1}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NN9gvE371Jax","executionInfo":{"status":"ok","timestamp":1732049717357,"user_tz":300,"elapsed":21009,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"a9b18c1e-f5b1-49c9-b19a-fca5e4ab76e0"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 3s/step\n","Threshold: 0.10\n","Precision: 0.1967, Recall: 0.7059, F1 Score: 0.3077\n","\n","Threshold: 0.20\n","Precision: 0.1957, Recall: 0.5294, F1 Score: 0.2857\n","\n","Threshold: 0.30\n","Precision: 0.2105, Recall: 0.4706, F1 Score: 0.2909\n","\n","Threshold: 0.40\n","Precision: 0.2424, Recall: 0.4706, F1 Score: 0.3200\n","\n","Threshold: 0.50\n","Precision: 0.2174, Recall: 0.2941, F1 Score: 0.2500\n","\n","Threshold: 0.60\n","Precision: 0.2667, Recall: 0.2353, F1 Score: 0.2500\n","\n","Threshold: 0.70\n","Precision: 0.1000, Recall: 0.0588, F1 Score: 0.0741\n","\n","Threshold: 0.80\n","Precision: 0.1429, Recall: 0.0588, F1 Score: 0.0833\n","\n","Threshold: 0.90\n","Precision: 0.2500, Recall: 0.0588, F1 Score: 0.0952\n","\n","Mejor threshold: 0.4 con F1 Score: 0.32\n"]}]},{"cell_type":"code","source":["precisions = []\n","recalls = []\n","f1_scores = []\n","\n","for threshold in thresholds:\n","    predicted_classes_test = (predictions_test >= threshold).astype(int)\n","    precisions.append(precision_score(y_test, predicted_classes_test))\n","    recalls.append(recall_score(y_test, predicted_classes_test))\n","    f1_scores.append(f1_score(y_test, predicted_classes_test))\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(thresholds, precisions, label='Precision')\n","plt.plot(thresholds, recalls, label='Recall')\n","plt.plot(thresholds, f1_scores, label='F1 Score')\n","plt.xlabel('Threshold')\n","plt.ylabel('Metric Value')\n","plt.title('Metrics vs. Threshold')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"Tli8feYT1JWB","executionInfo":{"status":"ok","timestamp":1732049730765,"user_tz":300,"elapsed":934,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"23155182-5043-4847-ee16-cb97ca1b790e"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"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SUpKyvD1s8pzzz2Xeq8AjRo1IiUlhZMnT6Y5rmTJkrRs2TLNvgULFtCoUSMKFiyY5vvVrFkzUlJS+OOPPwD7PcbGxqYZsnmveX777TcSExN56aWXMJtv/DrQv39/fHx8+Pnnn2977WXLluHk5MTAgQNT91ksFl544YW75hIRya1UOImI5BKFCxemWbNmzJ07l4ULF5KSkkLHjh1veezhw4eJiooiICCAwoULp9muXr3KhQsXMvy5JUuWvOsxR48eBaBy5cp3vM6wYcOYOnUq/v7+tGzZkgkTJtxxftN1Xbp04dq1ayxevBiAq1evsmzZMjp16pRaHDRu3JinnnqKd955B39/f9q1a8eMGTNISEjIyG3et+LFi6f5umDBggBp5pTBrdvz8OHDLF++PN33qlmzZgCp369BgwZRrlw5WrVqRbFixejTpw/Lly+/pzzXC6gHHnggzXEuLi6UKlUqXcF3s5MnTxIUFISXl1ea/f++lohIXqI5TiIiuUjXrl3p378/4eHhtGrVKrWX5d+sVisBAQF88803t3w/M8toZ+WKb59++im9evXip59+4tdff+XFF19k9OjRbNy4MXXhiVt58MEHCQ0NZf78+XTt2pUlS5Zw7do1unTpknqMyWTi+++/Z+PGjSxZsoQVK1bQp08fPv30UzZu3Jjul/ysdrteOZvNlubrW7Wn1WqlefPmvPbaa7e8Rrly5QAICAhg586drFixgl9++YVffvmFGTNm0KNHD2bNmnVPeUREJGNUOImI5CIdOnRgwIABbNy4Md2iAzcrXbo0v/32Gw0aNLhr4XPzcK57Vbp0aQD27t1LmTJl7nhslSpVqFKlCv/973/5888/adCgAZMnT2bUqFF3PK9z58589tlnREdHM2/ePEJDQ3nwwQfTHffggw/y4IMP8v777zN37lyeffZZvvvuO/r163fvN+hgpUuX5urVq6k9THfi4uJC27Ztadu2LVarlUGDBvHll1/y1ltv3bXtb1aiRAnAvlhFqVKlUvcnJiZy/PjxO2YpUaIEq1at4urVq2kK0kOHDmX480VEchsN1RMRyUW8vLyYNGkSI0eOpG3btrc9rnPnzqSkpPDee++ley85OTnNstGenp73vYx0ixYt8Pb2ZvTo0cTHx6d573oPR3R0NMnJyWneq1KlCmazOUPD6bp06UJCQgKzZs1i+fLldO7cOc37V65cSdebUr16dYA01z969Gjq0MKconPnzvz111+sWLEi3XuRkZGp7Xbp0qU075nNZqpWrQqQ6SGJzZo1w8XFhc8//zxNu02bNo2oqCgef/zx257bunVrkpOTmTRpUuq+lJQUvvjii0xlEBHJTdTjJCKSy2RkyefGjRszYMAARo8ezc6dO2nRogXOzs4cPnyYBQsW8Nlnn6XOj6pVqxaTJk1i1KhRlClThoCAAB599NFMZfLx8WHs2LH069ePOnXq0LVrVwoWLMiuXbuIi4tj1qxZ/P777wwZMoROnTpRrlw5kpOTmTNnDhaLhaeeeuqun1GzZk3KlCnDm2++SUJCQpphegCzZs1i4sSJdOjQgdKlSxMTE8OUKVPw8fGhdevWqcc1bdoUIN0zqIz0f//3fyxevJg2bdrQq1cvatWqRWxsLHv27OH777/nxIkT+Pv7069fPy5fvsyjjz5KsWLFOHnyJF988QXVq1enQoUKmfrMwoULM3z4cN555x0ee+wxnnjiCQ4dOsTEiROpU6fOHR/227ZtWxo0aMDrr7/OiRMnqFixIgsXLszQfDURkdxKhZOISB41efJkatWqxZdffskbb7yBk5MToaGhdOvWjQYNGqQeN2LECE6ePMlHH31ETEwMjRs3znThBNC3b18CAgL43//+x3vvvYezszPly5fn5ZdfBqBatWq0bNmSJUuWcPbsWTw8PKhWrRq//PLLLYfc3UqXLl14//33KVOmDDVr1kzzXuPGjdm8eTPfffcd58+fx9fXl7p16/LNN99kaIELI3l4eLB27Vo++OADFixYwOzZs/Hx8aFcuXK88847qSsSduvWja+++oqJEycSGRlJYGAgXbp0YeTIkWlWxsuokSNHUrhwYcaPH8/LL7+Mn58fzz33HB988MFtn+EE9p6uxYsX89JLL/H1119jMpl44okn+PTTT6lRo8Y9t4OISE5msmmWqIiIiIiIyB1pjpOIiIiIiMhdqHASERERERG5CxVOIiIiIiIid6HCSURERERE5C5UOImIiIiIiNyFCicREREREZG7yHfPcbJarZw7dw5vb29MJpPRcURERERExCA2m42YmBiKFi161+fh5bvC6dy5c4SEhBgdQ0REREREcojTp09TrFixOx6T7wonb29vwN44Pj4+BqeBpKQkfv31V1q0aHHHp7TLvVH7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s9tgQU/oswKcXI1OJSIikmtkunBq165dun0dO3akUqVKzJs3j759+2ZJMBERyUJOrtBpJnz5sL2AWv46tBlrdCoREZFcI8vmOD344IOsWrUqqy4nIiJZrUBxeHIqYIKt02HXPKMTiYiI5BpZUjhdu3aNzz//nODg4Ky4nIiIOErZZtD4NfvrpS/BhQOGxhEREcktMj1Ur2DBgphMptSvbTYbMTExeHh48PXXX2dpOBERcYDG/4HTm+HYapjXHZ5bDa7eRqcSERHJ0TJdOI0dOzZN4WQ2mylcuDD16tWjYMGCWRpOREQcwGyBp6ba5ztdOgw/DbHPf7rpZ7uIiIiklenCqVevXg6IISIi2crT314szWgF+3+ETZPhwYFGpxIREcmxMlQ47d69O8MXrFq16j2HERGRbBRSF1q8D8v/A7/+F4rWhOL1jE4lIiKSI2WocKpevTomkwmbzXbH40wmEykpKVkSTEREskG9AXB6I+xbBAt6wfPr7L1RIiIikkaGCqfjx487OoeIiBjBZIInvoDz++Di3/BDX+i20D4PSkRERFJlqHAqUaKEo3OIiIhRXL2h82yY8igcWwNr/gePvml0KhERkRwl04tDXLd//35OnTpFYmJimv1PPPHEfYcSEZFsFlAB2n4GC/vDHx/Z5z+VbW50KhERkRwj04XTsWPH6NChA3v27Ekz7+n6EuWa4yQikktV7QynNsLWafYCasAfUKC40alERERyBHNmTxg6dCglS5bkwoULeHh4sG/fPv744w9q167NmjVrHBBRRESyzWOj7avrXbsC83tAcoLRiURERHKETBdOf/31F++++y7+/v6YzWbMZjMNGzZk9OjRvPjii47IKCIi2cXJFTrPAveCcG4HrHjD6EQiIiI5QqYLp5SUFLy9vQHw9/fn3LlzgH0BiUOHDt1TiAkTJhAaGoqbmxv16tVj8+bNGTrvu+++w2Qy0b59+3v6XBERuYUCxeHJKYAJtkyF3QuMTiQiImK4TBdOlStXZteuXQDUq1ePjz76iA0bNvDuu+9SqlSpTAeYN28ew4YN4+2332b79u1Uq1aNli1bcuHChTued+LECV599VUaNWqU6c8UEZG7KNscHv4/++slL8KFA8bmERERMVimC6f//ve/WK1WAN59912OHz9Oo0aNWLZsGZ9//nmmA4wZM4b+/fvTu3dvKlas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5tdsNlOlShUAGjRowI4dO3jjjTdo27atK8P1OPnN7969ezlw4ABdunRxLnM4HAB4eXkRHx9P5cqVXRu0B7kVv4OtVisNGzZkz549rgjRo91IfsPCwrBarVgsFueymjVrkpiYSHp6Ot7e3i6N2ZPczP57/vx55s2bx7hx41wZoke7kfz++9//pk+fPvTv3x+AunXrcv78eQYMGMCIESMK3Qd8d7qR/JYuXZpvvvmGixcvcvLkScqWLcvw4cOpVKlSQYR83fRTdhFvb28aN27MihUrnMscDgcrVqygefPmboys6LjRHL/55pu8+uqrLF26lCZNmhREqB7pVu3DDoeDtLQ0V4To0fKb3xo1arBt2zZiY2Odj65du9KuXTtiY2MpX758QYZf6N2K/TczM5Nt27YRFhbmqjA91o3kt2XLluzZs8dZ8APs2rWLsLAwFU1XuJn998svvyQtLY1//OMfrg7TY91IflNTU68qji79EcAwDNcF64FuZv/18fEhPDycjIwMvvrqKx588EFXh5s/bm5OUaTNmzfPsNlsxuzZs43t27cbAwYMMEqUKOFsb9unTx9j+PDhzvXT0tKMzZs3G5s3bzbCwsKMF1980di8ebOxe/dud21CoZffHE+YMMHw9vY2FixYkK1ta0pKirs2oVDLb35ff/11Y/ny5cbevXuN7du3G1FRUYaXl5fx0UcfuWsTCrX85vdK6qqXu/zmd+zYscayZcuMvXv3GjExMcajjz5q+Pj4GHFxce7ahEItv/lNSEgw/P39jUGDBhnx8fHGDz/8YJQpU8Z47bXX3LUJhdqN/n5o1aqV0atXr4IO1+PkN7+jR482/P39jf/+97/Gvn37jOXLlxuVK1c2evbs6a5NKNTym99169YZX331lbF3717j119/Ne655x7jjjvuME6fPu2mLbg2FU4u9u677xoVKlQwvL29jaZNmxrr1q1zjrVp08bo16+f8/X+/fsN4KpHmzZtCj5wD5KfHFesWPGaOR49enTBB+4h8pPfESNGGFWqVDF8fHyMkiVLGs2bNzfmzZvnhqg9R37yeyUVTnnLT34HDx7sXDckJMTo3LlzobuHSGGT3/13zZo1RrNmzQybzWZUqlTJGD9+vJGRkVHAUXuO/OZ3586dBmAsX768gCP1TPnJr91uN8aMGWNUrlzZ8PHxMcqXL28899xzhe6DfWGSn/xGR0cbNWvWNGw2m1GqVCmjT58+xuHDh90Qde5MhqHjiyIiIiIiIrnRNU4iIiIiIiJ5UOEkIiIiIiKSBxVOIiIiIiIieVDhJCIiIiIikgcVTiIiIiIiInlQ4SQiIiIiIpIHFU4iIiIiIiJ5UOEkIiIiIiKSBxVOIiJSKEVHR2MymThz5kyBvu/s2bMpUaLETc1x4MABTCYTsbGxOa7jru0TEZEbo8JJREQKnMlkyvUxZswYd4coIiKSjZe7AxARkdvP0aNHnc/nz5/PqFGjiI+Pdy7z8/Nj06ZN+Z43PT0db2/vWxKjiIjI5XTESUREClxoaKjzERgYiMlkyrbMz8/PuW5MTAxNmjTB19eXFi1aZCuwxowZQ4MGDfjPf/7DHXfcgY+PDwBnzpyhf//+lC5dmoCAAO655x62bNni/L4tW7bQrl07/P39CQgIoHHjxlcVasuWLaNmzZr4+flx3333ZSv2HA4H48aNo1y5cthsNho0aMDSpUtz3ebFixdTrVo1ihUrRrt27Thw4MDNpFBERAqYCicRESnURowYwaRJk9i0aRNeXl48+eST2cb37NnDV199xcKFC53XFPXo0YNjx46xZMkSYmJiaNSoEffeey+nTp0C4LHHHqNcuXJs3LiRmJgYhg8fjtVqdc6ZmppKVFQUc+fO5ddffyUhIYEXX3zROf72228zadIkoqKi2Lp1K506daJr167s3r37mtvw559/0r17d7p06UJsbCz9+/dn+PDhtzhTIiLiSjpVT0RECrXx48fTpk0bAIYPH87999/PxYsXnUeX0tPTmTNnDqVLlwZg1apVbNiwgWPHjmGz2QCIiorim2++YcGCBQwYMICEhASGDh1KjRo1AKhatWq297Tb7cyYMYPKlSsDMGjQIMaNG+ccj4qK4qWXXuLRRx8FYOLEifzyyy9MnTqV6dOnX7UN77//PpUrV2bSpEkAVK9enW3btjFx4sRblicREXEtHXESEZFCrV69es7nYWFhABw7dsy5rGLFis6iCbJOwzt37hylSpXCz8/P+di/fz979+4FIDIykv79+9O+fXsmTJjgXH6Jr6+vs2i69L6X3jM5OZkjR47QsmXLbN/TsmVLduzYcc1t2LFjB82aNcu2rHnz5tedAxERcT8dcRIRkULt8lPoTCYTkHWN0SXFixfPtv65c+cICwsjOjr6qrkutRkfM2YMvXv3ZtGiRSxZsoTRo0czb948Hnrooave89L7GoZxKzZHREQ8lI44iYhIkdKoUSMSExPx8vKiSpUq2R7BwcHO9apVq8aQIUNYvnw53bt3Z9asWdc1f0BAAGXLlmX16tXZlq9evZpatWpd83tq1qzJhg0bsi1bt25dPrdMRETcSYWTiIgUKe3bt6d58+Z069aN5cuXc+DAAdasWcOIESPYtGkTFy5cYNCgQURHR3Pw4EFWr17Nxo0bqVmz5nW/x9ChQ5k4cSLz588nPj6e4cOHExsby//93/9dc/1nnnmG3bt3M3ToUOLj4/n888+ZPXv2LdpiEREpCDpVT0REihSTycTixYsZMWIETzzxBMePHyc0NJTWrVsTEhKCxWLh5MmT9O3bl6SkJIKDg+nevTtjx4697vf417/+xdmzZ3nhhRc4duwYtWrV4rvvvruqycQlFSpU4KuvvmLIkCG8++67NG3alNdff/2qDoEiIlJ4mQydtC0iIiIiIpIrnaonIiIiIiKSBxVOIiIiIiIieVDhJCIiIiIikgcVTiIiIiIiInlQ4SQiIiIiIpIHFU4iIiIiIiJ5UOEkIiIiIiKSBxVOIiIiIiIieVDhJCIiIiIikgcVTiIiIiIiInlQ4SQiIiIiIpKH/weYIj1i4zANqAAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"code","source":["predicted_classes_test = (predictions_test >= best_threshold).astype(int)\n","\n","# Imprimir el reporte de clasificación con el mejor threshold\n","print(\"Test set classification report with custom threshold:\")\n","print(classification_report(y_test, predicted_classes_test, target_names=['Clase 0', 'Clase 1']))\n","\n","# Calcular la precisión y el recall con el mejor threshold\n","precision = precision_score(y_test, predicted_classes_test)\n","recall = recall_score(y_test, predicted_classes_test)\n","\n","print(\"Precision (Test Set, Class 1) with custom threshold:\", precision)\n","print(\"Recall (Test Set, Class 1) with custom threshold:\", recall)\n","\n","# AUC Score no se afecta por el threshold, pero se puede recalcular para referencia\n","auc_score_test = roc_auc_score(y_test, predictions_test)\n","print(\"Test set AUC Score:\", auc_score_test)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qVItVMuY1JSR","executionInfo":{"status":"ok","timestamp":1732049732801,"user_tz":300,"elapsed":218,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"a12bb2d9-7088-4e19-bba2-9f1069049e7d"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Test set classification report with custom threshold:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.82      0.63      0.71        67\n","     Clase 1       0.24      0.47      0.32        17\n","\n","    accuracy                           0.60        84\n","   macro avg       0.53      0.55      0.52        84\n","weighted avg       0.71      0.60      0.63        84\n","\n","Precision (Test Set, Class 1) with custom threshold: 0.24242424242424243\n","Recall (Test Set, Class 1) with custom threshold: 0.47058823529411764\n","Test set AUC Score: 0.5100965759438103\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import roc_curve, auc\n","import matplotlib.pyplot as plt\n","\n","# Calcular la curva ROC y el AUC\n","fpr, tpr, _ = roc_curve(y_test, predictions_test)\n","roc_auc = auc(fpr, tpr)\n","\n","# Graficar la curva ROC\n","plt.figure(figsize=(10, 6))\n","plt.plot(fpr, tpr, color='blue', label=f'ROC Curve (AUC = {roc_auc:.4f})')\n","plt.plot([0, 1], [0, 1], color='gray', linestyle='--')  # Línea de referencia (clasificador aleatorio)\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic (ROC) Curve')\n","plt.legend(loc='lower right')\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"c2Ll-QFR1JKh","executionInfo":{"status":"ok","timestamp":1732049736418,"user_tz":300,"elapsed":1020,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"802c1e1d-ac10-42a3-e8ba-cd1e9386afa3"},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#RESULTADOS ANTERIORES"],"metadata":{"id":"-DzrZOUs1JuA"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19531,"status":"ok","timestamp":1731535875372,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"4-LSwrhIkB7e","outputId":"d20a069f-22f7-4f67-a868-93341e66daae"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 3s/step\n","Test set classification report after fine-tuning:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.79      0.73      0.76        67\n","     Clase 1       0.18      0.24      0.21        17\n","\n","    accuracy                           0.63        84\n","   macro avg       0.49      0.48      0.48        84\n","weighted avg       0.67      0.63      0.65        84\n","\n","Test set AUC Score after fine-tuning: 0.5496049165935031\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 379ms/step\n","Train set classification report after fine-tuning:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.79      0.81      0.80       265\n","     Clase 1       0.19      0.17      0.18        70\n","\n","    accuracy                           0.67       335\n","   macro avg       0.49      0.49      0.49       335\n","weighted avg       0.66      0.67      0.67       335\n","\n","Train set AUC Score after fine-tuning: 0.530566037735849\n"]}],"source":["from sklearn.metrics import classification_report, roc_auc_score\n","import matplotlib.pyplot as plt\n","\n","predictions_test = model.predict(test_data)\n","predicted_classes_test = np.round(predictions_test).astype(int)\n","\n","y_test = test_data.classes\n","\n","print(\"Test set classification report after fine-tuning:\")\n","print(classification_report(y_test, predicted_classes_test, target_names=['Clase 0', 'Clase 1']))\n","\n","auc_score_test = roc_auc_score(y_test, predictions_test)\n","print(\"Test set AUC Score after fine-tuning:\", auc_score_test)\n","\n","predictions_train = model.predict(train_data, steps=len(train_data), verbose=1)\n","predicted_classes_train = np.round(predictions_train).astype(int)\n","\n","y_train = train_data.classes\n","\n","print(\"Train set classification report after fine-tuning:\")\n","print(classification_report(y_train, predicted_classes_train, target_names=['Clase 0', 'Clase 1']))\n","\n","auc_score_train = roc_auc_score(y_train, predictions_train)\n","print(\"Train set AUC Score after fine-tuning:\", auc_score_train)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-XZD7a7bS_E-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731535892863,"user_tz":300,"elapsed":1665,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"898e6caf-8097-4fa4-d5d7-47a2217d2e6c"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 181ms/step\n","Precision (Test Set, Class 1): 0.13636363636363635\n","Recall (Test Set, Class 1): 0.17647058823529413\n"]}],"source":["from sklearn.metrics import precision_score, recall_score\n","\n","predictions_test = model.predict(test_data)\n","predicted_classes_test = np.round(predictions_test).astype(int)\n","y_test = test_data.classes\n","\n","precision = precision_score(y_test, predicted_classes_test, average='binary', pos_label=1)\n","recall = recall_score(y_test, predicted_classes_test, average='binary', pos_label=1)\n","\n","print(\"Precision (Test Set, Class 1):\", precision)\n","print(\"Recall (Test Set, Class 1):\", recall)\n"]},{"cell_type":"code","source":[],"metadata":{"id":"TvbJHgzGlOma"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"14150ZoPb6PJk1PpQeZmMLqsgfZ5b3WMh","timestamp":1730262005343},{"file_id":"1pqPrUIHz1h52XlAja3_WGrEarTGZ9udY","timestamp":1730259958433},{"file_id":"1kdpr_foeqbTxD5zgDDQx-9kaQCZjL-49","timestamp":1730257202045},{"file_id":"1wiAvHd6P1FPC4aPrsq5OZhTyP0ftiHKi","timestamp":1730255537619},{"file_id":"1vl4l6OhHGWn5I8H14IjbaarKtpWQlZ4j","timestamp":1730253865801},{"file_id":"1aS69bruyWTjkALtyqFDyL5WdXbs1cotQ","timestamp":1730251799274},{"file_id":"1XIQFivksNtyQmwqnxks8C3ziza499LmP","timestamp":1730227391477},{"file_id":"1bjaSRpUcyvdW5ToIZOb6Chi25LFZdZfA","timestamp":1730224807557},{"file_id":"1iW4qIigqB1uLTToYyPiOVwfgxmCnYXu9","timestamp":1729724070861},{"file_id":"14fteFtlnQAPiYwhAGEJVG3hHVHd9Fws5","timestamp":1729721692840},{"file_id":"14Z8LyP99xukHAoKBlOND6lfaRzOw024N","timestamp":1729719207228},{"file_id":"1hIS32OaEWe-ub6AUubjHFbCV-8Z9u3e9","timestamp":1729717024634},{"file_id":"1Dy-ngKQNSjbvLSnW9IYEw7uWEdMIUFgq","timestamp":1729713437883},{"file_id":"1OiHTrqHFB4BjQ4f7IPOxietIlC52S_-i","timestamp":1729710879543},{"file_id":"1iai0MKDIBpG8pBwceGufqM_mQrDGZK7p","timestamp":1729633654784},{"file_id":"1wthMRVFFFGVjNES7VdM8WmkjT1qoCcMK","timestamp":1729632597533},{"file_id":"1EuTB-NizY2iH3JrbCqFE3YPuNjKEQw8-","timestamp":1729622886260}],"collapsed_sections":["-DzrZOUs1JuA"],"authorship_tag":"ABX9TyP2cSzS7vy118fYlMnJgTcn"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}