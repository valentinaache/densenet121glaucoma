{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":67563,"status":"ok","timestamp":1732046886890,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"boX8ZPtfYMuE","outputId":"b5b1485a-63af-4696-e990-adf533a3917f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4988,"status":"ok","timestamp":1732047050903,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"mQzpyzneXrW8","outputId":"f621f67b-dee7-4dc6-ab96-29a15439cd55"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train DataFrame:\n","                                             filename   id eye Diagnosis\n","2   /content/drive/My Drive/Proyecto de Grado G/Pr...  004  OD         1\n","3   /content/drive/My Drive/Proyecto de Grado G/Pr...  004  OS         1\n","4   /content/drive/My Drive/Proyecto de Grado G/Pr...  005  OD         1\n","5   /content/drive/My Drive/Proyecto de Grado G/Pr...  005  OS         1\n","14  /content/drive/My Drive/Proyecto de Grado G/Pr...  010  OD         1\n","\n","Test DataFrame:\n","                                             filename   id eye Diagnosis\n","20  /content/drive/My Drive/Proyecto de Grado G/Pr...  015  OD         1\n","21  /content/drive/My Drive/Proyecto de Grado G/Pr...  015  OS         1\n","32  /content/drive/My Drive/Proyecto de Grado G/Pr...  023  OD         1\n","33  /content/drive/My Drive/Proyecto de Grado G/Pr...  023  OS         1\n","42  /content/drive/My Drive/Proyecto de Grado G/Pr...  028  OD         0\n"]}],"source":["import pandas as pd\n","from sklearn.model_selection import StratifiedShuffleSplit\n","import numpy as np\n","import os\n","\n","# Ruta al directorio con las imágenes\n","directorio_imagenes = '/content/drive/My Drive/Proyecto de Grado G/ProcessedImages_Disc_Exp2'\n","\n","imagenes_info = []\n","for filename in os.listdir(directorio_imagenes):\n","    if filename.endswith('.jpg') or filename.endswith('.png'):\n","        base = filename.split('_')[0]\n","        id_paciente = base[3:-2]\n","        tipo_ojo = base[-2:]\n","        full_path = os.path.join(directorio_imagenes, filename)\n","        imagenes_info.append({'filename': full_path, 'id': id_paciente, 'eye': tipo_ojo})\n","\n","imagenes_df = pd.DataFrame(imagenes_info)\n","\n","# Cargar y preparar los datos clínicos\n","data_od = pd.read_excel('/content/drive/My Drive/Proyecto de Grado G/patient_data_od.xlsx')\n","data_os = pd.read_excel('/content/drive/My Drive/Proyecto de Grado G/patient_data_os.xlsx')\n","\n","data_od['id'] = data_od['Unnamed: 0'].str.replace('#', '').astype(str)\n","data_os['id'] = data_os['Unnamed: 0'].str.replace('#', '').astype(str)\n","\n","data_od['eye'] = 'OD'\n","data_os['eye'] = 'OS'\n","\n","data_clinica = pd.concat([data_od[['id', 'eye', 'Diagnosis']], data_os[['id', 'eye', 'Diagnosis']]])\n","\n","full_df = pd.merge(imagenes_df, data_clinica, on=['id', 'eye'], how='left')\n","full_df = full_df[full_df['Diagnosis'] != 2]\n","\n","dominant_diagnosis = full_df.groupby('id')['Diagnosis'].agg(lambda x: x.mode()[0])\n","\n","\n","patient_df = pd.DataFrame(dominant_diagnosis).reset_index()\n","\n","splitter = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n","train_patients, test_patients = next(splitter.split(patient_df, patient_df['Diagnosis']))\n","\n","train_ids = patient_df.iloc[train_patients]['id']\n","test_ids = patient_df.iloc[test_patients]['id']\n","\n","train_df = full_df[full_df['id'].isin(train_ids)]\n","test_df = full_df[full_df['id'].isin(test_ids)]\n","\n","print(\"Train DataFrame:\")\n","print(train_df[['filename', 'id', 'eye', 'Diagnosis']].head())\n","\n","print(\"\\nTest DataFrame:\")\n","print(test_df[['filename', 'id', 'eye', 'Diagnosis']].head())"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3012,"status":"ok","timestamp":1732047054675,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"4YD6q2Ue5XkZ","outputId":"3c89695e-30fa-4a4d-eed2-f82814251ec1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Found 335 validated image filenames belonging to 2 classes.\n","Found 84 validated image filenames belonging to 2 classes.\n","Found 84 validated image filenames belonging to 2 classes.\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-3-ff7f9d810dc6>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train_df['Diagnosis'] = train_df['Diagnosis'].astype(str)\n","<ipython-input-3-ff7f9d810dc6>:26: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_df['Diagnosis'] = test_df['Diagnosis'].astype(str)\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import os\n","from tensorflow.keras.applications.inception_v3 import InceptionV3, preprocess_input\n","from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Input\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n","from sklearn.metrics import roc_auc_score\n","from sklearn.model_selection import StratifiedShuffleSplit\n","from sklearn.utils.class_weight import compute_class_weight\n","# Preparar los generadores de datos\n","train_datagen = ImageDataGenerator(\n","    preprocessing_function=preprocess_input,\n","    rotation_range=10,\n","    brightness_range=[0.8, 1.2],\n","    validation_split=0.2\n",")\n","\n","test_datagen = ImageDataGenerator(\n","    preprocessing_function=preprocess_input,\n",")\n","\n","train_df['Diagnosis'] = train_df['Diagnosis'].astype(str)\n","test_df['Diagnosis'] = test_df['Diagnosis'].astype(str)\n","\n","train_data = train_datagen.flow_from_dataframe(\n","    dataframe=train_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=20,\n","    class_mode='binary'\n",")\n","\n","test_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode='binary'\n",")\n","\n","valid_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode='binary'\n",")\n"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":217,"status":"ok","timestamp":1732047055848,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"j6-13qP2n_02","outputId":"53e2548e-136d-47d9-c782-a6d219245028"},"outputs":[{"output_type":"stream","name":"stdout","text":["Valores únicos en 'Diagnosis' después de la conversión: [1 0]\n","Class weights: {0: 0.6320754716981132, 1: 2.392857142857143}\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-4-5d28dd34677d>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train_df['Diagnosis'] = train_df['Diagnosis'].astype(int)\n","<ipython-input-4-5d28dd34677d>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_df['Diagnosis'] = test_df['Diagnosis'].astype(int)\n"]}],"source":["from sklearn.utils.class_weight import compute_class_weight\n","import pandas as pd\n","\n","# Convertir 'Diagnosis' de cadena a enteros\n","train_df['Diagnosis'] = train_df['Diagnosis'].astype(int)\n","test_df['Diagnosis'] = test_df['Diagnosis'].astype(int)\n","\n","# Verificar que la conversión fue exitosa\n","print(\"Valores únicos en 'Diagnosis' después de la conversión:\", train_df['Diagnosis'].unique())\n","\n","# Calcular los pesos de clases\n","class_weights = compute_class_weight(\n","    class_weight='balanced',\n","    classes=np.unique(train_df['Diagnosis']),\n","    y=train_df['Diagnosis']\n",")\n","class_weights = dict(enumerate(class_weights))\n","\n","print(\"Class weights:\", class_weights)\n"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RNcbG_WLm8Ma","executionInfo":{"status":"ok","timestamp":1732047622436,"user_tz":300,"elapsed":565468,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"0bcc7ce0-cc80-4d55-8433-f56193cfd8e1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/inception_v3/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n","\u001b[1m87910968/87910968\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 0us/step\n","Inicio de Warm-Up Training...\n","\n","Epoch 1/50\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:122: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 960ms/step - loss: 1.9575\n","Epoch 1: val_loss improved from inf to 0.58224, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m64s\u001b[0m 2s/step - loss: 1.9485 - val_loss: 0.5822\n","Epoch 2/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 357ms/step - loss: 0.9585\n","Epoch 2: val_loss improved from 0.58224 to 0.44226, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 494ms/step - loss: 0.9491 - val_loss: 0.4423\n","Epoch 3/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - loss: 0.6552\n","Epoch 3: val_loss did not improve from 0.44226\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 355ms/step - loss: 0.6535 - val_loss: 0.5330\n","Epoch 4/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 418ms/step - loss: 0.5465\n","Epoch 4: val_loss did not improve from 0.44226\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 458ms/step - loss: 0.5461 - val_loss: 0.5675\n","Epoch 5/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 335ms/step - loss: 0.4602\n","Epoch 5: val_loss did not improve from 0.44226\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 377ms/step - loss: 0.4622 - val_loss: 0.5675\n","Epoch 6/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 310ms/step - loss: 0.4492\n","Epoch 6: val_loss improved from 0.44226 to 0.40806, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 417ms/step - loss: 0.4509 - val_loss: 0.4081\n","Epoch 7/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 309ms/step - loss: 0.5164\n","Epoch 7: val_loss did not improve from 0.40806\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 343ms/step - loss: 0.5156 - val_loss: 0.7967\n","Epoch 8/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 386ms/step - loss: 0.4544\n","Epoch 8: val_loss did not improve from 0.40806\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 420ms/step - loss: 0.4547 - val_loss: 0.5900\n","Epoch 9/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 307ms/step - loss: 0.3980\n","Epoch 9: val_loss did not improve from 0.40806\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 339ms/step - loss: 0.3987 - val_loss: 0.4377\n","Epoch 10/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 370ms/step - loss: 0.3411\n","Epoch 10: val_loss did not improve from 0.40806\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 405ms/step - loss: 0.3427 - val_loss: 0.9277\n","Epoch 11/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 305ms/step - loss: 0.3499\n","Epoch 11: val_loss did not improve from 0.40806\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 345ms/step - loss: 0.3490 - val_loss: 0.5244\n","Epoch 12/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 310ms/step - loss: 0.3221\n","Epoch 12: val_loss improved from 0.40806 to 0.36909, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 419ms/step - loss: 0.3223 - val_loss: 0.3691\n","Epoch 13/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 311ms/step - loss: 0.2180\n","Epoch 13: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 351ms/step - loss: 0.2206 - val_loss: 1.1899\n","Epoch 14/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 405ms/step - loss: 0.3936\n","Epoch 14: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 440ms/step - loss: 0.3907 - val_loss: 0.6605\n","Epoch 15/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 313ms/step - loss: 0.2787\n","Epoch 15: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 349ms/step - loss: 0.2781 - val_loss: 0.9904\n","Epoch 16/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 322ms/step - loss: 0.2898\n","Epoch 16: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 356ms/step - loss: 0.2922 - val_loss: 0.5685\n","Epoch 17/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 396ms/step - loss: 0.2109\n","Epoch 17: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 430ms/step - loss: 0.2115 - val_loss: 0.5450\n","Epoch 18/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 379ms/step - loss: 0.1915\n","Epoch 18: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 417ms/step - loss: 0.1920 - val_loss: 0.8745\n","Epoch 19/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 319ms/step - loss: 0.2335\n","Epoch 19: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 359ms/step - loss: 0.2334 - val_loss: 1.2525\n","Epoch 20/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 385ms/step - loss: 0.2104\n","Epoch 20: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 419ms/step - loss: 0.2098 - val_loss: 0.7009\n","Epoch 21/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 398ms/step - loss: 0.2073\n","Epoch 21: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 437ms/step - loss: 0.2054 - val_loss: 0.4329\n","Epoch 22/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - loss: 0.1726\n","Epoch 22: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 356ms/step - loss: 0.1731 - val_loss: 0.8888\n","Epoch 23/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 413ms/step - loss: 0.1589\n","Epoch 23: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 447ms/step - loss: 0.1590 - val_loss: 0.7742\n","Epoch 24/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 333ms/step - loss: 0.1148\n","Epoch 24: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 374ms/step - loss: 0.1155 - val_loss: 0.9226\n","Epoch 25/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 317ms/step - loss: 0.1302\n","Epoch 25: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 352ms/step - loss: 0.1295 - val_loss: 0.6404\n","Epoch 26/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 333ms/step - loss: 0.1381\n","Epoch 26: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 373ms/step - loss: 0.1374 - val_loss: 0.5565\n","Epoch 27/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 322ms/step - loss: 0.1112\n","Epoch 27: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 363ms/step - loss: 0.1116 - val_loss: 0.5306\n","Epoch 28/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 315ms/step - loss: 0.0886\n","Epoch 28: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 350ms/step - loss: 0.0879 - val_loss: 0.4804\n","Epoch 29/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 354ms/step - loss: 0.0818\n","Epoch 29: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 387ms/step - loss: 0.0823 - val_loss: 0.6103\n","Epoch 30/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 342ms/step - loss: 0.0971\n","Epoch 30: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 381ms/step - loss: 0.0967 - val_loss: 0.4860\n","Epoch 31/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 328ms/step - loss: 0.0629\n","Epoch 31: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 362ms/step - loss: 0.0629 - val_loss: 0.6631\n","Epoch 32/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 314ms/step - loss: 0.0739\n","Epoch 32: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 346ms/step - loss: 0.0737 - val_loss: 0.4571\n","Epoch 33/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 402ms/step - loss: 0.1309\n","Epoch 33: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 437ms/step - loss: 0.1288 - val_loss: 0.5106\n","Epoch 34/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 365ms/step - loss: 0.0451\n","Epoch 34: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 446ms/step - loss: 0.0458 - val_loss: 0.7444\n","Epoch 35/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 312ms/step - loss: 0.0557\n","Epoch 35: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 346ms/step - loss: 0.0570 - val_loss: 1.0609\n","Epoch 36/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 310ms/step - loss: 0.0797\n","Epoch 36: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 345ms/step - loss: 0.0788 - val_loss: 0.4572\n","Epoch 37/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 379ms/step - loss: 0.0579\n","Epoch 37: val_loss did not improve from 0.36909\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 460ms/step - loss: 0.0581 - val_loss: 0.6117\n"]}],"source":["input_tensor = Input(shape=(299, 299, 3))\n","base_model = InceptionV3(input_tensor=input_tensor, weights='imagenet', include_top=False, pooling='avg')\n","\n","x = base_model.output\n","x = Dense(2048, activation='relu')(x)\n","predictions = Dense(1, activation='sigmoid')(x)\n","model = Model(inputs=base_model.input, outputs=predictions)\n","\n","for layer in base_model.layers:\n","    layer.trainable = False\n","\n","model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy')\n","\n","checkpoint = ModelCheckpoint('best_model_warmup.keras', monitor='val_loss', save_best_only=True, mode='min', verbose=1)\n","early_stop = EarlyStopping(monitor='val_loss', patience=25, restore_best_weights=True, mode='min')\n","\n","print(\"Inicio de Warm-Up Training...\\n\")\n","warmup_history = model.fit(\n","    train_data,\n","    validation_data=valid_data,\n","    epochs=50,\n","    callbacks=[checkpoint, early_stop],\n","    class_weight=class_weights\n",")\n"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1111677,"status":"ok","timestamp":1732049057658,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"kEOK8le1nAVq","outputId":"7b226e41-7a0c-4523-dca2-09f8e4fb8810"},"outputs":[{"output_type":"stream","name":"stdout","text":["Inicio de Fine-Tuning Training...\n","\n","Epoch 1/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4s/step - loss: 1.2115\n","Epoch 1: val_loss improved from inf to 0.48497, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m167s\u001b[0m 5s/step - loss: 1.2012 - val_loss: 0.4850\n","Epoch 2/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 426ms/step - loss: 0.9245\n","Epoch 2: val_loss did not improve from 0.48497\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 472ms/step - loss: 0.9289 - val_loss: 0.5007\n","Epoch 3/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 440ms/step - loss: 1.1075\n","Epoch 3: val_loss improved from 0.48497 to 0.46674, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 649ms/step - loss: 1.1012 - val_loss: 0.4667\n","Epoch 4/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 518ms/step - loss: 1.0206\n","Epoch 4: val_loss improved from 0.46674 to 0.46146, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 687ms/step - loss: 1.0158 - val_loss: 0.4615\n","Epoch 5/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 509ms/step - loss: 0.9917\n","Epoch 5: val_loss improved from 0.46146 to 0.45554, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 679ms/step - loss: 0.9865 - val_loss: 0.4555\n","Epoch 6/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 490ms/step - loss: 0.9068\n","Epoch 6: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 524ms/step - loss: 0.9065 - val_loss: 0.4608\n","Epoch 7/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 510ms/step - loss: 0.8022\n","Epoch 7: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 551ms/step - loss: 0.8019 - val_loss: 0.4677\n","Epoch 8/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 504ms/step - loss: 0.7150\n","Epoch 8: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 538ms/step - loss: 0.7164 - val_loss: 0.4775\n","Epoch 9/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 505ms/step - loss: 0.7117\n","Epoch 9: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 539ms/step - loss: 0.7143 - val_loss: 0.5123\n","Epoch 10/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 458ms/step - loss: 0.5441\n","Epoch 10: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 499ms/step - loss: 0.5514 - val_loss: 0.5201\n","Epoch 11/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 525ms/step - loss: 0.8331\n","Epoch 11: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 560ms/step - loss: 0.8276 - val_loss: 0.5107\n","Epoch 12/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 429ms/step - loss: 0.8084\n","Epoch 12: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 469ms/step - loss: 0.8035 - val_loss: 0.5143\n","Epoch 13/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 516ms/step - loss: 0.7858\n","Epoch 13: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 549ms/step - loss: 0.7833 - val_loss: 0.5056\n","Epoch 14/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 424ms/step - loss: 0.6797\n","Epoch 14: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 465ms/step - loss: 0.6791 - val_loss: 0.5195\n","Epoch 15/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 437ms/step - loss: 0.6870\n","Epoch 15: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 477ms/step - loss: 0.6853 - val_loss: 0.5402\n","Epoch 16/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 499ms/step - loss: 0.7231\n","Epoch 16: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 531ms/step - loss: 0.7207 - val_loss: 0.5647\n","Epoch 17/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 523ms/step - loss: 0.7084\n","Epoch 17: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 557ms/step - loss: 0.7076 - val_loss: 0.5970\n","Epoch 18/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 494ms/step - loss: 0.5826\n","Epoch 18: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 526ms/step - loss: 0.5845 - val_loss: 0.6136\n","Epoch 19/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 433ms/step - loss: 0.6580\n","Epoch 19: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 468ms/step - loss: 0.6573 - val_loss: 0.6355\n","Epoch 20/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 450ms/step - loss: 0.6350\n","Epoch 20: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 484ms/step - loss: 0.6342 - val_loss: 0.6641\n","Epoch 21/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 469ms/step - loss: 0.5922\n","Epoch 21: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 504ms/step - loss: 0.5932 - val_loss: 0.6869\n","Epoch 22/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 521ms/step - loss: 0.6100\n","Epoch 22: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 555ms/step - loss: 0.6103 - val_loss: 0.7045\n","Epoch 23/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 449ms/step - loss: 0.5629\n","Epoch 23: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 530ms/step - loss: 0.5641 - val_loss: 0.7154\n","Epoch 24/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 444ms/step - loss: 0.5827\n","Epoch 24: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 489ms/step - loss: 0.5844 - val_loss: 0.7150\n","Epoch 25/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 496ms/step - loss: 0.5783\n","Epoch 25: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 531ms/step - loss: 0.5791 - val_loss: 0.7069\n","Epoch 26/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 480ms/step - loss: 0.5811\n","Epoch 26: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 524ms/step - loss: 0.5803 - val_loss: 0.7055\n","Epoch 27/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 564ms/step - loss: 0.6339\n","Epoch 27: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 645ms/step - loss: 0.6314 - val_loss: 0.7035\n","Epoch 28/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 458ms/step - loss: 0.5795\n","Epoch 28: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 501ms/step - loss: 0.5796 - val_loss: 0.6996\n","Epoch 29/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 514ms/step - loss: 0.5017\n","Epoch 29: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 550ms/step - loss: 0.5049 - val_loss: 0.7005\n","Epoch 30/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 530ms/step - loss: 0.7124\n","Epoch 30: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 565ms/step - loss: 0.7051 - val_loss: 0.7134\n","Epoch 31/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 551ms/step - loss: 0.5294\n","Epoch 31: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 587ms/step - loss: 0.5306 - val_loss: 0.7121\n","Epoch 32/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 558ms/step - loss: 0.6340\n","Epoch 32: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 590ms/step - loss: 0.6309 - val_loss: 0.7140\n","Epoch 33/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 443ms/step - loss: 0.5095\n","Epoch 33: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 488ms/step - loss: 0.5102 - val_loss: 0.7113\n","Epoch 34/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 441ms/step - loss: 0.6008\n","Epoch 34: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 474ms/step - loss: 0.5985 - val_loss: 0.7177\n","Epoch 35/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 539ms/step - loss: 0.5732\n","Epoch 35: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 574ms/step - loss: 0.5720 - val_loss: 0.7272\n","Epoch 36/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 529ms/step - loss: 0.4832\n","Epoch 36: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 564ms/step - loss: 0.4844 - val_loss: 0.7352\n","Epoch 37/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 448ms/step - loss: 0.5732\n","Epoch 37: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 482ms/step - loss: 0.5695 - val_loss: 0.7410\n","Epoch 38/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 540ms/step - loss: 0.5270\n","Epoch 38: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 577ms/step - loss: 0.5258 - val_loss: 0.7373\n","Epoch 39/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 434ms/step - loss: 0.4908\n","Epoch 39: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 475ms/step - loss: 0.4909 - val_loss: 0.7336\n","Epoch 40/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 444ms/step - loss: 0.4726\n","Epoch 40: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 478ms/step - loss: 0.4752 - val_loss: 0.7313\n","Epoch 41/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 514ms/step - loss: 0.4656\n","Epoch 41: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 549ms/step - loss: 0.4672 - val_loss: 0.7384\n","Epoch 42/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 448ms/step - loss: 0.5227\n","Epoch 42: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 528ms/step - loss: 0.5207 - val_loss: 0.7454\n","Epoch 43/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 448ms/step - loss: 0.4805\n","Epoch 43: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 528ms/step - loss: 0.4824 - val_loss: 0.7423\n","Epoch 44/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 506ms/step - loss: 0.5328\n","Epoch 44: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 542ms/step - loss: 0.5312 - val_loss: 0.7372\n","Epoch 45/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 470ms/step - loss: 0.5403\n","Epoch 45: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 512ms/step - loss: 0.5381 - val_loss: 0.7382\n","Epoch 46/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 471ms/step - loss: 0.4821\n","Epoch 46: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 508ms/step - loss: 0.4827 - val_loss: 0.7403\n","Epoch 47/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 482ms/step - loss: 0.4463\n","Epoch 47: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 519ms/step - loss: 0.4473 - val_loss: 0.7351\n","Epoch 48/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 450ms/step - loss: 0.4567\n","Epoch 48: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 484ms/step - loss: 0.4562 - val_loss: 0.7357\n","Epoch 49/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 483ms/step - loss: 0.4545\n","Epoch 49: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 518ms/step - loss: 0.4536 - val_loss: 0.7357\n","Epoch 50/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 433ms/step - loss: 0.4672\n","Epoch 50: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 479ms/step - loss: 0.4675 - val_loss: 0.7338\n","Epoch 51/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 439ms/step - loss: 0.4985\n","Epoch 51: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 483ms/step - loss: 0.4985 - val_loss: 0.7395\n","Epoch 52/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 498ms/step - loss: 0.4749\n","Epoch 52: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 532ms/step - loss: 0.4739 - val_loss: 0.7436\n","Epoch 53/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 432ms/step - loss: 0.4722\n","Epoch 53: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 472ms/step - loss: 0.4724 - val_loss: 0.7390\n","Epoch 54/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 471ms/step - loss: 0.4708\n","Epoch 54: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 505ms/step - loss: 0.4686 - val_loss: 0.7315\n","Epoch 55/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 443ms/step - loss: 0.5351\n","Epoch 55: val_loss did not improve from 0.45554\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 524ms/step - loss: 0.5316 - val_loss: 0.7319\n"]}],"source":["from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n","\n","model.load_weights(\"best_model_warmup.keras\")\n","\n","for layer in base_model.layers:\n","    layer.trainable = True\n","\n","model.compile(optimizer=Adam(learning_rate=0.000001), loss='binary_crossentropy')\n","\n","checkpoint_finetune_path = \"best_model_finetune.keras\"\n","checkpoint_finetune = ModelCheckpoint(\n","    checkpoint_finetune_path,\n","    save_best_only=True,\n","    monitor=\"val_loss\",\n","    mode='min',\n","    verbose=1\n",")\n","early_stopping = EarlyStopping(\n","    monitor='val_loss',\n","    patience=50,\n","    restore_best_weights=True,\n","    mode='min'\n",")\n","\n","print(\"Inicio de Fine-Tuning Training...\\n\")\n","history_finetune = model.fit(\n","    train_data,\n","    validation_data=valid_data,\n","    epochs=200,\n","    callbacks=[checkpoint_finetune, early_stopping],\n","    class_weight=class_weights\n",")"]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.metrics import precision_score, recall_score, f1_score, classification_report, roc_auc_score\n","import matplotlib.pyplot as plt\n","\n","predictions_test = model.predict(test_data)\n","y_test = test_data.classes\n","\n","thresholds = np.arange(0.1, 1.0, 0.1)\n","best_threshold = 0.5\n","best_f1 = 0\n","\n","for threshold in thresholds:\n","    predicted_classes_test = (predictions_test >= threshold).astype(int)\n","    f1 = f1_score(y_test, predicted_classes_test)\n","    precision = precision_score(y_test, predicted_classes_test)\n","    recall = recall_score(y_test, predicted_classes_test)\n","\n","    print(f'Threshold: {threshold:.2f}')\n","    print(f'Precision: {precision:.4f}, Recall: {recall:.4f}, F1 Score: {f1:.4f}\\n')\n","\n","    if f1 > best_f1:\n","        best_f1 = f1\n","        best_threshold = threshold\n","\n","print(f'Mejor threshold: {best_threshold} con F1 Score: {best_f1}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7L8QPGSkt1ue","executionInfo":{"status":"ok","timestamp":1732049140033,"user_tz":300,"elapsed":14476,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"d223c3a8-ad55-460e-ed4c-a2a32e6a81aa"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 4s/step\n","Threshold: 0.10\n","Precision: 0.2254, Recall: 0.9412, F1 Score: 0.3636\n","\n","Threshold: 0.20\n","Precision: 0.1833, Recall: 0.6471, F1 Score: 0.2857\n","\n","Threshold: 0.30\n","Precision: 0.2222, Recall: 0.5882, F1 Score: 0.3226\n","\n","Threshold: 0.40\n","Precision: 0.2059, Recall: 0.4118, F1 Score: 0.2745\n","\n","Threshold: 0.50\n","Precision: 0.2000, Recall: 0.2941, F1 Score: 0.2381\n","\n","Threshold: 0.60\n","Precision: 0.1765, Recall: 0.1765, F1 Score: 0.1765\n","\n","Threshold: 0.70\n","Precision: 0.2000, Recall: 0.1176, F1 Score: 0.1481\n","\n","Threshold: 0.80\n","Precision: 0.0000, Recall: 0.0000, F1 Score: 0.0000\n","\n","Threshold: 0.90\n","Precision: 0.0000, Recall: 0.0000, F1 Score: 0.0000\n","\n","Mejor threshold: 0.1 con F1 Score: 0.36363636363636365\n"]}]},{"cell_type":"code","source":["precisions = []\n","recalls = []\n","f1_scores = []\n","\n","for threshold in thresholds:\n","    predicted_classes_test = (predictions_test >= threshold).astype(int)\n","    precisions.append(precision_score(y_test, predicted_classes_test))\n","    recalls.append(recall_score(y_test, predicted_classes_test))\n","    f1_scores.append(f1_score(y_test, predicted_classes_test))\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(thresholds, precisions, label='Precision')\n","plt.plot(thresholds, recalls, label='Recall')\n","plt.plot(thresholds, f1_scores, label='F1 Score')\n","plt.xlabel('Threshold')\n","plt.ylabel('Metric Value')\n","plt.title('Metrics vs. Threshold')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"N3kIUWogt1qu","executionInfo":{"status":"ok","timestamp":1732049142606,"user_tz":300,"elapsed":528,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"796079ea-c462-4f89-c2f5-7f737bd43830"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["predicted_classes_test = (predictions_test >= best_threshold).astype(int)\n","\n","# Imprimir el reporte de clasificación con el mejor threshold\n","print(\"Test set classification report with custom threshold:\")\n","print(classification_report(y_test, predicted_classes_test, target_names=['Clase 0', 'Clase 1']))\n","\n","# Calcular la precisión y el recall con el mejor threshold\n","precision = precision_score(y_test, predicted_classes_test)\n","recall = recall_score(y_test, predicted_classes_test)\n","\n","print(\"Precision (Test Set, Class 1) with custom threshold:\", precision)\n","print(\"Recall (Test Set, Class 1) with custom threshold:\", recall)\n","\n","# AUC Score no se afecta por el threshold, pero se puede recalcular para referencia\n","auc_score_test = roc_auc_score(y_test, predictions_test)\n","print(\"Test set AUC Score:\", auc_score_test)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KIEQ5vdft1nH","executionInfo":{"status":"ok","timestamp":1732049144529,"user_tz":300,"elapsed":201,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"cc065c7f-3afd-4d41-b8db-99ca059a7a14"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Test set classification report with custom threshold:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.92      0.18      0.30        67\n","     Clase 1       0.23      0.94      0.36        17\n","\n","    accuracy                           0.33        84\n","   macro avg       0.57      0.56      0.33        84\n","weighted avg       0.78      0.33      0.31        84\n","\n","Precision (Test Set, Class 1) with custom threshold: 0.22535211267605634\n","Recall (Test Set, Class 1) with custom threshold: 0.9411764705882353\n","Test set AUC Score: 0.5127304653204565\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import roc_curve, auc\n","import matplotlib.pyplot as plt\n","\n","# Calcular la curva ROC y el AUC\n","fpr, tpr, _ = roc_curve(y_test, predictions_test)\n","roc_auc = auc(fpr, tpr)\n","\n","# Graficar la curva ROC\n","plt.figure(figsize=(10, 6))\n","plt.plot(fpr, tpr, color='blue', label=f'ROC Curve (AUC = {roc_auc:.4f})')\n","plt.plot([0, 1], [0, 1], color='gray', linestyle='--')  # Línea de referencia (clasificador aleatorio)\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic (ROC) Curve')\n","plt.legend(loc='lower right')\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"GxVIm6Pgt1f-","executionInfo":{"status":"ok","timestamp":1732049146652,"user_tz":300,"elapsed":484,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"5b534f47-a17e-47c3-890b-ee153f0a7675"},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#RESULTADOS ANTERIORES"],"metadata":{"id":"AAyIacZMt2Dc"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":42168,"status":"ok","timestamp":1731534978435,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"4-LSwrhIkB7e","outputId":"a538aea0-482f-471a-fe86-f27b17617272"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 3s/step\n","Test set classification report after fine-tuning:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.78      0.75      0.76        67\n","     Clase 1       0.15      0.18      0.16        17\n","\n","    accuracy                           0.63        84\n","   macro avg       0.47      0.46      0.46        84\n","weighted avg       0.65      0.63      0.64        84\n","\n","Test set AUC Score after fine-tuning: 0.4091308165057067\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 1s/step\n","Train set classification report after fine-tuning:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.79      0.76      0.77       265\n","     Clase 1       0.19      0.21      0.20        70\n","\n","    accuracy                           0.64       335\n","   macro avg       0.49      0.49      0.49       335\n","weighted avg       0.66      0.64      0.65       335\n","\n","Train set AUC Score after fine-tuning: 0.514932614555256\n"]}],"source":["from sklearn.metrics import classification_report, roc_auc_score\n","import matplotlib.pyplot as plt\n","\n","predictions_test = model.predict(test_data)\n","predicted_classes_test = np.round(predictions_test).astype(int)\n","\n","y_test = test_data.classes\n","\n","print(\"Test set classification report after fine-tuning:\")\n","print(classification_report(y_test, predicted_classes_test, target_names=['Clase 0', 'Clase 1']))\n","\n","auc_score_test = roc_auc_score(y_test, predictions_test)\n","print(\"Test set AUC Score after fine-tuning:\", auc_score_test)\n","\n","predictions_train = model.predict(train_data, steps=len(train_data), verbose=1)\n","predicted_classes_train = np.round(predictions_train).astype(int)\n","\n","y_train = train_data.classes\n","\n","print(\"Train set classification report after fine-tuning:\")\n","print(classification_report(y_train, predicted_classes_train, target_names=['Clase 0', 'Clase 1']))\n","\n","auc_score_train = roc_auc_score(y_train, predictions_train)\n","print(\"Train set AUC Score after fine-tuning:\", auc_score_train)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-XZD7a7bS_E-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731534981494,"user_tz":300,"elapsed":1773,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"d0aa8cb4-4a9d-46d4-d06f-d0c4e24df7b9"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 189ms/step\n","Precision (Test Set, Class 1): 0.2\n","Recall (Test Set, Class 1): 0.23529411764705882\n"]}],"source":["from sklearn.metrics import precision_score, recall_score\n","\n","predictions_test = model.predict(test_data)\n","predicted_classes_test = np.round(predictions_test).astype(int)\n","y_test = test_data.classes\n","\n","precision = precision_score(y_test, predicted_classes_test, average='binary', pos_label=1)\n","recall = recall_score(y_test, predicted_classes_test, average='binary', pos_label=1)\n","\n","print(\"Precision (Test Set, Class 1):\", precision)\n","print(\"Recall (Test Set, Class 1):\", recall)\n"]},{"cell_type":"code","source":[],"metadata":{"id":"BsUvXRPqhwCa"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"1pqPrUIHz1h52XlAja3_WGrEarTGZ9udY","timestamp":1730259958433},{"file_id":"1kdpr_foeqbTxD5zgDDQx-9kaQCZjL-49","timestamp":1730257202045},{"file_id":"1wiAvHd6P1FPC4aPrsq5OZhTyP0ftiHKi","timestamp":1730255537619},{"file_id":"1vl4l6OhHGWn5I8H14IjbaarKtpWQlZ4j","timestamp":1730253865801},{"file_id":"1aS69bruyWTjkALtyqFDyL5WdXbs1cotQ","timestamp":1730251799274},{"file_id":"1XIQFivksNtyQmwqnxks8C3ziza499LmP","timestamp":1730227391477},{"file_id":"1bjaSRpUcyvdW5ToIZOb6Chi25LFZdZfA","timestamp":1730224807557},{"file_id":"1iW4qIigqB1uLTToYyPiOVwfgxmCnYXu9","timestamp":1729724070861},{"file_id":"14fteFtlnQAPiYwhAGEJVG3hHVHd9Fws5","timestamp":1729721692840},{"file_id":"14Z8LyP99xukHAoKBlOND6lfaRzOw024N","timestamp":1729719207228},{"file_id":"1hIS32OaEWe-ub6AUubjHFbCV-8Z9u3e9","timestamp":1729717024634},{"file_id":"1Dy-ngKQNSjbvLSnW9IYEw7uWEdMIUFgq","timestamp":1729713437883},{"file_id":"1OiHTrqHFB4BjQ4f7IPOxietIlC52S_-i","timestamp":1729710879543},{"file_id":"1iai0MKDIBpG8pBwceGufqM_mQrDGZK7p","timestamp":1729633654784},{"file_id":"1wthMRVFFFGVjNES7VdM8WmkjT1qoCcMK","timestamp":1729632597533},{"file_id":"1EuTB-NizY2iH3JrbCqFE3YPuNjKEQw8-","timestamp":1729622886260}],"collapsed_sections":["AAyIacZMt2Dc"],"authorship_tag":"ABX9TyPftehrxvCZ1e1dSp0d/ydk"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}