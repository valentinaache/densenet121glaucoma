{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1hIS32OaEWe-ub6AUubjHFbCV-8Z9u3e9","timestamp":1729717024634},{"file_id":"1Dy-ngKQNSjbvLSnW9IYEw7uWEdMIUFgq","timestamp":1729713437883},{"file_id":"1OiHTrqHFB4BjQ4f7IPOxietIlC52S_-i","timestamp":1729710879543},{"file_id":"1iai0MKDIBpG8pBwceGufqM_mQrDGZK7p","timestamp":1729633654784},{"file_id":"1wthMRVFFFGVjNES7VdM8WmkjT1qoCcMK","timestamp":1729632597533},{"file_id":"1EuTB-NizY2iH3JrbCqFE3YPuNjKEQw8-","timestamp":1729622886260}],"gpuType":"T4","authorship_tag":"ABX9TyNuYwkf0xjFXCzvNdjQScvK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"boX8ZPtfYMuE","executionInfo":{"status":"ok","timestamp":1732041615532,"user_tz":300,"elapsed":20268,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"5092409f-6c0c-4072-b7f9-d6ab0cf4d0c2"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mQzpyzneXrW8","executionInfo":{"status":"ok","timestamp":1732041640034,"user_tz":300,"elapsed":3846,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"ad0ea419-ef35-4386-f5ae-b86147eceef0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train DataFrame:\n","                                             filename   id eye Diagnosis\n","2   /content/drive/My Drive/Proyecto de Grado G/Pr...  004  OD         1\n","3   /content/drive/My Drive/Proyecto de Grado G/Pr...  004  OS         1\n","4   /content/drive/My Drive/Proyecto de Grado G/Pr...  005  OD         1\n","5   /content/drive/My Drive/Proyecto de Grado G/Pr...  005  OS         1\n","14  /content/drive/My Drive/Proyecto de Grado G/Pr...  010  OD         1\n","\n","Test DataFrame:\n","                                             filename   id eye Diagnosis\n","20  /content/drive/My Drive/Proyecto de Grado G/Pr...  015  OD         1\n","21  /content/drive/My Drive/Proyecto de Grado G/Pr...  015  OS         1\n","32  /content/drive/My Drive/Proyecto de Grado G/Pr...  023  OD         1\n","33  /content/drive/My Drive/Proyecto de Grado G/Pr...  023  OS         1\n","42  /content/drive/My Drive/Proyecto de Grado G/Pr...  028  OD         0\n"]}],"source":["import pandas as pd\n","from sklearn.model_selection import StratifiedShuffleSplit\n","import numpy as np\n","import os\n","\n","# Ruta al directorio con las imágenes\n","directorio_imagenes = '/content/drive/My Drive/Proyecto de Grado G/ProcessedImages_Disc_Exp2'\n","\n","imagenes_info = []\n","for filename in os.listdir(directorio_imagenes):\n","    if filename.endswith('.jpg') or filename.endswith('.png'):\n","        base = filename.split('_')[0]\n","        id_paciente = base[3:-2]  # Extrae correctamente el ID del paciente\n","        tipo_ojo = base[-2:]\n","        full_path = os.path.join(directorio_imagenes, filename)\n","        imagenes_info.append({'filename': full_path, 'id': id_paciente, 'eye': tipo_ojo})\n","\n","imagenes_df = pd.DataFrame(imagenes_info)\n","\n","# Cargar y preparar los datos clínicos\n","data_od = pd.read_excel('/content/drive/My Drive/Proyecto de Grado G/patient_data_od.xlsx')\n","data_os = pd.read_excel('/content/drive/My Drive/Proyecto de Grado G/patient_data_os.xlsx')\n","\n","data_od['id'] = data_od['Unnamed: 0'].str.replace('#', '').astype(str)\n","data_os['id'] = data_os['Unnamed: 0'].str.replace('#', '').astype(str)\n","\n","data_od['eye'] = 'OD'\n","data_os['eye'] = 'OS'\n","\n","data_clinica = pd.concat([data_od[['id', 'eye', 'Diagnosis']], data_os[['id', 'eye', 'Diagnosis']]])\n","\n","full_df = pd.merge(imagenes_df, data_clinica, on=['id', 'eye'], how='left')\n","full_df = full_df[full_df['Diagnosis'] != 2]\n","\n","dominant_diagnosis = full_df.groupby('id')['Diagnosis'].agg(lambda x: x.mode()[0])\n","\n","\n","patient_df = pd.DataFrame(dominant_diagnosis).reset_index()\n","\n","splitter = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n","train_patients, test_patients = next(splitter.split(patient_df, patient_df['Diagnosis']))\n","\n","train_ids = patient_df.iloc[train_patients]['id']\n","test_ids = patient_df.iloc[test_patients]['id']\n","\n","train_df = full_df[full_df['id'].isin(train_ids)]\n","test_df = full_df[full_df['id'].isin(test_ids)]\n","\n","print(\"Train DataFrame:\")\n","print(train_df[['filename', 'id', 'eye', 'Diagnosis']].head())\n","\n","print(\"\\nTest DataFrame:\")\n","print(test_df[['filename', 'id', 'eye', 'Diagnosis']].head())"]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import os\n","from tensorflow.keras.applications.inception_v3 import InceptionV3, preprocess_input\n","from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Input\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n","from sklearn.metrics import roc_auc_score\n","from sklearn.model_selection import StratifiedShuffleSplit\n","from sklearn.utils.class_weight import compute_class_weight\n","# Preparar los generadores de datos\n","train_datagen = ImageDataGenerator(\n","    preprocessing_function=preprocess_input,\n","    rotation_range=10,\n","    width_shift_range=0.2,\n","    height_shift_range=0.2,\n","    horizontal_flip=True,\n","    vertical_flip=False,\n","    fill_mode='nearest',\n","    validation_split = 0.2\n",")\n","\n","test_datagen = ImageDataGenerator(\n","    preprocessing_function=preprocess_input,\n",")\n","\n","train_df['Diagnosis'] = train_df['Diagnosis'].astype(str)\n","test_df['Diagnosis'] = test_df['Diagnosis'].astype(str)\n","\n","train_data = train_datagen.flow_from_dataframe(\n","    dataframe=train_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=20,\n","    class_mode='binary'\n",")\n","\n","test_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode='binary'\n",")\n","\n","valid_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode='binary'\n",")\n"],"metadata":{"id":"4YD6q2Ue5XkZ","colab":{"base_uri":"https://localhost:8080/"},"outputId":"2e83d6da-2025-42cf-f28d-dfc2b7f609cf","executionInfo":{"status":"ok","timestamp":1732041644066,"user_tz":300,"elapsed":3031,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}}},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 335 validated image filenames belonging to 2 classes.\n","Found 84 validated image filenames belonging to 2 classes.\n","Found 84 validated image filenames belonging to 2 classes.\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-4-d2558d8b6ad4>:29: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train_df['Diagnosis'] = train_df['Diagnosis'].astype(str)\n","<ipython-input-4-d2558d8b6ad4>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_df['Diagnosis'] = test_df['Diagnosis'].astype(str)\n"]}]},{"cell_type":"code","source":["from sklearn.utils.class_weight import compute_class_weight\n","import pandas as pd\n","\n","# Convertir 'Diagnosis' de cadena a enteros\n","train_df['Diagnosis'] = train_df['Diagnosis'].astype(int)\n","test_df['Diagnosis'] = test_df['Diagnosis'].astype(int)\n","\n","# Verificar que la conversión fue exitosa\n","print(\"Valores únicos en 'Diagnosis' después de la conversión:\", train_df['Diagnosis'].unique())\n","\n","# Calcular los pesos de clases\n","class_weights = compute_class_weight(\n","    class_weight='balanced',\n","    classes=np.unique(train_df['Diagnosis']),\n","    y=train_df['Diagnosis']\n",")\n","class_weights = dict(enumerate(class_weights))\n","\n","print(\"Class weights:\", class_weights)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j6-13qP2n_02","executionInfo":{"status":"ok","timestamp":1732041653464,"user_tz":300,"elapsed":382,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"48007613-8522-4315-ec5c-e2ef4817c6a4"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Valores únicos en 'Diagnosis' después de la conversión: [1 0]\n","Class weights: {0: 0.6320754716981132, 1: 2.392857142857143}\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-5-5d28dd34677d>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train_df['Diagnosis'] = train_df['Diagnosis'].astype(int)\n","<ipython-input-5-5d28dd34677d>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_df['Diagnosis'] = test_df['Diagnosis'].astype(int)\n"]}]},{"cell_type":"code","source":["input_tensor = Input(shape=(299, 299, 3))\n","base_model = InceptionV3(input_tensor=input_tensor, weights='imagenet', include_top=False, pooling='avg')\n","\n","x = base_model.output\n","x = Dense(2048, activation='relu')(x)\n","predictions = Dense(1, activation='sigmoid')(x)\n","model = Model(inputs=base_model.input, outputs=predictions)\n","\n","for layer in base_model.layers:\n","    layer.trainable = False\n","\n","model.compile(optimizer=Adam(learning_rate=0.01), loss='binary_crossentropy')\n","\n","checkpoint = ModelCheckpoint('best_model_warmup.keras', monitor='val_loss', save_best_only=True, mode='min', verbose=1)\n","early_stop = EarlyStopping(monitor='val_loss', patience=25, restore_best_weights=True, mode='min')\n","\n","print(\"Inicio de Warm-Up Training...\\n\")\n","warmup_history = model.fit(\n","    train_data,\n","    validation_data=valid_data,\n","    epochs=50,\n","    callbacks=[checkpoint, early_stop],\n","    class_weight=class_weights\n",")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RNcbG_WLm8Ma","executionInfo":{"status":"ok","timestamp":1732042251106,"user_tz":300,"elapsed":595856,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"d74ac084-365c-45dc-ed6b-68cd9bec4bb9"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/inception_v3/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n","\u001b[1m87910968/87910968\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 0us/step\n","Inicio de Warm-Up Training...\n","\n","Epoch 1/50\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:122: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 859ms/step - loss: 13.4792\n","Epoch 1: val_loss improved from inf to 0.95883, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m56s\u001b[0m 2s/step - loss: 13.3033 - val_loss: 0.9588\n","Epoch 2/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 362ms/step - loss: 1.7825\n","Epoch 2: val_loss did not improve from 0.95883\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 399ms/step - loss: 1.7546 - val_loss: 1.1523\n","Epoch 3/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 282ms/step - loss: 0.7514\n","Epoch 3: val_loss improved from 0.95883 to 0.41896, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 396ms/step - loss: 0.7488 - val_loss: 0.4190\n","Epoch 4/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 283ms/step - loss: 0.6765\n","Epoch 4: val_loss did not improve from 0.41896\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 316ms/step - loss: 0.6875 - val_loss: 0.5208\n","Epoch 5/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 387ms/step - loss: 0.6309\n","Epoch 5: val_loss did not improve from 0.41896\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 421ms/step - loss: 0.6309 - val_loss: 0.5884\n","Epoch 6/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 275ms/step - loss: 0.5712\n","Epoch 6: val_loss did not improve from 0.41896\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 355ms/step - loss: 0.5714 - val_loss: 0.6860\n","Epoch 7/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 280ms/step - loss: 0.5338\n","Epoch 7: val_loss did not improve from 0.41896\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 313ms/step - loss: 0.5332 - val_loss: 0.5195\n","Epoch 8/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 282ms/step - loss: 0.5853\n","Epoch 8: val_loss did not improve from 0.41896\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 317ms/step - loss: 0.5882 - val_loss: 0.5489\n","Epoch 9/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 377ms/step - loss: 0.5029\n","Epoch 9: val_loss did not improve from 0.41896\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 410ms/step - loss: 0.5042 - val_loss: 2.2807\n","Epoch 10/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 280ms/step - loss: 0.9188\n","Epoch 10: val_loss did not improve from 0.41896\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 313ms/step - loss: 0.9104 - val_loss: 0.5720\n","Epoch 11/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 270ms/step - loss: 0.4809\n","Epoch 11: val_loss did not improve from 0.41896\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 304ms/step - loss: 0.4830 - val_loss: 0.5580\n","Epoch 12/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 339ms/step - loss: 0.4854\n","Epoch 12: val_loss did not improve from 0.41896\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 373ms/step - loss: 0.4852 - val_loss: 0.7472\n","Epoch 13/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 281ms/step - loss: 0.4393\n","Epoch 13: val_loss did not improve from 0.41896\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 361ms/step - loss: 0.4405 - val_loss: 0.5724\n","Epoch 14/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 270ms/step - loss: 0.4376\n","Epoch 14: val_loss did not improve from 0.41896\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 304ms/step - loss: 0.4416 - val_loss: 0.5960\n","Epoch 15/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 273ms/step - loss: 0.5287\n","Epoch 15: val_loss did not improve from 0.41896\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 305ms/step - loss: 0.5301 - val_loss: 0.4337\n","Epoch 16/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 378ms/step - loss: 0.5873\n","Epoch 16: val_loss did not improve from 0.41896\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 410ms/step - loss: 0.5831 - val_loss: 0.5808\n","Epoch 17/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 283ms/step - loss: 0.5101\n","Epoch 17: val_loss did not improve from 0.41896\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 323ms/step - loss: 0.5066 - val_loss: 0.6665\n","Epoch 18/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 285ms/step - loss: 0.4256\n","Epoch 18: val_loss did not improve from 0.41896\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 318ms/step - loss: 0.4261 - val_loss: 0.4294\n","Epoch 19/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 274ms/step - loss: 0.4089\n","Epoch 19: val_loss did not improve from 0.41896\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 306ms/step - loss: 0.4113 - val_loss: 0.5696\n","Epoch 20/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 377ms/step - loss: 0.4702\n","Epoch 20: val_loss did not improve from 0.41896\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 412ms/step - loss: 0.4666 - val_loss: 0.4674\n","Epoch 21/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 276ms/step - loss: 0.4760\n","Epoch 21: val_loss improved from 0.41896 to 0.38466, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 396ms/step - loss: 0.4769 - val_loss: 0.3847\n","Epoch 22/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 285ms/step - loss: 0.8178\n","Epoch 22: val_loss did not improve from 0.38466\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 325ms/step - loss: 0.8078 - val_loss: 1.2543\n","Epoch 23/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 318ms/step - loss: 0.5328\n","Epoch 23: val_loss did not improve from 0.38466\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 350ms/step - loss: 0.5295 - val_loss: 0.5359\n","Epoch 24/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 331ms/step - loss: 0.3866\n","Epoch 24: val_loss did not improve from 0.38466\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 412ms/step - loss: 0.3885 - val_loss: 0.4078\n","Epoch 25/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 274ms/step - loss: 0.6133\n","Epoch 25: val_loss did not improve from 0.38466\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 307ms/step - loss: 0.6130 - val_loss: 1.2983\n","Epoch 26/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - loss: 0.5775\n","Epoch 26: val_loss did not improve from 0.38466\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 359ms/step - loss: 0.5739 - val_loss: 0.7204\n","Epoch 27/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 323ms/step - loss: 0.4049\n","Epoch 27: val_loss did not improve from 0.38466\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 403ms/step - loss: 0.4046 - val_loss: 0.7994\n","Epoch 28/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 271ms/step - loss: 0.3937\n","Epoch 28: val_loss did not improve from 0.38466\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 304ms/step - loss: 0.3962 - val_loss: 0.5818\n","Epoch 29/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 284ms/step - loss: 0.3344\n","Epoch 29: val_loss did not improve from 0.38466\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 316ms/step - loss: 0.3407 - val_loss: 0.9070\n","Epoch 30/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 365ms/step - loss: 0.3793\n","Epoch 30: val_loss did not improve from 0.38466\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 407ms/step - loss: 0.3788 - val_loss: 0.6740\n","Epoch 31/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 276ms/step - loss: 0.3413\n","Epoch 31: val_loss did not improve from 0.38466\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 310ms/step - loss: 0.3409 - val_loss: 1.0441\n","Epoch 32/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 310ms/step - loss: 0.4768\n","Epoch 32: val_loss improved from 0.38466 to 0.37213, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 414ms/step - loss: 0.4842 - val_loss: 0.3721\n","Epoch 33/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 275ms/step - loss: 0.4000\n","Epoch 33: val_loss did not improve from 0.37213\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 355ms/step - loss: 0.3962 - val_loss: 0.5867\n","Epoch 34/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 286ms/step - loss: 0.3841\n","Epoch 34: val_loss did not improve from 0.37213\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 321ms/step - loss: 0.3823 - val_loss: 0.6313\n","Epoch 35/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 334ms/step - loss: 0.2795\n","Epoch 35: val_loss did not improve from 0.37213\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 369ms/step - loss: 0.2813 - val_loss: 0.3787\n","Epoch 36/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 329ms/step - loss: 0.3724\n","Epoch 36: val_loss did not improve from 0.37213\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 370ms/step - loss: 0.3749 - val_loss: 1.0898\n","Epoch 37/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 273ms/step - loss: 0.3775\n","Epoch 37: val_loss did not improve from 0.37213\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 307ms/step - loss: 0.3764 - val_loss: 0.6356\n","Epoch 38/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 320ms/step - loss: 0.3051\n","Epoch 38: val_loss did not improve from 0.37213\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 355ms/step - loss: 0.3059 - val_loss: 0.4351\n","Epoch 39/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 311ms/step - loss: 0.3085\n","Epoch 39: val_loss did not improve from 0.37213\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 391ms/step - loss: 0.3108 - val_loss: 0.6382\n","Epoch 40/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 268ms/step - loss: 0.2853\n","Epoch 40: val_loss did not improve from 0.37213\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 302ms/step - loss: 0.2906 - val_loss: 0.4162\n","Epoch 41/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 333ms/step - loss: 0.3281\n","Epoch 41: val_loss did not improve from 0.37213\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 368ms/step - loss: 0.3308 - val_loss: 0.7472\n","Epoch 42/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 320ms/step - loss: 0.3253\n","Epoch 42: val_loss did not improve from 0.37213\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 366ms/step - loss: 0.3261 - val_loss: 0.4193\n","Epoch 43/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 279ms/step - loss: 0.2664\n","Epoch 43: val_loss did not improve from 0.37213\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 312ms/step - loss: 0.2684 - val_loss: 0.7870\n","Epoch 44/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 290ms/step - loss: 0.2538\n","Epoch 44: val_loss did not improve from 0.37213\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 330ms/step - loss: 0.2552 - val_loss: 0.6071\n","Epoch 45/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 357ms/step - loss: 0.2735\n","Epoch 45: val_loss did not improve from 0.37213\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 395ms/step - loss: 0.2748 - val_loss: 0.4922\n","Epoch 46/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 276ms/step - loss: 0.3037\n","Epoch 46: val_loss did not improve from 0.37213\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 310ms/step - loss: 0.3085 - val_loss: 1.4795\n","Epoch 47/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 313ms/step - loss: 0.5383\n","Epoch 47: val_loss did not improve from 0.37213\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 347ms/step - loss: 0.5331 - val_loss: 0.7565\n","Epoch 48/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 330ms/step - loss: 0.3237\n","Epoch 48: val_loss did not improve from 0.37213\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 372ms/step - loss: 0.3257 - val_loss: 1.0067\n","Epoch 49/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 279ms/step - loss: 0.3498\n","Epoch 49: val_loss did not improve from 0.37213\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 312ms/step - loss: 0.3483 - val_loss: 0.8307\n","Epoch 50/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 273ms/step - loss: 0.2604\n","Epoch 50: val_loss did not improve from 0.37213\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 306ms/step - loss: 0.2616 - val_loss: 0.5643\n"]}]},{"cell_type":"code","source":["from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n","\n","model.load_weights(\"best_model_warmup.keras\")\n","\n","for layer in base_model.layers:\n","    layer.trainable = True\n","\n","model.compile(optimizer=Adam(learning_rate=0.00001), loss='binary_crossentropy')\n","\n","checkpoint_finetune_path = \"best_model_finetune.keras\"\n","checkpoint_finetune = ModelCheckpoint(\n","    checkpoint_finetune_path,\n","    save_best_only=True,\n","    monitor=\"val_loss\",\n","    mode='min',\n","    verbose=1\n",")\n","early_stopping = EarlyStopping(\n","    monitor='val_loss',\n","    patience=50,\n","    restore_best_weights=True,\n","    mode='min'\n",")\n","\n","print(\"Inicio de Fine-Tuning Training...\\n\")\n","history_finetune = model.fit(\n","    train_data,\n","    validation_data=valid_data,\n","    epochs=200,\n","    callbacks=[checkpoint_finetune, early_stopping],\n","    class_weight=class_weights\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kEOK8le1nAVq","executionInfo":{"status":"ok","timestamp":1732044126552,"user_tz":300,"elapsed":1045723,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"dc47d636-cc6a-4100-8c85-79b56ff28af9"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Inicio de Fine-Tuning Training...\n","\n","Epoch 1/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3s/step - loss: 1.8597\n","Epoch 1: val_loss improved from inf to 0.38985, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m156s\u001b[0m 4s/step - loss: 1.8654 - val_loss: 0.3899\n","Epoch 2/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 390ms/step - loss: 1.6155\n","Epoch 2: val_loss did not improve from 0.38985\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 424ms/step - loss: 1.6155 - val_loss: 0.3940\n","Epoch 3/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 441ms/step - loss: 1.5454\n","Epoch 3: val_loss did not improve from 0.38985\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 475ms/step - loss: 1.5372 - val_loss: 0.3909\n","Epoch 4/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 387ms/step - loss: 1.1436\n","Epoch 4: val_loss improved from 0.38985 to 0.37679, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 592ms/step - loss: 1.1426 - val_loss: 0.3768\n","Epoch 5/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 393ms/step - loss: 1.0451\n","Epoch 5: val_loss improved from 0.37679 to 0.37380, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 603ms/step - loss: 1.0419 - val_loss: 0.3738\n","Epoch 6/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 388ms/step - loss: 0.9436\n","Epoch 6: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 420ms/step - loss: 0.9393 - val_loss: 0.4228\n","Epoch 7/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 462ms/step - loss: 0.7631\n","Epoch 7: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 496ms/step - loss: 0.7639 - val_loss: 0.4735\n","Epoch 8/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 385ms/step - loss: 0.5120\n","Epoch 8: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 466ms/step - loss: 0.5175 - val_loss: 0.5207\n","Epoch 9/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 398ms/step - loss: 0.5442\n","Epoch 9: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 432ms/step - loss: 0.5431 - val_loss: 0.5819\n","Epoch 10/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 413ms/step - loss: 0.4181\n","Epoch 10: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 494ms/step - loss: 0.4256 - val_loss: 0.5978\n","Epoch 11/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 387ms/step - loss: 0.4469\n","Epoch 11: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 427ms/step - loss: 0.4475 - val_loss: 0.6825\n","Epoch 12/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 443ms/step - loss: 0.4475\n","Epoch 12: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 476ms/step - loss: 0.4454 - val_loss: 0.6515\n","Epoch 13/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 392ms/step - loss: 0.3603\n","Epoch 13: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 473ms/step - loss: 0.3605 - val_loss: 0.6460\n","Epoch 14/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 381ms/step - loss: 0.3574\n","Epoch 14: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 422ms/step - loss: 0.3581 - val_loss: 0.6656\n","Epoch 15/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 481ms/step - loss: 0.3564\n","Epoch 15: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 515ms/step - loss: 0.3551 - val_loss: 0.6311\n","Epoch 16/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 467ms/step - loss: 0.3372\n","Epoch 16: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 499ms/step - loss: 0.3382 - val_loss: 0.6119\n","Epoch 17/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 391ms/step - loss: 0.2776\n","Epoch 17: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 431ms/step - loss: 0.2806 - val_loss: 0.6041\n","Epoch 18/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 389ms/step - loss: 0.2934\n","Epoch 18: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 425ms/step - loss: 0.2959 - val_loss: 0.5781\n","Epoch 19/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 390ms/step - loss: 0.3104\n","Epoch 19: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 423ms/step - loss: 0.3106 - val_loss: 0.5564\n","Epoch 20/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 573ms/step - loss: 0.2517\n","Epoch 20: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 608ms/step - loss: 0.2522 - val_loss: 0.5496\n","Epoch 21/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 451ms/step - loss: 0.2125\n","Epoch 21: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 486ms/step - loss: 0.2149 - val_loss: 0.5473\n","Epoch 22/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 390ms/step - loss: 0.2547\n","Epoch 22: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 430ms/step - loss: 0.2537 - val_loss: 0.5371\n","Epoch 23/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 398ms/step - loss: 0.2327\n","Epoch 23: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 433ms/step - loss: 0.2330 - val_loss: 0.5385\n","Epoch 24/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 394ms/step - loss: 0.2211\n","Epoch 24: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 438ms/step - loss: 0.2212 - val_loss: 0.5447\n","Epoch 25/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 382ms/step - loss: 0.1916\n","Epoch 25: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 418ms/step - loss: 0.1917 - val_loss: 0.5789\n","Epoch 26/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 452ms/step - loss: 0.3382\n","Epoch 26: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 485ms/step - loss: 0.3346 - val_loss: 0.5884\n","Epoch 27/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 382ms/step - loss: 0.2325\n","Epoch 27: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 416ms/step - loss: 0.2334 - val_loss: 0.5607\n","Epoch 28/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 421ms/step - loss: 0.1980\n","Epoch 28: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 455ms/step - loss: 0.1978 - val_loss: 0.5750\n","Epoch 29/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 479ms/step - loss: 0.1845\n","Epoch 29: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 513ms/step - loss: 0.1844 - val_loss: 0.5648\n","Epoch 30/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 430ms/step - loss: 0.2294\n","Epoch 30: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 465ms/step - loss: 0.2274 - val_loss: 0.5589\n","Epoch 31/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 380ms/step - loss: 0.1331\n","Epoch 31: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 423ms/step - loss: 0.1338 - val_loss: 0.5676\n","Epoch 32/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 385ms/step - loss: 0.1545\n","Epoch 32: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 418ms/step - loss: 0.1556 - val_loss: 0.5701\n","Epoch 33/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 436ms/step - loss: 0.1466\n","Epoch 33: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 470ms/step - loss: 0.1466 - val_loss: 0.6032\n","Epoch 34/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 381ms/step - loss: 0.1486\n","Epoch 34: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 427ms/step - loss: 0.1495 - val_loss: 0.5881\n","Epoch 35/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 380ms/step - loss: 0.2148\n","Epoch 35: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 414ms/step - loss: 0.2120 - val_loss: 0.5747\n","Epoch 36/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 476ms/step - loss: 0.1833\n","Epoch 36: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 510ms/step - loss: 0.1826 - val_loss: 0.5663\n","Epoch 37/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 393ms/step - loss: 0.1250\n","Epoch 37: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 437ms/step - loss: 0.1247 - val_loss: 0.5599\n","Epoch 38/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 406ms/step - loss: 0.1519\n","Epoch 38: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 441ms/step - loss: 0.1528 - val_loss: 0.5667\n","Epoch 39/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 492ms/step - loss: 0.1426\n","Epoch 39: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 572ms/step - loss: 0.1422 - val_loss: 0.5506\n","Epoch 40/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 479ms/step - loss: 0.1070\n","Epoch 40: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 513ms/step - loss: 0.1081 - val_loss: 0.5350\n","Epoch 41/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 388ms/step - loss: 0.1098\n","Epoch 41: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 421ms/step - loss: 0.1100 - val_loss: 0.5495\n","Epoch 42/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 401ms/step - loss: 0.1320\n","Epoch 42: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 435ms/step - loss: 0.1306 - val_loss: 0.5135\n","Epoch 43/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 411ms/step - loss: 0.1341\n","Epoch 43: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 453ms/step - loss: 0.1331 - val_loss: 0.5184\n","Epoch 44/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 391ms/step - loss: 0.1087\n","Epoch 44: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 431ms/step - loss: 0.1083 - val_loss: 0.5282\n","Epoch 45/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 383ms/step - loss: 0.0652\n","Epoch 45: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 417ms/step - loss: 0.0657 - val_loss: 0.5300\n","Epoch 46/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 485ms/step - loss: 0.1193\n","Epoch 46: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 520ms/step - loss: 0.1194 - val_loss: 0.5348\n","Epoch 47/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 401ms/step - loss: 0.1039\n","Epoch 47: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 482ms/step - loss: 0.1041 - val_loss: 0.5551\n","Epoch 48/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 383ms/step - loss: 0.0943\n","Epoch 48: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 415ms/step - loss: 0.0940 - val_loss: 0.5861\n","Epoch 49/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 443ms/step - loss: 0.0941\n","Epoch 49: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 478ms/step - loss: 0.0948 - val_loss: 0.5825\n","Epoch 50/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 385ms/step - loss: 0.0863\n","Epoch 50: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 424ms/step - loss: 0.0864 - val_loss: 0.5664\n","Epoch 51/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 380ms/step - loss: 0.0808\n","Epoch 51: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 414ms/step - loss: 0.0809 - val_loss: 0.6268\n","Epoch 52/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 464ms/step - loss: 0.0937\n","Epoch 52: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 498ms/step - loss: 0.0933 - val_loss: 0.6293\n","Epoch 53/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 425ms/step - loss: 0.0751\n","Epoch 53: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 459ms/step - loss: 0.0749 - val_loss: 0.6239\n","Epoch 54/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 381ms/step - loss: 0.1129\n","Epoch 54: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 416ms/step - loss: 0.1123 - val_loss: 0.6109\n","Epoch 55/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 478ms/step - loss: 0.0620\n","Epoch 55: val_loss did not improve from 0.37380\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 513ms/step - loss: 0.0626 - val_loss: 0.5557\n"]}]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.metrics import precision_score, recall_score, f1_score, classification_report, roc_auc_score\n","import matplotlib.pyplot as plt\n","\n","predictions_test = model.predict(test_data)\n","y_test = test_data.classes\n","\n","thresholds = np.arange(0.1, 1.0, 0.1)\n","best_threshold = 0.5\n","best_f1 = 0\n","\n","for threshold in thresholds:\n","    predicted_classes_test = (predictions_test >= threshold).astype(int)\n","    f1 = f1_score(y_test, predicted_classes_test)\n","    precision = precision_score(y_test, predicted_classes_test)\n","    recall = recall_score(y_test, predicted_classes_test)\n","\n","    print(f'Threshold: {threshold:.2f}')\n","    print(f'Precision: {precision:.4f}, Recall: {recall:.4f}, F1 Score: {f1:.4f}\\n')\n","\n","    if f1 > best_f1:\n","        best_f1 = f1\n","        best_threshold = threshold\n","\n","print(f'Mejor threshold: {best_threshold} con F1 Score: {best_f1}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wNZ1lJZTVVwt","executionInfo":{"status":"ok","timestamp":1732044678773,"user_tz":300,"elapsed":21319,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"1f9f72e5-9e1e-4eb4-e7ad-2130d5a578c8"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 3s/step\n","Threshold: 0.10\n","Precision: 0.1957, Recall: 0.5294, F1 Score: 0.2857\n","\n","Threshold: 0.20\n","Precision: 0.2000, Recall: 0.4118, F1 Score: 0.2692\n","\n","Threshold: 0.30\n","Precision: 0.2069, Recall: 0.3529, F1 Score: 0.2609\n","\n","Threshold: 0.40\n","Precision: 0.2778, Recall: 0.2941, F1 Score: 0.2857\n","\n","Threshold: 0.50\n","Precision: 0.3571, Recall: 0.2941, F1 Score: 0.3226\n","\n","Threshold: 0.60\n","Precision: 0.6667, Recall: 0.2353, F1 Score: 0.3478\n","\n","Threshold: 0.70\n","Precision: 0.5000, Recall: 0.0588, F1 Score: 0.1053\n","\n","Threshold: 0.80\n","Precision: 0.0000, Recall: 0.0000, F1 Score: 0.0000\n","\n","Threshold: 0.90\n","Precision: 0.0000, Recall: 0.0000, F1 Score: 0.0000\n","\n","Mejor threshold: 0.6 con F1 Score: 0.34782608695652173\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]}]},{"cell_type":"code","source":["precisions = []\n","recalls = []\n","f1_scores = []\n","\n","for threshold in thresholds:\n","    predicted_classes_test = (predictions_test >= threshold).astype(int)\n","    precisions.append(precision_score(y_test, predicted_classes_test))\n","    recalls.append(recall_score(y_test, predicted_classes_test))\n","    f1_scores.append(f1_score(y_test, predicted_classes_test))\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(thresholds, precisions, label='Precision')\n","plt.plot(thresholds, recalls, label='Recall')\n","plt.plot(thresholds, f1_scores, label='F1 Score')\n","plt.xlabel('Threshold')\n","plt.ylabel('Metric Value')\n","plt.title('Metrics vs. Threshold')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":653},"id":"BpxojWIAVVtb","executionInfo":{"status":"ok","timestamp":1732044691726,"user_tz":300,"elapsed":568,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"b33f07f9-a029-48ca-8eb8-c2c5afda132f"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["predicted_classes_test = (predictions_test >= best_threshold).astype(int)\n","\n","# Imprimir el reporte de clasificación con el mejor threshold\n","print(\"Test set classification report with custom threshold:\")\n","print(classification_report(y_test, predicted_classes_test, target_names=['Clase 0', 'Clase 1']))\n","\n","# Calcular la precisión y el recall con el mejor threshold\n","precision = precision_score(y_test, predicted_classes_test)\n","recall = recall_score(y_test, predicted_classes_test)\n","\n","print(\"Precision (Test Set, Class 1) with custom threshold:\", precision)\n","print(\"Recall (Test Set, Class 1) with custom threshold:\", recall)\n","\n","# AUC Score no se afecta por el threshold, pero se puede recalcular para referencia\n","auc_score_test = roc_auc_score(y_test, predictions_test)\n","print(\"Test set AUC Score:\", auc_score_test)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5ZHyESxyVVm6","executionInfo":{"status":"ok","timestamp":1732044693004,"user_tz":300,"elapsed":11,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"c196616f-0fee-44ab-8de4-95ebf9c1d88d"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Test set classification report with custom threshold:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.83      0.97      0.90        67\n","     Clase 1       0.67      0.24      0.35        17\n","\n","    accuracy                           0.82        84\n","   macro avg       0.75      0.60      0.62        84\n","weighted avg       0.80      0.82      0.79        84\n","\n","Precision (Test Set, Class 1) with custom threshold: 0.6666666666666666\n","Recall (Test Set, Class 1) with custom threshold: 0.23529411764705882\n","Test set AUC Score: 0.4916593503072871\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import roc_curve, auc\n","import matplotlib.pyplot as plt\n","\n","# Calcular la curva ROC y el AUC\n","fpr, tpr, _ = roc_curve(y_test, predictions_test)\n","roc_auc = auc(fpr, tpr)\n","\n","# Graficar la curva ROC\n","plt.figure(figsize=(10, 6))\n","plt.plot(fpr, tpr, color='blue', label=f'ROC Curve (AUC = {roc_auc:.4f})')\n","plt.plot([0, 1], [0, 1], color='gray', linestyle='--')  # Línea de referencia (clasificador aleatorio)\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic (ROC) Curve')\n","plt.legend(loc='lower right')\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"id":"T-y2MzPX6KlR","executionInfo":{"status":"ok","timestamp":1732044704030,"user_tz":300,"elapsed":929,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"9555ea1e-4bad-4e9b-99fd-1eecf84e70ee","colab":{"base_uri":"https://localhost:8080/","height":564}},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#RESULTADOS ANTERIORES"],"metadata":{"id":"-6Flth0QVWHZ"}},{"cell_type":"code","source":["from sklearn.metrics import classification_report, roc_auc_score\n","import matplotlib.pyplot as plt\n","\n","predictions_test = model.predict(test_data)\n","predicted_classes_test = np.round(predictions_test).astype(int)\n","\n","y_test = test_data.classes\n","\n","print(\"Test set classification report after fine-tuning:\")\n","print(classification_report(y_test, predicted_classes_test, target_names=['Clase 0', 'Clase 1']))\n","\n","auc_score_test = roc_auc_score(y_test, predictions_test)\n","print(\"Test set AUC Score after fine-tuning:\", auc_score_test)\n","\n","predictions_train = model.predict(train_data, steps=len(train_data), verbose=1)\n","predicted_classes_train = np.round(predictions_train).astype(int)\n","\n","y_train = train_data.classes\n","\n","print(\"Train set classification report after fine-tuning:\")\n","print(classification_report(y_train, predicted_classes_train, target_names=['Clase 0', 'Clase 1']))\n","\n","auc_score_train = roc_auc_score(y_train, predictions_train)\n","print(\"Train set AUC Score after fine-tuning:\", auc_score_train)\n"],"metadata":{"id":"4-LSwrhIkB7e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731456787265,"user_tz":300,"elapsed":26211,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"5987dd4f-72fe-4e51-a0b4-e35c9a2b78df"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 3s/step\n","Test set classification report after fine-tuning:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.82      0.91      0.87        67\n","     Clase 1       0.40      0.24      0.30        17\n","\n","    accuracy                           0.77        84\n","   macro avg       0.61      0.57      0.58        84\n","weighted avg       0.74      0.77      0.75        84\n","\n","Test set AUC Score after fine-tuning: 0.6830553116769095\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 723ms/step\n","Train set classification report after fine-tuning:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.78      0.87      0.82       265\n","     Clase 1       0.11      0.06      0.07        70\n","\n","    accuracy                           0.70       335\n","   macro avg       0.44      0.46      0.45       335\n","weighted avg       0.64      0.70      0.67       335\n","\n","Train set AUC Score after fine-tuning: 0.43762803234501346\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import precision_score, recall_score\n","\n","predictions_test = model.predict(test_data)\n","predicted_classes_test = np.round(predictions_test).astype(int)\n","y_test = test_data.classes\n","\n","precision = precision_score(y_test, predicted_classes_test, average='binary', pos_label=1)\n","recall = recall_score(y_test, predicted_classes_test, average='binary', pos_label=1)\n","\n","print(\"Precision (Test Set, Class 1):\", precision)\n","print(\"Recall (Test Set, Class 1):\", recall)\n"],"metadata":{"id":"-XZD7a7bS_E-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731456795666,"user_tz":300,"elapsed":2138,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"e9f366a6-5566-47d2-94e6-528dcd2217a0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 337ms/step\n","Precision (Test Set, Class 1): 0.1\n","Recall (Test Set, Class 1): 0.058823529411764705\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"8Bs7lB383fnV"},"execution_count":null,"outputs":[]}]}