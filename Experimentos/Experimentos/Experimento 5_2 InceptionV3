{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25790,"status":"ok","timestamp":1732044787358,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"boX8ZPtfYMuE","outputId":"46e226ff-cb4b-4bdd-a6f4-0672b82740d8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6870,"status":"ok","timestamp":1732044798503,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"mQzpyzneXrW8","outputId":"500c5ab3-8e64-45a1-e5aa-fd4ad45b9ca3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train DataFrame:\n","                                             filename   id eye Diagnosis\n","2   /content/drive/My Drive/Proyecto de Grado G/Pr...  004  OD         1\n","3   /content/drive/My Drive/Proyecto de Grado G/Pr...  004  OS         1\n","4   /content/drive/My Drive/Proyecto de Grado G/Pr...  005  OD         1\n","5   /content/drive/My Drive/Proyecto de Grado G/Pr...  005  OS         1\n","14  /content/drive/My Drive/Proyecto de Grado G/Pr...  010  OD         1\n","\n","Test DataFrame:\n","                                             filename   id eye Diagnosis\n","20  /content/drive/My Drive/Proyecto de Grado G/Pr...  015  OD         1\n","21  /content/drive/My Drive/Proyecto de Grado G/Pr...  015  OS         1\n","32  /content/drive/My Drive/Proyecto de Grado G/Pr...  023  OD         1\n","33  /content/drive/My Drive/Proyecto de Grado G/Pr...  023  OS         1\n","42  /content/drive/My Drive/Proyecto de Grado G/Pr...  028  OD         0\n"]}],"source":["import pandas as pd\n","from sklearn.model_selection import StratifiedShuffleSplit\n","import numpy as np\n","import os\n","\n","# Ruta al directorio con las imágenes\n","directorio_imagenes = '/content/drive/My Drive/Proyecto de Grado G/ProcessedImages_Disc_Exp2'\n","\n","imagenes_info = []\n","for filename in os.listdir(directorio_imagenes):\n","    if filename.endswith('.jpg') or filename.endswith('.png'):\n","        base = filename.split('_')[0]\n","        id_paciente = base[3:-2]  # Extrae correctamente el ID del paciente\n","        tipo_ojo = base[-2:]\n","        full_path = os.path.join(directorio_imagenes, filename)\n","        imagenes_info.append({'filename': full_path, 'id': id_paciente, 'eye': tipo_ojo})\n","\n","imagenes_df = pd.DataFrame(imagenes_info)\n","\n","# Cargar y preparar los datos clínicos\n","data_od = pd.read_excel('/content/drive/My Drive/Proyecto de Grado G/patient_data_od.xlsx')\n","data_os = pd.read_excel('/content/drive/My Drive/Proyecto de Grado G/patient_data_os.xlsx')\n","\n","data_od['id'] = data_od['Unnamed: 0'].str.replace('#', '').astype(str)\n","data_os['id'] = data_os['Unnamed: 0'].str.replace('#', '').astype(str)\n","\n","data_od['eye'] = 'OD'\n","data_os['eye'] = 'OS'\n","\n","data_clinica = pd.concat([data_od[['id', 'eye', 'Diagnosis']], data_os[['id', 'eye', 'Diagnosis']]])\n","\n","full_df = pd.merge(imagenes_df, data_clinica, on=['id', 'eye'], how='left')\n","full_df = full_df[full_df['Diagnosis'] != 2]\n","\n","dominant_diagnosis = full_df.groupby('id')['Diagnosis'].agg(lambda x: x.mode()[0])\n","\n","\n","patient_df = pd.DataFrame(dominant_diagnosis).reset_index()\n","\n","splitter = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n","train_patients, test_patients = next(splitter.split(patient_df, patient_df['Diagnosis']))\n","\n","train_ids = patient_df.iloc[train_patients]['id']\n","test_ids = patient_df.iloc[test_patients]['id']\n","\n","train_df = full_df[full_df['id'].isin(train_ids)]\n","test_df = full_df[full_df['id'].isin(test_ids)]\n","\n","print(\"Train DataFrame:\")\n","print(train_df[['filename', 'id', 'eye', 'Diagnosis']].head())\n","\n","print(\"\\nTest DataFrame:\")\n","print(test_df[['filename', 'id', 'eye', 'Diagnosis']].head())"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3020,"status":"ok","timestamp":1732044808385,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"4YD6q2Ue5XkZ","outputId":"cb23c8e3-9bb5-47be-ec2a-da0482547371"},"outputs":[{"output_type":"stream","name":"stdout","text":["Found 335 validated image filenames belonging to 2 classes.\n","Found 84 validated image filenames belonging to 2 classes.\n","Found 84 validated image filenames belonging to 2 classes.\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-3-ff7f9d810dc6>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train_df['Diagnosis'] = train_df['Diagnosis'].astype(str)\n","<ipython-input-3-ff7f9d810dc6>:26: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_df['Diagnosis'] = test_df['Diagnosis'].astype(str)\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import os\n","from tensorflow.keras.applications.inception_v3 import InceptionV3, preprocess_input\n","from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Input\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n","from sklearn.metrics import roc_auc_score\n","from sklearn.model_selection import StratifiedShuffleSplit\n","from sklearn.utils.class_weight import compute_class_weight\n","# Preparar los generadores de datos\n","train_datagen = ImageDataGenerator(\n","    preprocessing_function=preprocess_input,\n","    rotation_range=10,\n","    brightness_range=[0.8, 1.2],\n","    validation_split=0.2\n",")\n","\n","test_datagen = ImageDataGenerator(\n","    preprocessing_function=preprocess_input,\n",")\n","\n","train_df['Diagnosis'] = train_df['Diagnosis'].astype(str)\n","test_df['Diagnosis'] = test_df['Diagnosis'].astype(str)\n","\n","train_data = train_datagen.flow_from_dataframe(\n","    dataframe=train_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=20,\n","    class_mode='binary'\n",")\n","\n","test_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode='binary'\n",")\n","\n","valid_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode='binary'\n",")\n"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1732044809582,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"j6-13qP2n_02","outputId":"5bd75ebf-5a44-4a39-89d8-f7789e64cf66"},"outputs":[{"output_type":"stream","name":"stdout","text":["Valores únicos en 'Diagnosis' después de la conversión: [1 0]\n","Class weights: {0: 0.6320754716981132, 1: 2.392857142857143}\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-4-e9acde33c7d0>:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train_df['Diagnosis'] = train_df['Diagnosis'].astype(int)\n","<ipython-input-4-e9acde33c7d0>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_df['Diagnosis'] = test_df['Diagnosis'].astype(int)\n"]}],"source":["from sklearn.utils.class_weight import compute_class_weight\n","import pandas as pd\n","\n","train_df['Diagnosis'] = train_df['Diagnosis'].astype(int)\n","test_df['Diagnosis'] = test_df['Diagnosis'].astype(int)\n","\n","print(\"Valores únicos en 'Diagnosis' después de la conversión:\", train_df['Diagnosis'].unique())\n","\n","class_weights = compute_class_weight(\n","    class_weight='balanced',\n","    classes=np.unique(train_df['Diagnosis']),\n","    y=train_df['Diagnosis']\n",")\n","class_weights = dict(enumerate(class_weights))\n","\n","print(\"Class weights:\", class_weights)\n"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RNcbG_WLm8Ma","executionInfo":{"status":"ok","timestamp":1732045600738,"user_tz":300,"elapsed":789206,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"5baf5464-ba62-409f-89e3-2d7ba89fe554"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/inception_v3/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n","\u001b[1m87910968/87910968\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 0us/step\n","Inicio de Warm-Up Training...\n","\n","Epoch 1/50\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:122: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 953ms/step - loss: 1.2798\n","Epoch 1: val_loss improved from inf to 0.43594, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m61s\u001b[0m 2s/step - loss: 1.2660 - val_loss: 0.4359\n","Epoch 2/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 305ms/step - loss: 0.7654\n","Epoch 2: val_loss did not improve from 0.43594\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 338ms/step - loss: 0.7648 - val_loss: 0.4459\n","Epoch 3/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - loss: 0.6267\n","Epoch 3: val_loss did not improve from 0.43594\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 447ms/step - loss: 0.6257 - val_loss: 0.4433\n","Epoch 4/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 303ms/step - loss: 0.4786\n","Epoch 4: val_loss did not improve from 0.43594\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 347ms/step - loss: 0.4799 - val_loss: 0.8340\n","Epoch 5/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 301ms/step - loss: 0.4798\n","Epoch 5: val_loss did not improve from 0.43594\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 334ms/step - loss: 0.4799 - val_loss: 0.9769\n","Epoch 6/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 342ms/step - loss: 0.5757\n","Epoch 6: val_loss improved from 0.43594 to 0.37845, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 448ms/step - loss: 0.5803 - val_loss: 0.3784\n","Epoch 7/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 414ms/step - loss: 0.6322\n","Epoch 7: val_loss did not improve from 0.37845\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 447ms/step - loss: 0.6290 - val_loss: 0.8004\n","Epoch 8/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 315ms/step - loss: 0.4160\n","Epoch 8: val_loss did not improve from 0.37845\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 395ms/step - loss: 0.4170 - val_loss: 1.2914\n","Epoch 9/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 312ms/step - loss: 0.4747\n","Epoch 9: val_loss did not improve from 0.37845\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 346ms/step - loss: 0.4700 - val_loss: 0.6251\n","Epoch 10/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 330ms/step - loss: 0.3042\n","Epoch 10: val_loss did not improve from 0.37845\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 364ms/step - loss: 0.3060 - val_loss: 0.9030\n","Epoch 11/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 309ms/step - loss: 0.3487\n","Epoch 11: val_loss improved from 0.37845 to 0.35276, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 448ms/step - loss: 0.3487 - val_loss: 0.3528\n","Epoch 12/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 305ms/step - loss: 0.3818\n","Epoch 12: val_loss did not improve from 0.35276\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 339ms/step - loss: 0.3828 - val_loss: 1.0658\n","Epoch 13/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 351ms/step - loss: 0.4138\n","Epoch 13: val_loss did not improve from 0.35276\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 431ms/step - loss: 0.4138 - val_loss: 0.4194\n","Epoch 14/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 309ms/step - loss: 0.3695\n","Epoch 14: val_loss did not improve from 0.35276\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 340ms/step - loss: 0.3686 - val_loss: 0.8445\n","Epoch 15/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 403ms/step - loss: 0.3411\n","Epoch 15: val_loss did not improve from 0.35276\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 437ms/step - loss: 0.3393 - val_loss: 0.4293\n","Epoch 16/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 341ms/step - loss: 0.2673\n","Epoch 16: val_loss did not improve from 0.35276\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 422ms/step - loss: 0.2679 - val_loss: 0.5461\n","Epoch 17/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 301ms/step - loss: 0.2290\n","Epoch 17: val_loss did not improve from 0.35276\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 336ms/step - loss: 0.2297 - val_loss: 0.5837\n","Epoch 18/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 390ms/step - loss: 0.2618\n","Epoch 18: val_loss did not improve from 0.35276\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 424ms/step - loss: 0.2596 - val_loss: 0.7084\n","Epoch 19/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 306ms/step - loss: 0.2014\n","Epoch 19: val_loss did not improve from 0.35276\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 339ms/step - loss: 0.2029 - val_loss: 0.3918\n","Epoch 20/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 307ms/step - loss: 0.2002\n","Epoch 20: val_loss did not improve from 0.35276\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 339ms/step - loss: 0.2015 - val_loss: 0.4520\n","Epoch 21/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 361ms/step - loss: 0.2178\n","Epoch 21: val_loss did not improve from 0.35276\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 395ms/step - loss: 0.2178 - val_loss: 0.3606\n","Epoch 22/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 395ms/step - loss: 0.2791\n","Epoch 22: val_loss did not improve from 0.35276\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 429ms/step - loss: 0.2801 - val_loss: 0.8883\n","Epoch 23/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 305ms/step - loss: 0.1880\n","Epoch 23: val_loss did not improve from 0.35276\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 339ms/step - loss: 0.1886 - val_loss: 0.4011\n","Epoch 24/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 384ms/step - loss: 0.1577\n","Epoch 24: val_loss did not improve from 0.35276\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 415ms/step - loss: 0.1574 - val_loss: 0.4424\n","Epoch 25/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 361ms/step - loss: 0.1269\n","Epoch 25: val_loss did not improve from 0.35276\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 442ms/step - loss: 0.1286 - val_loss: 0.9069\n","Epoch 26/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 307ms/step - loss: 0.1874\n","Epoch 26: val_loss did not improve from 0.35276\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 340ms/step - loss: 0.1891 - val_loss: 0.3936\n","Epoch 27/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 378ms/step - loss: 0.1784\n","Epoch 27: val_loss did not improve from 0.35276\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 422ms/step - loss: 0.1783 - val_loss: 1.1980\n","Epoch 28/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 304ms/step - loss: 0.2103\n","Epoch 28: val_loss improved from 0.35276 to 0.34993, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 409ms/step - loss: 0.2106 - val_loss: 0.3499\n","Epoch 29/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 335ms/step - loss: 0.1086\n","Epoch 29: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 369ms/step - loss: 0.1099 - val_loss: 0.5654\n","Epoch 30/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 401ms/step - loss: 0.0947\n","Epoch 30: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 432ms/step - loss: 0.0956 - val_loss: 0.7953\n","Epoch 31/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 411ms/step - loss: 0.1096\n","Epoch 31: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 444ms/step - loss: 0.1087 - val_loss: 0.5147\n","Epoch 32/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 431ms/step - loss: 0.0939\n","Epoch 32: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 464ms/step - loss: 0.0939 - val_loss: 0.5558\n","Epoch 33/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 320ms/step - loss: 0.0878\n","Epoch 33: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 400ms/step - loss: 0.0881 - val_loss: 0.6258\n","Epoch 34/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 309ms/step - loss: 0.1018\n","Epoch 34: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 340ms/step - loss: 0.1027 - val_loss: 0.4525\n","Epoch 35/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 355ms/step - loss: 0.2915\n","Epoch 35: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 385ms/step - loss: 0.2887 - val_loss: 0.5045\n","Epoch 36/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 300ms/step - loss: 0.2901\n","Epoch 36: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 340ms/step - loss: 0.2841 - val_loss: 0.5263\n","Epoch 37/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 318ms/step - loss: 0.0956\n","Epoch 37: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 352ms/step - loss: 0.0958 - val_loss: 0.5204\n","Epoch 38/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 406ms/step - loss: 0.0884\n","Epoch 38: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 437ms/step - loss: 0.0892 - val_loss: 0.6978\n","Epoch 39/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 297ms/step - loss: 0.0782\n","Epoch 39: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 337ms/step - loss: 0.0779 - val_loss: 0.4207\n","Epoch 40/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 305ms/step - loss: 0.1485\n","Epoch 40: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 338ms/step - loss: 0.1469 - val_loss: 0.7223\n","Epoch 41/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 367ms/step - loss: 0.0923\n","Epoch 41: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 402ms/step - loss: 0.0916 - val_loss: 0.5081\n","Epoch 42/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 395ms/step - loss: 0.0716\n","Epoch 42: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 432ms/step - loss: 0.0706 - val_loss: 0.5239\n","Epoch 43/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 306ms/step - loss: 0.0507\n","Epoch 43: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 340ms/step - loss: 0.0515 - val_loss: 0.4536\n","Epoch 44/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 381ms/step - loss: 0.0535\n","Epoch 44: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 414ms/step - loss: 0.0542 - val_loss: 0.5979\n","Epoch 45/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 369ms/step - loss: 0.0729\n","Epoch 45: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 411ms/step - loss: 0.0732 - val_loss: 0.6479\n","Epoch 46/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 302ms/step - loss: 0.0725\n","Epoch 46: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 335ms/step - loss: 0.0723 - val_loss: 0.5756\n","Epoch 47/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 307ms/step - loss: 0.0357\n","Epoch 47: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 340ms/step - loss: 0.0364 - val_loss: 0.8165\n","Epoch 48/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 344ms/step - loss: 0.0544\n","Epoch 48: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 391ms/step - loss: 0.0541 - val_loss: 0.6713\n","Epoch 49/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 306ms/step - loss: 0.0265\n","Epoch 49: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 339ms/step - loss: 0.0265 - val_loss: 0.6192\n","Epoch 50/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 316ms/step - loss: 0.0400\n","Epoch 50: val_loss did not improve from 0.34993\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 350ms/step - loss: 0.0406 - val_loss: 0.7764\n"]}],"source":["input_tensor = Input(shape=(299, 299, 3))\n","base_model = InceptionV3(input_tensor=input_tensor, weights='imagenet', include_top=False, pooling='avg')\n","\n","x = base_model.output\n","x = Dense(2048, activation='relu')(x)\n","predictions = Dense(1, activation='sigmoid')(x)\n","model = Model(inputs=base_model.input, outputs=predictions)\n","\n","for layer in base_model.layers:\n","    layer.trainable = False\n","\n","model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy')\n","\n","checkpoint = ModelCheckpoint('best_model_warmup.keras', monitor='val_loss', save_best_only=True, mode='min', verbose=1)\n","early_stop = EarlyStopping(monitor='val_loss', patience=25, restore_best_weights=True, mode='min')\n","\n","print(\"Inicio de Warm-Up Training...\\n\")\n","warmup_history = model.fit(\n","    train_data,\n","    validation_data=valid_data,\n","    epochs=50,\n","    callbacks=[checkpoint, early_stop],\n","    class_weight=class_weights\n",")\n"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1037227,"status":"ok","timestamp":1732046667740,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"kEOK8le1nAVq","outputId":"cc4fbaf5-5b8a-4dda-f5e3-8ca370599528"},"outputs":[{"output_type":"stream","name":"stdout","text":["Inicio de Fine-Tuning Training...\n","\n","Epoch 1/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4s/step - loss: 2.6786\n","Epoch 1: val_loss improved from inf to 0.42629, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m160s\u001b[0m 4s/step - loss: 2.6619 - val_loss: 0.4263\n","Epoch 2/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 445ms/step - loss: 2.1624\n","Epoch 2: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 478ms/step - loss: 2.1775 - val_loss: 0.4404\n","Epoch 3/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 508ms/step - loss: 2.7726\n","Epoch 3: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 544ms/step - loss: 2.7633 - val_loss: 0.4367\n","Epoch 4/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 509ms/step - loss: 2.5158\n","Epoch 4: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 544ms/step - loss: 2.5106 - val_loss: 0.4430\n","Epoch 5/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 421ms/step - loss: 2.0671\n","Epoch 5: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 502ms/step - loss: 2.0712 - val_loss: 0.4768\n","Epoch 6/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 417ms/step - loss: 1.8363\n","Epoch 6: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 457ms/step - loss: 1.8473 - val_loss: 0.5750\n","Epoch 7/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 505ms/step - loss: 2.0478\n","Epoch 7: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 536ms/step - loss: 2.0442 - val_loss: 0.6577\n","Epoch 8/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 416ms/step - loss: 1.8084\n","Epoch 8: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 463ms/step - loss: 1.8103 - val_loss: 0.6991\n","Epoch 9/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 628ms/step - loss: 1.9804\n","Epoch 9: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 660ms/step - loss: 1.9759 - val_loss: 0.8122\n","Epoch 10/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 427ms/step - loss: 2.0350\n","Epoch 10: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 508ms/step - loss: 2.0258 - val_loss: 0.8830\n","Epoch 11/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 486ms/step - loss: 1.4919\n","Epoch 11: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 521ms/step - loss: 1.4970 - val_loss: 0.8660\n","Epoch 12/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 428ms/step - loss: 1.8370\n","Epoch 12: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 472ms/step - loss: 1.8329 - val_loss: 0.8655\n","Epoch 13/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 459ms/step - loss: 1.3562\n","Epoch 13: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 493ms/step - loss: 1.3630 - val_loss: 0.8047\n","Epoch 14/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 456ms/step - loss: 1.4987\n","Epoch 14: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 538ms/step - loss: 1.5030 - val_loss: 0.7576\n","Epoch 15/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 415ms/step - loss: 1.4655\n","Epoch 15: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 495ms/step - loss: 1.4717 - val_loss: 0.7069\n","Epoch 16/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 474ms/step - loss: 1.7466\n","Epoch 16: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 514ms/step - loss: 1.7315 - val_loss: 0.6908\n","Epoch 17/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 507ms/step - loss: 1.4055\n","Epoch 17: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 541ms/step - loss: 1.4087 - val_loss: 0.6983\n","Epoch 18/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 524ms/step - loss: 1.5311\n","Epoch 18: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 564ms/step - loss: 1.5146 - val_loss: 0.6849\n","Epoch 19/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 518ms/step - loss: 1.6196\n","Epoch 19: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 552ms/step - loss: 1.5970 - val_loss: 0.7041\n","Epoch 20/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 464ms/step - loss: 1.2244\n","Epoch 20: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 498ms/step - loss: 1.2176 - val_loss: 0.7337\n","Epoch 21/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 424ms/step - loss: 1.3086\n","Epoch 21: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 459ms/step - loss: 1.3004 - val_loss: 0.7552\n","Epoch 22/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 453ms/step - loss: 1.1126\n","Epoch 22: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 486ms/step - loss: 1.1091 - val_loss: 0.7751\n","Epoch 23/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 459ms/step - loss: 1.3476\n","Epoch 23: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 496ms/step - loss: 1.3345 - val_loss: 0.7989\n","Epoch 24/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 418ms/step - loss: 0.8367\n","Epoch 24: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 452ms/step - loss: 0.8407 - val_loss: 0.7960\n","Epoch 25/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 462ms/step - loss: 1.0669\n","Epoch 25: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 496ms/step - loss: 1.0666 - val_loss: 0.7925\n","Epoch 26/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 524ms/step - loss: 0.7320\n","Epoch 26: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 558ms/step - loss: 0.7443 - val_loss: 0.7854\n","Epoch 27/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 566ms/step - loss: 0.8448\n","Epoch 27: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 601ms/step - loss: 0.8453 - val_loss: 0.7737\n","Epoch 28/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 413ms/step - loss: 0.7264\n","Epoch 28: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 447ms/step - loss: 0.7323 - val_loss: 0.7587\n","Epoch 29/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 441ms/step - loss: 0.7219\n","Epoch 29: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 477ms/step - loss: 0.7254 - val_loss: 0.7663\n","Epoch 30/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 469ms/step - loss: 0.9402\n","Epoch 30: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 503ms/step - loss: 0.9343 - val_loss: 0.7699\n","Epoch 31/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 416ms/step - loss: 0.9478\n","Epoch 31: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 451ms/step - loss: 0.9456 - val_loss: 0.7700\n","Epoch 32/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 492ms/step - loss: 0.8146\n","Epoch 32: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 527ms/step - loss: 0.8153 - val_loss: 0.7679\n","Epoch 33/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 422ms/step - loss: 0.7053\n","Epoch 33: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 454ms/step - loss: 0.7121 - val_loss: 0.7610\n","Epoch 34/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 516ms/step - loss: 0.6132\n","Epoch 34: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 550ms/step - loss: 0.6073 - val_loss: 0.7762\n","Epoch 35/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 422ms/step - loss: 0.8197\n","Epoch 35: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 457ms/step - loss: 0.8128 - val_loss: 0.7878\n","Epoch 36/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 413ms/step - loss: 0.8396\n","Epoch 36: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 448ms/step - loss: 0.8329 - val_loss: 0.7893\n","Epoch 37/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 521ms/step - loss: 0.6317\n","Epoch 37: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 555ms/step - loss: 0.6361 - val_loss: 0.8000\n","Epoch 38/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 502ms/step - loss: 0.9788\n","Epoch 38: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 537ms/step - loss: 0.9650 - val_loss: 0.8026\n","Epoch 39/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 422ms/step - loss: 0.7228\n","Epoch 39: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 457ms/step - loss: 0.7201 - val_loss: 0.8162\n","Epoch 40/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 503ms/step - loss: 0.6852\n","Epoch 40: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 543ms/step - loss: 0.6813 - val_loss: 0.8122\n","Epoch 41/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 413ms/step - loss: 0.6105\n","Epoch 41: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 446ms/step - loss: 0.6160 - val_loss: 0.8149\n","Epoch 42/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 428ms/step - loss: 0.5313\n","Epoch 42: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 462ms/step - loss: 0.5318 - val_loss: 0.8204\n","Epoch 43/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 516ms/step - loss: 0.8653\n","Epoch 43: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 550ms/step - loss: 0.8569 - val_loss: 0.8229\n","Epoch 44/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 479ms/step - loss: 0.5175\n","Epoch 44: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 511ms/step - loss: 0.5198 - val_loss: 0.8270\n","Epoch 45/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 414ms/step - loss: 0.4237\n","Epoch 45: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 447ms/step - loss: 0.4286 - val_loss: 0.8315\n","Epoch 46/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 440ms/step - loss: 0.6005\n","Epoch 46: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 474ms/step - loss: 0.5995 - val_loss: 0.8335\n","Epoch 47/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 493ms/step - loss: 0.5831\n","Epoch 47: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 529ms/step - loss: 0.5801 - val_loss: 0.8444\n","Epoch 48/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 515ms/step - loss: 0.4966\n","Epoch 48: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 550ms/step - loss: 0.5007 - val_loss: 0.8362\n","Epoch 49/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 507ms/step - loss: 0.5870\n","Epoch 49: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 542ms/step - loss: 0.5812 - val_loss: 0.8240\n","Epoch 50/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 459ms/step - loss: 0.4744\n","Epoch 50: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 492ms/step - loss: 0.4750 - val_loss: 0.8358\n","Epoch 51/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 427ms/step - loss: 0.5752\n","Epoch 51: val_loss did not improve from 0.42629\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 508ms/step - loss: 0.5728 - val_loss: 0.8488\n"]}],"source":["from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n","\n","model.load_weights(\"best_model_warmup.keras\")\n","\n","for layer in base_model.layers:\n","    layer.trainable = True\n","\n","model.compile(optimizer=Adam(learning_rate=0.000001), loss='binary_crossentropy')\n","\n","checkpoint_finetune_path = \"best_model_finetune.keras\"\n","checkpoint_finetune = ModelCheckpoint(\n","    checkpoint_finetune_path,\n","    save_best_only=True,\n","    monitor=\"val_loss\",\n","    mode='min',\n","    verbose=1\n",")\n","early_stopping = EarlyStopping(\n","    monitor='val_loss',\n","    patience=50,\n","    restore_best_weights=True,\n","    mode='min'\n",")\n","\n","print(\"Inicio de Fine-Tuning Training...\\n\")\n","history_finetune = model.fit(\n","    train_data,\n","    validation_data=valid_data,\n","    epochs=200,\n","    callbacks=[checkpoint_finetune, early_stopping],\n","    class_weight=class_weights\n",")"]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.metrics import precision_score, recall_score, f1_score, classification_report, roc_auc_score\n","import matplotlib.pyplot as plt\n","\n","predictions_test = model.predict(test_data)\n","y_test = test_data.classes\n","\n","thresholds = np.arange(0.1, 1.0, 0.1)\n","best_threshold = 0.5\n","best_f1 = 0\n","\n","for threshold in thresholds:\n","    predicted_classes_test = (predictions_test >= threshold).astype(int)\n","    f1 = f1_score(y_test, predicted_classes_test)\n","    precision = precision_score(y_test, predicted_classes_test)\n","    recall = recall_score(y_test, predicted_classes_test)\n","\n","    print(f'Threshold: {threshold:.2f}')\n","    print(f'Precision: {precision:.4f}, Recall: {recall:.4f}, F1 Score: {f1:.4f}\\n')\n","\n","    if f1 > best_f1:\n","        best_f1 = f1\n","        best_threshold = threshold\n","\n","print(f'Mejor threshold: {best_threshold} con F1 Score: {best_f1}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ikRErs2clVQj","executionInfo":{"status":"ok","timestamp":1732046683306,"user_tz":300,"elapsed":12996,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"48903120-c193-4df7-f7ca-17a0d5f35a66"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 3s/step\n","Threshold: 0.10\n","Precision: 0.2128, Recall: 0.5882, F1 Score: 0.3125\n","\n","Threshold: 0.20\n","Precision: 0.2000, Recall: 0.4118, F1 Score: 0.2692\n","\n","Threshold: 0.30\n","Precision: 0.2222, Recall: 0.3529, F1 Score: 0.2727\n","\n","Threshold: 0.40\n","Precision: 0.2000, Recall: 0.2353, F1 Score: 0.2162\n","\n","Threshold: 0.50\n","Precision: 0.1667, Recall: 0.1765, F1 Score: 0.1714\n","\n","Threshold: 0.60\n","Precision: 0.1333, Recall: 0.1176, F1 Score: 0.1250\n","\n","Threshold: 0.70\n","Precision: 0.1667, Recall: 0.1176, F1 Score: 0.1379\n","\n","Threshold: 0.80\n","Precision: 0.1818, Recall: 0.1176, F1 Score: 0.1429\n","\n","Threshold: 0.90\n","Precision: 0.2222, Recall: 0.1176, F1 Score: 0.1538\n","\n","Mejor threshold: 0.1 con F1 Score: 0.3125\n"]}]},{"cell_type":"code","source":["precisions = []\n","recalls = []\n","f1_scores = []\n","\n","for threshold in thresholds:\n","    predicted_classes_test = (predictions_test >= threshold).astype(int)\n","    precisions.append(precision_score(y_test, predicted_classes_test))\n","    recalls.append(recall_score(y_test, predicted_classes_test))\n","    f1_scores.append(f1_score(y_test, predicted_classes_test))\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(thresholds, precisions, label='Precision')\n","plt.plot(thresholds, recalls, label='Recall')\n","plt.plot(thresholds, f1_scores, label='F1 Score')\n","plt.xlabel('Threshold')\n","plt.ylabel('Metric Value')\n","plt.title('Metrics vs. Threshold')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"lGp_0nuvlVJp","executionInfo":{"status":"ok","timestamp":1732046689905,"user_tz":300,"elapsed":546,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"58016321-9f50-44e8-ae04-0fa502c9b8de"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"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ef3KlSvpelNq1KgBkOb8x44dSx1amF107dqVP//8k6VLl6Z7LTIyMrXdLl26lOY1s9lMtWrVADI9JLFZs2a4uLjw7bffpmm3n376iatXr9K2bdubvrdNmzYkJyczduzY1H0pKSl89913mcogIpKTqMdJRCSHuZMpnxs2bMhzzz3HRx99xM6dO2nRogXOzs4cOXKEWbNm8c0336Q+HxUSEsLYsWMZMWIEZcqUwd/fnyZNmmQqk4+PD1999RXPPPMMderUoUePHvj6+rJr1y5iY2OZPHkyq1atYsCAAXTp0oVy5cqRnJzMlClTsFgsPPbYY7e9Rq1atShTpgyDBw8mISEhzTA9gMmTJzNmzBg6depE6dKliY6OZvz48fj4+NCmTZvU45o2bQqQbg0qI73xxhvMnz+fdu3aERoaSkhICDExMezZs4fZs2dz4sQJ/Pz8eOaZZ7h8+TJNmjShePHihIWF8d1331GjRg0qVqyYqWsWKlSIQYMGMWzYMFq1asWjjz7KoUOHGDNmDHXq1LnlYr/t27fnoYce4u233+bEiRNUqlSJOXPm3NHzaiIiOZUKJxGRXGrcuHGEhITw/fff88477+Dk5ESJEiXo2bMnDz30UOpxQ4YMISwsjE8//ZTo6GgaNmyY6cIJ4Omnn8bf35+PP/6YDz74AGdnZypUqMCrr74KQPXq1WnZsiULFizg1KlTeHh4UL16df74448Mh9xlpFu3bowcOZIyZcpQq1atNK81bNiQv/76ixkzZnDu3Dny5cvHAw88wLRp0+5oggsjeXh4sHbtWj788ENmzZrFzz//jI+PD+XKlWPYsGGpMxL27NmTH374gTFjxhAZGUlAQADdunVj6NChaWbGu1NDhw6lUKFCjBo1ildffZUCBQrw7LPP8uGHH950DSew93TNnz+fV155halTp2IymXj00Uf54osvqFmz5l23g4hIdmay6SlRERERERGRW9IzTiIiIiIiIrehwklEREREROQ2VDiJiIiIiIjchgonERERERGR21DhJCIiIiIichsqnERERERERG4jz63jZLVaOX36NN7e3phMJqPjiIiIiIiIQWw2G9HR0RQtWvS26+HlucLp9OnTBAYGGh1DRERERESyiYiICIoXL37LY/Jc4eTt7Q3YG8fHx8fgNJCUlMSyZcto0aLFLVdpl7uj9nUsta9jqX0d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iNRBwcnOXFxcmD59+kVP0iu/nvprW+qvbam/tqX+2pb6a1vqr22pv7bVVPt7zS0OISIiIiIiUl8acRIREREREamDgpOIiIiIiEgdFJxERERERETqoOAkIiIiIiJSBwUnG3vzzTdp06YNrq6u9OnThw0bNvziY1NTU7nrrrto06YNJpOJ2bNnN1yhTVh9evzee+9x88034+vri6+vL0OHDr3k46V+/V2yZAm9evWiRYsWeHh40L17dz788MMGrLbpqU9/z7Vo0SJMJhN33HGHbQts4urT3/nz52MymWpdXF1dG7Dapqe+n9/jx48zZcoULBYLLi4uREZGkpiY2EDVNj316e/AgQMv+PyaTCbi4uIasOKmpb6f39mzZ3Pdddfh5uZGeHg4jz32GKWlpQ1UbdNTn/5arVZmzpxJREQErq6udOvWjeXLlzdgtZfJEJtZtGiR4ezsbMydO9dITU01HnjgAaNFixZGTk7ORR+/YcMG48knnzQ+/vhjIzg42Hj99dcbtuAmqL49HjNmjPHmm28aW7duNXbu3GlMnDjR8PHxMQ4fPtzAlTcN9e3vqlWrjCVLlhhpaWnG3r17jdmzZxtms9lYvnx5A1feNNS3v2fs27fPCA0NNW6++Wbj9ttvb5him6D69nfevHmGt7e3kZWVVXPJzs5u4Kqbjvr2t6yszOjVq5cRGxtrrFmzxti3b5+xevVqY9u2bQ1cedNQ3/4WFBTU+uzu2LHDMJvNxrx58xq28Caivv1duHCh4eLiYixcuNDYt2+fsWLFCsNisRiPPfZYA1feNNS3v3/+85+NkJAQIyEhwUhPTzfeeustw9XV1diyZUsDV35pCk421Lt3b2PKlCk1tysrK42QkBDjpZdeqvO5rVu3VnC6DL+mx4ZhGBUVFYaXl5exYMECW5XYpP3a/hqGYfTo0cP461//aovymrwr6W9FRYXRt29f4/333zcmTJig4HQJ9e3vvHnzDB8fnwaqrumrb3///e9/G+3atTPKy8sbqsQm7df+/H399dcNLy8vo6ioyFYlNmn17e+UKVOMwYMH19r2+OOPG/369bNpnU1VfftrsViM//u//6u1bfTo0cbYsWNtWmd9aaqejZSXl7N582aGDh1as83BwYGhQ4fy008/2bGy5uNq9LikpASr1UrLli1tVWaT9Wv7axgGSUlJ7N69m/79+9uy1CbpSvs7c+ZMAgMDmTRpUkOU2WRdaX+Liopo3bo14eHh3H777aSmpjZEuU3OlfR36dKlxMTEMGXKFIKCgujatSsvvvgilZWVDVV2k3E1/n+bM2cO9957Lx4eHrYqs8m6kv727duXzZs310w3y8jIIDExkdjY2AapuSm5kv6WlZVdMDXazc2NNWvW2LTW+nK0dwHNVX5+PpWVlQQFBdXaHhQUxK5du+xUVfNyNXr89NNPExISUusft1S70v6eOHGC0NBQysrKMJvNvPXWWwwbNszW5TY5V9LfNWvWMGfOHLZt29YAFTZtV9Lf6667jrlz5xIdHc2JEyeYNWsWffv2JTU1lbCwsIYou8m4kv5mZGTw7bffMnbsWBITE9m7dy8PP/wwVquV6dOnN0TZTcav/f9tw4YN7Nixgzlz5tiqxCbtSvo7ZswY8vPzuemmmzAMg4qKCh566CH+8pe/NETJTcqV9Hf48OG89tpr9O/fn4iICJKSkliyZEmj+8WKRpzkmvXyyy+zaNEiPv/8cx0AfhV5eXmxbds2Nm7cyAsvvMDjjz/O6tWr7V1Wk3fy5EnGjRvHe++9h7+/v73LaZZiYmIYP3483bt3Z8CAASxZsoSAgADeeecde5fWLFRVVREYGMi7775Lz549ueeee5g2bRpvv/22vUtrdubMmUNUVBS9e/e2dynNxurVq3nxxRd566232LJlC0uWLCEhIYHnnnvO3qU1C//617/o0KEDHTt2xNnZmUceeYT7778fB4fGFVU04mQj/v7+mM1mcnJyam3PyckhODjYTlU1L7+mx7NmzeLll1/mm2++ITo62pZlNllX2l8HBwfat28PQPfu3dm5cycvvfQSAwcOtGW5TU59+5uens7+/fsZNWpUzbaqqioAHB0d2b17NxEREbYtugm5Gj+DnZyc6NGjB3v37rVFiU3alfTXYrHg5OSE2Wyu2dapUyeys7MpLy/H2dnZpjU3Jb/m81tcXMyiRYuYOXOmLUts0q6kv3/7298YN24ckydPBiAqKori4mIefPBBpk2b1ui+4NvTlfQ3ICCAL774gtLSUgoKCggJCWHq1Km0a9euIUq+bPpbthFnZ2d69uxJUlJSzbaqqiqSkpKIiYmxY2XNx5X2+B//+AfPPfccy5cvp1evXg1RapN0tT7DVVVVlJWV2aLEJq2+/e3YsSMpKSls27at5nLbbbcxaNAgtm3bRnh4eEOW3+hdjc9vZWUlKSkpWCwWW5XZZF1Jf/v168fevXtrAj/Anj17sFgsCk3n+TWf308//ZSysjLuu+8+W5fZZF1Jf0tKSi4IR2d+CWAYhu2KbYJ+zefX1dWV0NBQKioqWLx4Mbfffruty60fOy9O0awtWrTIcHFxMebPn2+kpaUZDz74oNGiRYua5W3HjRtnTJ06tebxZWVlxtatW42tW7caFovFePLJJ42tW7caP//8s712odGrb49ffvllw9nZ2fjss89qLdt68uRJe+1Co1bf/r744ovGypUrjfT0dCMtLc2YNWuW4ejoaLz33nv22oVGrb79PZ9W1bu0+vb32WefNVasWGGkp6cbmzdvNu69917D1dXVSE1NtdcuNGr17e/BgwcNLy8v45FHHjF2795txMfHG4GBgcbzzz9vr11o1K7058NNN91k3HPPPQ1dbpNT3/5Onz7d8PLyMj7++GMjIyPDWLlypREREWH89re/tdcuNGr17e+6deuMxYsXG+np6cb3339vDB482Gjbtq1x7NgxO+3BxSk42dgbb7xhtGrVynB2djZ69+5trFu3rua+AQMGGBMmTKi5vW/fPgO44DJgwICGL7wJqU+PW7dufdEeT58+veELbyLq099p06YZ7du3N1xdXQ1fX18jJibGWLRokR2qbjrq09/zKTjVrT79ffTRR2seGxQUZMTGxja6c4g0NvX9/P74449Gnz59DBcXF6Ndu3bGCy+8YFRUVDRw1U1Hffu7a9cuAzBWrlzZwJU2TfXpr9VqNWbMmGFEREQYrq6uRnh4uPHwww83ui/2jUl9+rt69WqjU6dOhouLi+Hn52eMGzfOOHLkiB2qvjSTYWh8UURERERE5FJ0jJOIiIiIiEgdFJxERERERETqoOAkIiIiIiJSBwUnERERERGROig4iYiIiIiI1EHBSUREREREpA4KTiIiIiIiInVQcBIREREREamDgpOIiDRKq1evxmQycfz48QZ93/nz59OiRYtf9Rr79+/HZDKxbdu2X3yMvfZPRESujIKTiIg0OJPJdMnLjBkz7F2iiIhILY72LkBERK49WVlZNX/+5JNP+Pvf/87u3btrtnl6erJp06Z6v255eTnOzs5XpUYREZFzacRJREQaXHBwcM3Fx8cHk8lUa5unp2fNYzdv3kyvXr1wd3enb9++tQLWjBkz6N69O++//z5t27bF1dUVgOPHjzN58mQCAgLw9vZm8ODBbN++veZ527dvZ9CgQXh5eeHt7U3Pnj0vCGorVqygU6dOeHp6MmLEiFphr6qqipkzZxIWFoaLiwvdu3dn+fLll9znxMREIiMjcXNzY9CgQezfv//XtFBERBqYgpOIiDRq06ZN49VXX2XTpk04Ojry+9//vtb9e/fuZfHixSxZsqTmmKLf/OY35ObmsmzZMjZv3sz111/PkCFDOHr0KABjx44lLCyMjRs3snnzZqZOnYqTk1PNa5aUlDBr1iw+/PBDvv/+ew4ePMiTTz5Zc/+//vUvXn31VWbNmkVycjLDhw/ntttu4+eff77oPhw6dIjRo0czatQotm3bxuTJk5k6depV7pSIiNiSpuqJiEij9sILLzBgwAAApk6dSlxcHKWlpTWjS+Xl5XzwwQcEBAQAsGbNGjZs2EBubi4uLi4AzJo1iy+++ILPPvuMBx98kIMHD/LUU0/RsWNHADp06FDrPa1WK2+//TYREREAPPLII8ycObPm/lmzZvH0009z7733AvDKK6+watUqZs+ezZtvvnnBPvz73/8mIiKCV199FYDrrruOlJQUXnnllavWJxERsS2NOImISKMWHR1d82eLxQJAbm5uzbbWrVvXhCaonoZXVFSEn58fnp6eNZd9+/aRnp4OwOOPP87kyZMZOnQoL7/8cs32M9zd3WtC05n3PfOehYWFZGZm0q9fv1rP6devHzt37rzoPuzcuZM+ffrU2hYTE3PZPRAREfvTiJOIiDRq506hM5lMQPUxRmd4eHjUenxRUREWi4XVq1df8FpnlhmfMWMGY8aMISEhgWXLljF9+nQWLVrEnXfeecF7nnlfwzCuxu6IiEgTpREnERFpVq6//nqys7NxdHSkffv2tS7+/v41j4uMjOSxxx5j5cqVjB49mnnz5l3W63t7exMSEsLatWtrbV+7di2dO3e+6HM6derEhg0bam1bt25dPfdMRETsScFJRESalaFDhxITE8Mdd9zBypUr2b9/Pz/++CPTpk1j06ZNnDp1ikceeYTVq1dz4MAB1q5dy8aNG+nUqdNlv8dTTz3FK6+8wieffMLu3buZOnUq27Zt43/+538u+viHHnqIn3/+maeeeordu3fz0UcfMX/+/Ku0xyIi0hA0VU9ERJoVk8lEYmIi06ZN4/777ycvL4/g4GD69+9PUFAQZrOZgoICxo8fT05ODv7+/owePZpnn332st/jT3/6EydOnOCJJ54gNzeXzp07s3Tp0gsWmTijVatWLF68mMcee4w33niD3r178+KLL16wQqCIiDReJkOTtkVERERERC5JU/VERERERETqoOAkIiIiIiJSBwUnERERERGROig4iYiIiIiI1EHBSUREREREpA4KTiIiIiIiInVQcBIREREREamDgpOIiIiIiEgdFJxERERERETqoOAkIiIiIiJSBwUnERERERGROvx/8UFgyHHR6ecAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"code","source":["predicted_classes_test = (predictions_test >= best_threshold).astype(int)\n","\n","# Imprimir el reporte de clasificación con el mejor threshold\n","print(\"Test set classification report with custom threshold:\")\n","print(classification_report(y_test, predicted_classes_test, target_names=['Clase 0', 'Clase 1']))\n","\n","# Calcular la precisión y el recall con el mejor threshold\n","precision = precision_score(y_test, predicted_classes_test)\n","recall = recall_score(y_test, predicted_classes_test)\n","\n","print(\"Precision (Test Set, Class 1) with custom threshold:\", precision)\n","print(\"Recall (Test Set, Class 1) with custom threshold:\", recall)\n","\n","# AUC Score no se afecta por el threshold, pero se puede recalcular para referencia\n","auc_score_test = roc_auc_score(y_test, predictions_test)\n","print(\"Test set AUC Score:\", auc_score_test)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wr0sgN8WlVB6","executionInfo":{"status":"ok","timestamp":1732046693036,"user_tz":300,"elapsed":377,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"e4dab322-fd4f-4262-93ad-55c0da428f67"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Test set classification report with custom threshold:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.81      0.45      0.58        67\n","     Clase 1       0.21      0.59      0.31        17\n","\n","    accuracy                           0.48        84\n","   macro avg       0.51      0.52      0.44        84\n","weighted avg       0.69      0.48      0.52        84\n","\n","Precision (Test Set, Class 1) with custom threshold: 0.2127659574468085\n","Recall (Test Set, Class 1) with custom threshold: 0.5882352941176471\n","Test set AUC Score: 0.5074626865671642\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import roc_curve, auc\n","import matplotlib.pyplot as plt\n","\n","# Calcular la curva ROC y el AUC\n","fpr, tpr, _ = roc_curve(y_test, predictions_test)\n","roc_auc = auc(fpr, tpr)\n","\n","# Graficar la curva ROC\n","plt.figure(figsize=(10, 6))\n","plt.plot(fpr, tpr, color='blue', label=f'ROC Curve (AUC = {roc_auc:.4f})')\n","plt.plot([0, 1], [0, 1], color='gray', linestyle='--')  # Línea de referencia (clasificador aleatorio)\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic (ROC) Curve')\n","plt.legend(loc='lower right')\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"ChD-ZVfBlV4Q","executionInfo":{"status":"ok","timestamp":1732046696365,"user_tz":300,"elapsed":511,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"49ba293b-7750-451e-cf00-7a0a1feb4d0e"},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA04AAAIjCAYAAAA0vUuxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAACUqklEQVR4nOzdd3wUdeLG8c/upjcCJCEQQu/SCSC9BUJiryAWRI+zYeNnQ08RTw89T+U8PfFsHJ4FC+ehhl6kCtKl19AJoSUhdbP7/f3BsUdMgCwkTMrzfr14mczOzD7ZfBP3ycx8x2aMMYiIiIiIiMg52a0OICIiIiIiUt6pOImIiIiIiFyAipOIiIiIiMgFqDiJiIiIiIhcgIqTiIiIiIjIBag4iYiIiIiIXICKk4iIiIiIyAWoOImIiIiIiFyAipOIiIiIiMgFqDiJSLnVoEED7r77bqtjVDl9+/alb9++Vse4oBdffBGbzcbRo0etjlLu2Gw2XnzxxVLZV0pKCjabjUmTJpXK/gBWrFiBn58fe/bsKbV9lrahQ4dy6623Wh1DRMoRFSeRKmrSpEnYbDbPPx8fH2JiYrj77rs5cOCA1fHKtaysLP74xz/Stm1bgoKCqFatGr169WLy5MkYY6yOVyKbNm3ixRdfJCUlxeooRbhcLj755BP69u1LjRo18Pf3p0GDBowYMYKVK1daHa9UfP7550yYMMHqGIVczkzPPfcct912G/Xr1/cs69u3b6HfSYGBgbRt25YJEybgdruL3c+xY8d48sknad68OQEBAdSoUYOEhAR++OGHcz53RkYG48aNo127doSEhBAYGEjr1q15+umnOXjwoGe9p59+mm+//ZZ169aV+OuqCmNXpCqzmYryf3kRKVWTJk1ixIgRvPTSSzRs2JDc3Fx+/vlnJk2aRIMGDdiwYQMBAQGWZszLy8Nut+Pr62tpjrOlpqYyYMAANm/ezNChQ+nTpw+5ubl8++23LFy4kCFDhvDZZ5/hcDisjnpe33zzDbfccgvz588vcnQpPz8fAD8/v8ueKycnhxtvvJEZM2bQu3dvrrnmGmrUqEFKSgpfffUV27ZtY+/evdStW5cXX3yRcePGkZaWRkRExGXPeimuvvpqNmzYUGbFNTc3Fx8fH3x8fC45kzGGvLw8fH19S2Vcr127lg4dOrB06VK6devmWd63b1927tzJ+PHjATh69Ciff/45v/zyC88++yyvvPJKof1s3bqVAQMGkJaWxogRI4iLi+PkyZN89tlnrF27lieeeILXX3+90Da7du0iPj6evXv3csstt9CzZ0/8/PxYv349X3zxBTVq1GDbtm2e9bt27Urz5s2ZPHnyBb8ub8auiFRQRkSqpE8++cQA5pdffim0/OmnnzaAmTJlikXJrJWTk2NcLtc5H09ISDB2u9385z//KfLYE088YQDz6quvlmXEYp06dcqr9b/++msDmPnz55dNoIv00EMPGcC89dZbRR4rKCgwr7/+utm3b58xxpixY8cawKSlpZVZHrfbbbKzs0t9v1dddZWpX79+qe7T5XKZnJyci96+LDIV55FHHjH16tUzbre70PI+ffqYK664otCynJwcU79+fRMaGmoKCgo8y/Pz803r1q1NUFCQ+fnnnwttU1BQYIYMGWIA8+WXX3qWO51O065dOxMUFGQWLVpUJFd6erp59tlnCy37y1/+YoKDg01mZuYFvy5vxu6luNTvs4hcPBUnkSrqXMXphx9+MID505/+VGj55s2bzU033WSqV69u/P39TadOnYotDydOnDCPPfaYqV+/vvHz8zMxMTHmzjvvLPTmNjc317zwwgumcePGxs/Pz9StW9c8+eSTJjc3t9C+6tevb4YPH26MMeaXX34xgJk0aVKR55wxY4YBzPfff+9Ztn//fjNixAgTFRVl/Pz8TKtWrcxHH31UaLv58+cbwHzxxRfmueeeM3Xq1DE2m82cOHGi2Nds2bJlBjD33HNPsY87nU7TtGlTU716dc+b7d27dxvAvP766+bNN9809erVMwEBAaZ3797m119/LbKPkrzOZ753CxYsMA888ICJjIw04eHhxhhjUlJSzAMPPGCaNWtmAgICTI0aNczNN99sdu/eXWT73/47U6L69Olj+vTpU+R1mjJlinn55ZdNTEyM8ff3N/379zfbt28v8jW88847pmHDhiYgIMB07tzZLFy4sMg+i7Nv3z7j4+NjBg4ceN71zjhTnLZv326GDx9uqlWrZsLCwszdd99tsrKyCq378ccfm379+pnIyEjj5+dnWrZsaf7+978X2Wf9+vXNVVddZWbMmGE6depk/P39PW+ES7oPY4xJTk42vXv3NiEhISY0NNTExcWZzz77zBhz+vX97Wt/dmEp6c8HYB566CHzr3/9y7Rq1cr4+PiYf//7357Hxo4d61k3IyPDPProo56fy8jISBMfH29WrVp1wUxnxvAnn3xS6Pk3b95sbrnlFhMREWECAgJMs2bNihSP4tSrV8/cfffdRZYXV5yMMebmm282gDl48KBn2RdffGEA89JLLxX7HCdPnjTh4eGmRYsWnmVffvmlAcwrr7xywYxnrFu3zgBm6tSp513P27E7fPjwYkvqmTF9tuK+z1999ZWpXr16sa9jenq68ff3N//3f//nWVbSMSUi51fyY/giUiWcOU2nevXqnmUbN26kR48exMTE8MwzzxAcHMxXX33F9ddfz7fffssNN9wAwKlTp+jVqxebN2/mnnvuoWPHjhw9epRp06axf/9+IiIicLvdXHvttSxevJjf//73tGzZkl9//ZW33nqLbdu28d133xWbKy4ujkaNGvHVV18xfPjwQo9NmTKF6tWrk5CQAJw+ne7KK6/EZrMxatQoIiMjmT59Ovfeey8ZGRk89thjhbb/4x//iJ+fH0888QR5eXnnPEXt+++/B+Cuu+4q9nEfHx+GDRvGuHHjWLJkCfHx8Z7HJk+eTGZmJg899BC5ubn89a9/pX///vz666/UqlXLq9f5jAcffJDIyEheeOEFsrKyAPjll19YunQpQ4cOpW7duqSkpPDee+/Rt29fNm3aRFBQEL179+aRRx7h7bff5tlnn6Vly5YAnv+ey6uvvordbueJJ54gPT2dP//5z9x+++0sX77cs857773HqFGj6NWrF48//jgpKSlcf/31VK9e/YKnKE2fPp2CggLuvPPO8673W7feeisNGzZk/PjxrF69mg8//JCoqChee+21QrmuuOIKrr32Wnx8fPj+++958MEHcbvdPPTQQ4X2t3XrVm677Tbuu+8+Ro4cSfPmzb3ax6RJk7jnnnu44oorGDNmDOHh4axZs4YZM2YwbNgwnnvuOdLT09m/fz9vvfUWACEhIQBe/3zMmzePr776ilGjRhEREUGDBg2KfY3uv/9+vvnmG0aNGkWrVq04duwYixcvZvPmzXTs2PG8mYqzfv16evXqha+vL7///e9p0KABO3fu5Pvvvy9ySt3ZDhw4wN69e+nYseM51/mtM5NThIeHe5Zd6GexWrVqXHfddfzzn/9kx44dNGnShGnTpgF4Nb5atWpFYGAgS5YsKfLzd7aLHbsl9dvv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9ddfz1dffUWLFi1o166dZ51L/Z0rIv+j4iQiHg6Hg/Hjx9OvXz/eeecdnnnmGc9fpH19fQu9oSlO48aN2bBhwwXXWbduHQMGDCjRqUu/NWTIEMaNG8e3335LrVq1yMjI8FwEDRAZGUloaCgul+uCeb119dVXM378eCZPnlxscXK5XHz++edUr16dHj16FHps+/btRdbftm2b50iMN6/z+XzzzTcMHz6cN954w7MsNzeXkydPFlrvYl77CzlzM9MdO3bQr18/z/KCggJSUlKKFNbfSkxMxOFw8K9//atUL7L//vvvycvLY9q0aYXeZHtzilJJ99G4cWMANmzYcN4/KJzr9b/Un4/zqV27Ng8++CAPPvggR44coWPHjrzyyiue4lTS5zszVi/0s16cMwVj9+7dJVq/bdu23HHHHbz//vs88cQTntf+6quv5osvvmDy5Mn84Q9/KLJdRkYG//nPf2jRooXn+3DNNdfwxRdf8K9//YsxY8aU6PkLCgrYt28f11577XnX83bsVq9evcjPJPzvqG1J9e7dm9q1azNlyhR69uzJvHnzeO655wqtU5ZjSqSq0TVOIlJI37596dKlCxMmTCA3N5eoqCj69u3L+++/z6FDh4qsn5aW5vn4pptuYt26dfz73/8ust6Zv/7feuutHDhwgA8++KDIOjk5OZ7Z4c6lZcuWtGnThilTpjBlyhRq165dqMQ4HA5uuukmvv3222Lf2J2d11vdu3cnPj6eTz75hB9++KHI48899xzbtm3jqaeeKvIX4u+++67QNUorVqxg+fLlnjet3rzO5+NwOIocAfrb3/5W5C/ZwcHBAMW+ebtYcXFx1KxZkw8++ICCggLP8s8+++ycRxjOFhsby8iRI5k1axZ/+9vfijzudrt544032L9/v1e5zhyR+u1pi5988kmp72PQoEGEhoYyfvx4cnNzCz129rbBwcHFnjp5qT8fxXG5XEWeKyoqijp16pCXl3fBTL8VGRlJ7969+fjjj9m7d2+hxy509DEmJobY2FhWrlxZ4vxPPfUUTqez0BGTm2++mVatWvHqq68W2Zfb7eaBBx7gxIkTjB07ttA2bdq04ZVXXmHZsmVFniczM7NI6di0aRO5ubl07979vBm9HbuNGzcmPT3dc1QM4NChQ8X+7jwfu93OzTffzPfff8+nn35KQUFBodP0oGzGlEhVpSNOIlLEk08+yS233MKkSZO4//77effdd+nZsydt2rRh5MiRNGrUiNTUVJYtW8b+/ftZt26dZ7tvvvmGW265hXvuuYdOnTpx/Phxpk2bxsSJE2nXrh133nknX331Fffffz/z58+nR48euFwutmzZwldffcXMmTM9pw6ey5AhQ3jhhRcICAjg3nvvxW4v/DegV199lfnz59O1a1dGjhxJq1atOH78OKtXr2bOnDkcP378ol+byZMnM2DAAK677jqGDRtGr169yMvLY+rUqSxYsIAhQ4bw5JNPFtmuSZMm9OzZkwceeIC8vDwmTJhAzZo1eeqppzzrlPR1Pp+rr76aTz/9lGrVqtGqVSuWLVvGnDlzPKdIndG+fXscDgevvfYa6enp+Pv7079/f6Kioi76tfHz8+PFF1/k4Ycfpn///tx6662kpKQwadIkGjduXKK/dr/xxhvs3LmTRx55hKlTp3L11VdTvXp19u7dy9dff82WLVsKHWEsiUGDBuHn58c111zDfffdx6lTp/jggw+IiooqtqReyj7CwsJ46623+N3vfkfnzp0ZNmwY1atXZ926dWRnZ/PPf/4TgE6dOjFlyhRGjx5N586dCQkJ4ZprrimVn4/fyszMpG7dutx88820a9eOkJAQ5syZwy+//FLoyOS5MhXn7bffpmfPnnTs2JHf//73NGzYkJSUFH788UfWrl173jzXXXcd//73v0t07RCcPtUuKSmJDz/8kOeff56aNWvi5+fHN998w4ABA+jZsycjRowgLi6OkydP8vnnn7N69Wr+7//+r9BY8fX1ZerUqcTHx9O7d29uvfVWevToga+vLxs3bvQcLT57OvXZs2cTFBTEwIEDL5jTm7E7dOhQnn76aW644QYeeeQRsrOzee+992jWrJnXk7gMGTKEv/3tb4wdO5Y2bdoUua1AWYwpkSrr8k/kJyLlwblugGvM6TvTN27c2DRu3Ngz3fXOnTvNXXfdZaKjo42vr6+JiYkxV199tfnmm28KbXvs2DEzatQoExMT47nR4vDhwwtNDZ6fn29ee+01c8UVVxh/f39TvXp106lTJzNu3DiTnp7uWe+305GfsX37ds9NOhcvXlzs15eammoeeughExsba3x9fU10dLQZMGCA+cc//uFZ58w0219//bVXr11mZqZ58cUXzRVXXGECAwNNaGio6dGjh5k0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2S/b6dfRuiylxRjjmRGvYcOGtGjRgqioKHr27AnAnj17NGbEa+VhzHjz/JZNDuHn50enTp2YO3euZ5nb7Wbu3Ll069at2G2ys7OLlCOHwwGgc2lFRERESpkxhg0bNjBx4kTPKU02m41bb72Vfv36Wf6mV+RysvRUvdGjRzN8+HDi4uLo0qULEyZMICsrixEjRgBw1113ERMTw/jx4wG45pprePPNN+nQoYPnVL3nn3+ea665xlOgREREROTSHTlyhOnTp5OSkgKcnt04Pj4eQPdjkirJ0uI0ZMgQ0tLSeOGFFzh8+DDt27dnxowZngkj9u7dW+gI0x/+8AdsNht/+MMfOHDgAJGRkVxzzTW88sorVn0JIiIiIpVKXl4eCxYsYPny5Rhj8PHxoWfPnvTo0cPqaCKWsnxyiFGjRjFq1KhiH1uwYEGhz318fBg7dixjx469DMlEREREqpb169cza9Yssv47w0WLFi1ISEggPDzc2mAi5YDlxUlEREREyod9+/aRlZVFjRo1SExMpEmTJlZHEik3VJxEREREqqjc3Fzy8vKoVq0aAP3796d69ep06dIFHx+9TRQ5m34iRERERKoYYwxr165lzpw5REdHc8cdd2Cz2QgMDKR79+5WxxMpl1ScRERERKqQgwcPMn36dPbv3w+cvgFodnY2wZXtTr0ipUzFSURERKQKyM7OZt68eaxatQo4fU/NPn360LVrV93WRaQEVJxEREREKrnDhw8zefJkcnJyAGjTpg0DBw4kNDTU4mQiFYeKk4iIiEglFxkZSVBQEKGhoSQlJVG/fn2rI4lUOCpOIiIiIpVMVlYWP//8M3379sXhcOBwOLjjjjsICwvDbrdbHU+kQlJxEhEREakk3G43K1euZP78+eTm5haaJU83sRW5NCpOIiIiIpXA3r17SU5OJjU1FYDo6GhiY2MtTiVSeag4iYiIiFRgp06dYvbs2axfvx6AgIAA+vfvT6dOnXRankgpUnESERERqcB++OEHtm7dCkDHjh3p37+/7skkUgZUnEREREQqGGMMNpsNgAEDBpCdnU1CQgIxMTEWJxOpvFScRERERCqIjIwMZs+eTWBgIElJScDpqcbvuecei5OJVH4qTiIiIiLlnMvl4ueff2bhwoXk5+djt9vp1auXbmArchmpOImIiIiUYzt37mT69OkcO3YMgLp165KUlKTSJHKZqTiJiIiIlEOZmZlMnz6dzZs3AxAcHEx8fDzt2rXzXN8kIpePipOIiIhIOWS329m9ezc2m40uXbrQt29fAgICrI4lUmWpOImIiIiUEwcOHPDMjBccHMx1111H9erVqVWrlsXJRETFSURERMRiJ06cYObMmWzdupWhQ4fSvHlzAFq0aGFxMhE5Q8VJRERExCJOp5MlS5awZMkSCgoKsNvtnkkgRKR8UXESERERucyMMWzbto0ZM2Zw8uRJABo2bEhiYiKRkZHWhhORYqk4iYiIiFxmycnJrFy5EoCwsDAGDRpEq1atNFueSDmm4iQiIiJymTVt2pTVq1fTrVs3evfujZ+fn9WRROQCVJxEREREypAxhs2bN+N0OmnXrh0AzZo149FHHyUsLMzidCJSUipOIiIiImXk2LGjTJ06nV27duHv70+TJk0IDg4GUGkSqWBUnERERERKmZ9fHr17L+Sf//wZt9uNw+Gga9euOiVPpAJTcRIREREpJcYYtmzZyKhRswgLy8TtPn1aXkJCAjVq1LA6nohcAhUnERERkVJy/PhxfvxxKmFhhuPHq3PvvYNp27aZ1bFEpBTYrQ4gIiIiUpG5XC7PxzVr1iQurhvz5vXl739/kMaNVZpEKgsdcRIREREpIWMgO/vMx4ZNm9azePE8brrpdiIiogCIixvIwoUWhhSRMqHiJCIiIlICxkDPnrB0KURHHyYpKZl69fYB8Oijy/jPf66zOKGIlCUVJxEREZESyM6G1atzSEqaT1zcSux2Q36+LwsX9mbZsiuLrN+jBwQFWRBURMqEipOIiIhICWzatJ6HH55JcPDpc/WaN7+CPn0G8uyz1YpdPygIbLbLmVBEypKKk4iIiEgJZGdnERycTVpaBA8+mEirVo2sjiQil5Fm1RMREREpRnZ2NqmpqZ7PO3TowrRpV/Pee/dTv75Kk0hVoyNOIiIiImdxu92sXr2aefPmERQUxAMPPIDD4cDhcLB6dSer44mIRVScRERERP5r//79JCcnc+jQIQBCQ0PJzMwkPDzc2mAiYjkVJxEREanysrKymDNnDmvXrgXA39+ffv360blzZ+x2XdkgIipOIiIiUsWdPHmS999/n9zcXADat2/PgAEDCAkJsTiZiJQnKk4iIiJSpVWrVo2YmBiysrJISkoiNjbW6kgiUg6pOImIiEiVcurUKRYsWED//v0JCgrCZrNx4403EhAQoNPyROScVJxERESkSnC5XKxYsYIFCxaQn58PwNVXXw1AUFCQldFEpAJQcRIREZFKLyUlheTkZNLS0gCoU6cOHTp0sDiViFQkKk4iIiJSaWVkZDB79mw2bNgAQGBgIPHx8XTo0AGbzWZxOhGpSFScREREpNJavHgxGzZswGaz0alTJ/r3709gYKDVsUSkAlJxEhERkUqloKAAH5/Tb3H69u3LyZMn6devH7Vr17Y4mYhUZCpOIiIiUimkp6czc+ZM8vPzuf3227HZbAQFBTFs2DCro4lIJaDiJCIiIhVaQUEBS5cuZdGiRRQUFGCz2Thy5Ai1atWyOpqIVCIqTiIiIlJhbd++nRkzZnD8+HEA6tevT2JiokqTiJQ6FScRERGpcLKzs5k2bRpbt24FICQkhEGDBtG6dWvNliciZULFSURERCocPz8/0tLSsNvtdO3alT59+uDv7291LBGpxFScREREpNwzxrBz504aNmyIw+HAx8eHG264AX9/fyIjI62OJyJVgIqTiIiIlGvHjh1jxowZ7Nixg4SEBK688koA6tata3EyEalKVJxERESkXMrPz2fRokUsW7YMl8uF3W7H6XRaHUtEqigVJxERESlXjDFs3ryZmTNnkpGRAUDjxo1JTEykZs2aFqcTkapKxUlERETKlblz57JkyRIAqlWrxuDBg2nevLlmyxMRS6k4iYiISLnStm1bVqxYQbdu3ejZsye+vr5WRxIRubTilJubS0BAQGllERERkSrGGMPGjRs5fvw4vXv3BiAqKorRo0frPYaIlCt2bzdwu9388Y9/JCYmhpCQEHbt2gXA888/z0cffVTqAUVERKRyOnLkCJMnT+bbb79lwYIFHDlyxPOYSpOIlDdeF6eXX36ZSZMm8ec//xk/Pz/P8tatW/Phhx+WajgRERGpfHJzc5kxYwYTJ04kJSUFHx8f+vbtS40aNayOJiJyTl6fqjd58mT+8Y9/MGDAAO6//37P8nbt2rFly5ZSDSciIiKVhzGG9evXM3v2bLKysgBo0aIFCQkJhIeHWxtOROQCvC5OBw4coEmTJkWWu91u3VtBREREziknJ4fp06eTl5dHzZo1GTx4cLHvKUREyiOvi1OrVq1YtGgR9evXL7T8m2++oUOHDqUWTERERCq+/Px8z6n9QUFBxMfH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NHPmTGbPno2fnx+/+93vaNSoEVu2bOGZZ57h+++/JyEhwasnHzJkCGlpabzwwgscPnyY9u3bM2PGDM+EEXv37i10R/LY2FhmzpzJ448/Ttu2bYmJieHRRx/l6aef9up5RUSkYsvOVmkqKR8fJz17LqFnz8X4+LhwuezUrbuPPXsaWB2twurRA8rR/FIicpmUuDh99NFHjBw5kho1anDixAk+/PBD3nzzTR5++GGGDBnChg0baNmypdcBRo0adc5T8xYsWFBkWbdu3fj555+9fh4REamcUlPRRfrFMMawc+dW5s2bSUbGSQDq1WtI//6JPP105Dm3czqdzJw5k4SEBMuvPSivgoJAt7QSqXpKXJz++te/8tprr/Hkk0/y7bffcsstt/D3v/+dX3/9lbp165ZlRhERkXMKDlZx+q38/Hy+/vprduzYAUBYWBiDBg2iVatWF7yJrdMJAQEugoN1jZOIyNlKXJx27tzJLbfcAsCNN96Ij48Pr7/+ukqTiIhIOePr64vL5cJut9O9e3d69eqlSZRERC5RiYtTTk6O54axNpsNf39/ateuXWbBREREpGSMMWzevJmGDRsSGBiIzWbj6quvxhhDzZo1rY4nIlIpeDU5xIcffkhISAgABQUFTJo0iYiIiELraIY7ERGRyyctLY0ZM2awa9cuOnfuTFJSEgA1atSwOJmISOVS4uJUr149PvjgA8/n0dHRfPrpp4XWsdlsKk4iIiKXQV5eHgsXLuTnn3/G7XbjcDgI1sVeIiJlpsTFKSUlpQxjiIiISEkYY9iwYQOzZ88mMzMTgGbNmpGQkKCjTCIiZajUboArIiIiZW/p0qXMmTMHgOrVqzN48GCaNWtmcSoRkcpPxUlERKQCad++PcuXL6dTp0706NEDHx/9r1xE5HLQb1sREZFyyhjD+vXrSUlJ4brrrgMgODiYRx55RIVJROQy029dERGRcujw4cMkJyezb98+AK644gqaNGkCoNIkImIB/eYVEREpR3Jycpg/fz4rV67EGIOvry+9e/emYcOGVkcTEanSLqo47dy5k08++YSdO3fy17/+laioKKZPn069evW44oorSjujiIhIpWeMYc2aNcydO5fs7Gzg9FGmQYMGERYWZnE6ERGxe7vBTz/9RJs2bVi+fDlTp07l1KlTAKxbt46xY8eWekAREZGqwOVysXjxYrKzs4mMjOSuu+7i5ptvVmkSESknvD7i9Mwzz/Dyyy8zevRoQkNDPcv79+/PO++8U6rhREREKrPs7GwCAgKw2+34+PiQlJREWloaXbp0weFwWB1PRETO4vURp19//ZUbbrihyPKoqCiOHj1aKqFEREQqM7fbzcqVK3nnnXf45ZdfPMubNGlCt27dVJpERMohr4tTeHg4hw4dKrJ8zZo1xMTElEooERGRymr//v18+OGH/Pjjj+Tk5LB582aMMVbHEhGRC/D6VL2hQ4fy9NNP8/XXX2Oz2XC73SxZsoQnnniCu+66qywyioiIVHhZWVnMmTOHtWvXAuDv70+/fv3o3LkzNpvN2nAiInJBXhenP/3pTzz00EPExsbicrlo1aoVLpeLYcOG8Yc//KEsMoqIiFRomzdv5j//+Q95eXkAtG/fngEDBhASEmJxMhERKSmvi5Ofnx8ffPABzz//PBs2bODUqVN06NCBpk2blkU+ERGRCq9GjRrk5+dTu3ZtEhMTiY2NtTqSiIh4yevitHjxYnr27Em9evWoV69eWWQSERGp0DIzM0lJSaFNmzYA1KpVi7vvvpu6detit3t9ebGIiJQDXhen/v37ExMTw2233cYdd9xBq1atyiKXiIiUc8bAf+/TetllZVnzvBficrlYsWIFCxYswOl0UqtWLaKiogD0x0YRkQrO6+J08OBBvvzyS7744gteffVV2rZty+23385tt91G3bp1yyKjiIiUM8ZAz56wdKnVScqPlJQUkpOTSUtLAyAmJkaz5YmIVCJeny8QERHBqFGjWLJkCTt37uSWW27hn//8Jw0aNKB///5lkVFERMqZ7OzyUZp69ICgIGszZGRk8O233/LPf/6TtLQ0goKCuOaaa7j33nupVauWteFERKTUeH3E6WwNGzbkmWeeoV27djz//PP89NNPpZVLREQqiNRUCA625rmDgsDKmbxdLhcffvghmZmZ2Gw24uLi6NevH4GBgdaFEhGRMnHRxWnJkiV89tlnfPPNN+Tm5nLdddcxfvz40swmIiIVQHCwdcXJag6Hg27durF582YSExOpXbu21ZFERKSMeF2cxowZw5dffsnBgwcZOHAgf/3rX7nuuusIsvpcCRERkTKWnp7OzJkz6dixI02aNAGga9euXHnllbqJrYhIJed1cVq4cCFPPvkkt956KxEREWWRSUREpFwp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0YJff/210LI//OEPZGZm8te//pXY2Fivnl9EpLI4fPgweXl51K5dm6SkJOrWrQuUj/PHRUREKoOLvsbpt+644w66dOnCX/7yF6+2Gz16NMOHDycuLo4uXbowYcIEsrKyPLPs3XXXXcTExDB+/HgCAgJo3bp1oe3Dw8MBiiwXEanMMjMzcbvdVKtWDYABAwYQExNDhw4dsNu9vkWfiIiIXECpFadly5YREBDg9XZDhgwhLS2NF154gcOHD9O+fXtmzJjhmTBi7969ehMgIvJfLpeL5cuX89NPP1G/fn2GDRsGQHBwMJ06dbI4nYiISOXldXG68cYbC31ujOHQoUOsXLnyom6ACzBq1KhiT80DWLBgwXm3nTRp0kU9p4hIRbN7926mT59OWloacHomoLy8vGKv4xQREZHS5XVxOnNayBl2u53mzZvz0ksvMWjQoFILJiIip2VkZDBr1iw2btwIQFBQEAMGDKBDhw7nneVURERESo9XxcnlcjFixAjatGlD9erVyyqTiIj81759+/j0009xOp3YbDbi4uLo168fgYGBVkcTERGpUrwqTg6Hg0GDBrF582YVJxGRy6B27dqEhIQQEhJCUlJSsbdqEBERkbLn9al6rVu3ZteuXTRs2LAs8oiIVGnp6ScZNGg5c+YMBOz4+Phw9913ExoaqtPyRERELOR1cXr55Zd54okn+OMf/0inTp0I/s1t7cPCwkotnIhIVVFQUMDSpUtZtGgR3bsXcPJkONAV0O9VERGR8qDExemll17i//7v/0hKSgLg2muvLfTXT2MMNpsNl8tV+ilFRCqxbdu2MWPGDE6cOAFASkp9UlIaWBtKRERECilxcRo3bhz3338/8+fPL8s8IiJVxvHjx5k5cybbtm0DIDQ0lD59BhEXdwWg0/JERETKkxIXJ2MMAH369CmzMCIiVcmPP/7Irl27sNvtXHnllfTu3ZuCAt2TSUREpDzy6honXZgsInLxjDG43W4cDgcAgwYNYs6cOSQkJBAREQFAQYGVCUVERORcvCpOzZo1u2B5On78+CUFEhGpjI4dO8aMGTOIiIggISEBgFq1anH77bdbnExERERKwqviNG7cOKpVq1ZWWUREypQxkJ19eZ8zPz+fn39eyMqVy3C73aSk7KFTp14EBgYVu35W1uXNJyIiIiXjVXEaOnQoUVFRZZVFRKTMGAM9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8NFHkzhw4AAAkZGRJCUl0aBBA2uDiYiIiEilp+IkFYaPjw+RkZEcPXqUvn370rlzZxwOh9WxRERERKQKUHGScsvtdrN27SqqV2/smTFv4MCBDBgwgJCQEIvTiYiIiEhVouIk5dK+fftITk7m8OHDDB7cjC++uA2AIE0ZJyIiIiIWUHGScuXUqVPMmTOHdevWAeDvH8DOnY0BA2i6OBERERGxhoqTlAtut5tffvmF+fPnk5eXB0D79u3p1i2eMWOCLU4nIiIiIlWdipOUCytXrmTGjBkA1K5dm6SkJOrWrUtWlsXBRERERERQcRILGWOw/fdurR07dmT9+vV06NCBDh06YLfbLU4nIiIiIvI/Kk5y2blcLpYvX87WrVsZPnw4drsdHx8f7r33Xk+REhEREREpT1Sc5LLatWsX06dP5+jRowBs3LiRNm3aAKg0iYiIiEi5peIkl0V6ejqzZs1i06ZNwOlpxePj42ndurXFyURERERELkzFScqU2+1myZIlLFq0CKfTic1mIy4ujn79+hEYGGh1PBERERGRElFxkjJls9nYvn07TqeTevXqkZiYSHR0tNWxRERERES8ouIkpe7kyZMEBgbi7++PzWYjKSmJ1NRU2rZtq+uYRERERKRCUnGSUlNQUMCSJUtYvHgxnTt3ZtCgQQBER0frKJOIiIiIVGgqTlIqtm3bxowZMzhx4gQAqamphe7TJCIiIiJSkak4ySU5fvw4M2bMYPv27QCEhoYyaNAgrrjiCpUmEREREak0VJzkom3evJlvv/0Wl8uF3W7nyiuvpE+fPvj5+VkdTURERESkVKk4yUWrW7cuDoeD+vXrk5iYSEREhNWRRERERETKhIqTlNixY8fYvHkzPXv2BE6flnffffdRvXp1nZYnIiIiIpWaipNcUH5+PgsXLmTZsmW43W5q165N48aNAahRo8ZF79cYyM4+/zpZWRe9exERERGRUqPiJOdkjGHTpk3MmjWLjIwMAJo2bUr16tVLYd/QsycsXXrJuxIRERERKXMqTlKstLQ0pk+fzu7duwEIDw9n8ODBNGvWrFROy8vO9q409egBQUGX/LQiIiIiIhdFxUmKcLvdfPHFF5w4cQIfHx969OhBjx498PX1LZPnS02F4ODzrxMUBLqMSkRERESsouIkwOnT8gBsNht2u534+HjWr19PQkJCqZyadz7BwRcuTiIiIiIiVlJxElJTU0lOTqZt27Z06tQJgFatWtGqVSuLk4mIiIiIlA8qTlVYbm4u8+fP55dffsEYQ3p6Oh06dMBut1sdTURERESkXFFxqoKMMaxbt445c+aQ9d/5vlu1asWgQYNUmkREREREiqHiVMUcOXKE77//nv379wMQERHB4MGDPfdlEhERERGRolScqhin08n+/fvx9fWlT58+XHnllTgcDqtjiYiIiIiUaypOlZwxhkOHDlGnTh0AYmJiuOaaa2jSpAlhYWEWpxMRERERqRhUnCqxAwcOkJycTGpqKg888AA1a9YEoGPHjhYnExERERGpWFScKqHs7GzmzJnDmjVrAPD39yctLc1TnERERERExDsqTpWI2+1m1apVzJs3j9zcXADatWtHfHw8ISEhFqcTEREREam4VJwqCWMM//znP9m7dy8AtWrVIikpiXr16lmcTERERESk4lNxqiRsNhtNmjThyJEj9OvXj7i4ON2TSUREpIy4XC6cTqfVMcoFp9OJj48Pubm5uFwuq+NIBXC5x4yvr2+pzCKt4lRBud1uVqxYQe3atalfvz4A3bp1o2PHjgQHB1ucTkREpPI6deoU+/fvxxhjdZRywRhDdHQ0+/btw2azWR1HKoDLPWZsNht169a95EtXVJwqoD179pCcnMyRI0eIiorivvvuw2634+Pjg4+PvqUiIiJlxeVysX//foKCgoiMjFRR4PQfc0+dOkVISIjOdpESuZxjxhhDWloa+/fvp2nTppd05EnvsiuQzMxMZs+eza+//gpAYGAgXbp0sTiViIhI1eF0OjHGEBkZSWBgoNVxygW3201+fj4BAQEqTlIil3vMREZGkpKSgtPpVHGq7FwuF8uXL+enn34iPz8fgE6dOtG/f3+CgoIsTiciIlL16EiTSMVRWj+vKk4VwLZt25g9ezYAMTExJCUlUadOHYtTiYiIiIhUHSpO5ZTL5fIcSmzRogWtWrWiSZMmtG/fXn/lEhERERG5zHQiajlTUFDAokWLePfddz03sbXZbNxyyy106NBBpUlERETEAseOHSMqKoqUlBSro8hZZsyYQfv27XG73WX+XOWiOL377rs0aNCAgIAAunbtyooVK867/tdff02LFi0ICAigTZs2JCcnX6akZWvHjh289957zJs3jxMnTrB27VqrI4mIiEglcPfdd2Oz2bDZbPj6+tKwYUOeeuopzx9pz/bDDz/Qp08fQkNDCQoKonPnzkyaNKnY/X777bf079+fevXqERYWRtu2bXnppZc4fvz4efPMnz+fpKQkatasSVBQEK1ateL//u//OHDgQGl8uWXilVde4brrrqNBgwZFHktISMDhcPDLL78Ueaxv37489thjRZZPmjSJ8PDwQssyMjJ47rnnPO9zo6OjiY+PZ+rUqWU6/f2CBQvo2LEj/v7+NGnS5Jzf7zNSUlI84+nsfz///HOh9S70nt3hcBS7n9dff92zToMGDYo8/uqrr3oeHzx4ML6+vnz22WeX/kJcgOXFacqUKYwePZqxY8eyevVq2rVrR0JCAkeOHCl2/aVLl3Lbbbdx7733smbNGq6//nquv/56NmzYcJmTl568vDy++eYbPvvsM44fP05wcDDXX389Xbt2tTqaiIiIVBKDBw/m0KFD7Nq1i7feeov333+fsWPHFlrnb3/7G9dddx09evRg+fLlrF+/nqFDh3L//ffzxBNPFFr3ueeeY8iQIcTFxfH111+zfv163njjDdatW8enn356zhzvv/8+8fHxREdH8+2337Jp0yYmTpxIeno6b7zxxkV/fWcm0CoL2dnZfPTRR9x7771FHtu7dy9Lly5l1KhRfPzxxxf9HCdPnqR79+5MnjyZMWPGsHr1ahYuXMiQIUN46qmnSE9Pv5Qv4Zx2797NVVddRb9+/Vi7di2PPfYYv/vd75g5c+YFt50zZw6HDh3y/OvUqZPnsZK8Zz9w4ECh7T/++GNsNhs33XRToed56aWXCq338MMPF3r87rvv5u23377EV6IEjMW6dOliHnroIc/nLpfL1KlTx4wfP77Y9W+99VZz1VVXFVrWtWtXc99995Xo+dLT0w1g0tPTLz50KXG53GbGjHlm3Lhx5sUXXzTjxo0z338/wxw7lmtOnTKV+l9qqjFw+t+pU1Z/JyqO/Px8891335n8/Hyro0gFoTEj3tKYOb+cnByzadMmk5OTY4wxxu227v+lbnfJcw8fPtxcd911hZbdeOONpkOHDp7P9+7da3x9fc3o0aOLbP/2228bwPz888/GGGOWL19uADNhwgTjcrnMiRMnjMvl8qx/4sSJYnPs27fP+Pn5mccee6zYx89sN3bsWNOuXbtCj7311lumfv36Rb6ml19+2dSuXds0aNDAjBkz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zpIlSwrdd/LM63I+Z54jNTWV2rVrn3M9h8OBMabQ/s4cKTiz7MzX9NvnHDZsGM888wxr164lJyeHffv2MXToUOx2u+fowgcffFBkEi6Hw3HO/JGRkZw8ebLQ48ePH+e7777D6XQyceJEz3KXy8WkSZM8R0TCwsLIyMgosu+MjAyqVauG3W6nVq1ahIeHs3Xr1gu+hr+1aNEiEhMTz7vO+++/f85T9aKjozly5Eih501LS/McfSypK6+8kjlz5nj2Ex0dTVpaWqH9HjlyhOjoaE9ZOjNmFi1axNatW5kyZcoFv/5u3bpRUFDA3r17ad68uWf58ePHiYqKKnZ7u93umVHyt7/XvPk9Z+msen5+fnTq1Im5c+d6lrndbubOnUu3bt2K3aZbt26F1ofTpxOca30RERERKcxut/Pss8/yhz/8wXO046abbsLX17fYme0mTpxIVlYWt912G3C6nJw6dYq///3vxe7/5MmTxS6/+eab8fPz489//vN5t4uMjOTw4cOFpuAu6W1a6tatS58+ffjss8/47LPPGDhwoOcoRq1atahTpw67du2iSZMmhf4Vd23MGR06dGDTpk2Fln322WfUrVuXdevWsXbtWs+/N954g0mTJuH673mUzZs3Z/Xq1UX2uXr1ak+RtdvtDB06lM8++4yDBw8WWffUqVNFTjE7Iy4urtDzF/fv7GuPfqu03luvXbu2UBn2Zr8fffQRnTp1ol27diV6HrvdXujIVG5uLjt37qRDhw5eZfbaBaePKGNffvml8ff3N5MmTTKbNm0yv//97014eLg5fPiwMcaYO++80zzzzDOe9ZcsWWJ8fHzMX/7yF7N582YzduxY4+vra3799dcSPV95mlXPGM1eJN7ReBFvacyItzRmzu98s3OVZ8XNqud0Ok1MTIx5/fXXPcveeustY7fbzbPPPms2b95sduzYYd544w3j7+9v/u///q/Q9k899ZRxOBzmiSeeMDNnzjS7du0yc+bMMTfffLOZMGHCObO8++67xmazmXvuuccsWLDApKSkmMWLF5vf//73nhn9Nm3aZGw2m3n11VfNjh07zDvvvGOqV69e7Kx6xfnggw9MnTp1TEREhPn000+LPBYYGGj++te/mq1bt5r169ebjz/+2LzxxhvnzLx+/Xrj4+Njjh8/7lnWrl078/TTTxdZ9+TJk8bPz8/88MMP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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#RESULTADOS ANTERIORES"],"metadata":{"id":"g96oqYQ8lVjR"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":27331,"status":"ok","timestamp":1731463609740,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"4-LSwrhIkB7e","outputId":"9a9af877-001b-46d0-ba49-af8806fce599"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 3s/step\n","Test set classification report after fine-tuning:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.83      0.82      0.83        67\n","     Clase 1       0.33      0.35      0.34        17\n","\n","    accuracy                           0.73        84\n","   macro avg       0.58      0.59      0.58        84\n","weighted avg       0.73      0.73      0.73        84\n","\n","Test set AUC Score after fine-tuning: 0.7014925373134328\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 760ms/step\n","Train set classification report after fine-tuning:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.79      0.78      0.78       265\n","     Clase 1       0.20      0.21      0.21        70\n","\n","    accuracy                           0.66       335\n","   macro avg       0.50      0.50      0.50       335\n","weighted avg       0.67      0.66      0.66       335\n","\n","Train set AUC Score after fine-tuning: 0.4991374663072776\n"]}],"source":["from sklearn.metrics import classification_report, roc_auc_score\n","import matplotlib.pyplot as plt\n","\n","predictions_test = model.predict(test_data)\n","predicted_classes_test = np.round(predictions_test).astype(int)\n","\n","y_test = test_data.classes\n","\n","print(\"Test set classification report after fine-tuning:\")\n","print(classification_report(y_test, predicted_classes_test, target_names=['Clase 0', 'Clase 1']))\n","\n","auc_score_test = roc_auc_score(y_test, predictions_test)\n","print(\"Test set AUC Score after fine-tuning:\", auc_score_test)\n","\n","predictions_train = model.predict(train_data, steps=len(train_data), verbose=1)\n","predicted_classes_train = np.round(predictions_train).astype(int)\n","\n","y_train = train_data.classes\n","\n","print(\"Train set classification report after fine-tuning:\")\n","print(classification_report(y_train, predicted_classes_train, target_names=['Clase 0', 'Clase 1']))\n","\n","auc_score_train = roc_auc_score(y_train, predictions_train)\n","print(\"Train set AUC Score after fine-tuning:\", auc_score_train)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-XZD7a7bS_E-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731463615673,"user_tz":300,"elapsed":2252,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"6d75ea4d-d805-48d5-e935-b6cc64b15dd2"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 176ms/step\n","Precision (Test Set, Class 1): 0.05555555555555555\n","Recall (Test Set, Class 1): 0.058823529411764705\n"]}],"source":["from sklearn.metrics import precision_score, recall_score\n","\n","predictions_test = model.predict(test_data)\n","predicted_classes_test = np.round(predictions_test).astype(int)\n","y_test = test_data.classes\n","\n","precision = precision_score(y_test, predicted_classes_test, average='binary', pos_label=1)\n","recall = recall_score(y_test, predicted_classes_test, average='binary', pos_label=1)\n","\n","print(\"Precision (Test Set, Class 1):\", precision)\n","print(\"Recall (Test Set, Class 1):\", recall)\n"]},{"cell_type":"code","source":[],"metadata":{"id":"F-HZNfIQRglk"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"1wiAvHd6P1FPC4aPrsq5OZhTyP0ftiHKi","timestamp":1730255537619},{"file_id":"1vl4l6OhHGWn5I8H14IjbaarKtpWQlZ4j","timestamp":1730253865801},{"file_id":"1aS69bruyWTjkALtyqFDyL5WdXbs1cotQ","timestamp":1730251799274},{"file_id":"1XIQFivksNtyQmwqnxks8C3ziza499LmP","timestamp":1730227391477},{"file_id":"1bjaSRpUcyvdW5ToIZOb6Chi25LFZdZfA","timestamp":1730224807557},{"file_id":"1iW4qIigqB1uLTToYyPiOVwfgxmCnYXu9","timestamp":1729724070861},{"file_id":"14fteFtlnQAPiYwhAGEJVG3hHVHd9Fws5","timestamp":1729721692840},{"file_id":"14Z8LyP99xukHAoKBlOND6lfaRzOw024N","timestamp":1729719207228},{"file_id":"1hIS32OaEWe-ub6AUubjHFbCV-8Z9u3e9","timestamp":1729717024634},{"file_id":"1Dy-ngKQNSjbvLSnW9IYEw7uWEdMIUFgq","timestamp":1729713437883},{"file_id":"1OiHTrqHFB4BjQ4f7IPOxietIlC52S_-i","timestamp":1729710879543},{"file_id":"1iai0MKDIBpG8pBwceGufqM_mQrDGZK7p","timestamp":1729633654784},{"file_id":"1wthMRVFFFGVjNES7VdM8WmkjT1qoCcMK","timestamp":1729632597533},{"file_id":"1EuTB-NizY2iH3JrbCqFE3YPuNjKEQw8-","timestamp":1729622886260}],"collapsed_sections":["g96oqYQ8lVjR"],"authorship_tag":"ABX9TyObKHmLIameBc6ks4nKD2Kh"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}