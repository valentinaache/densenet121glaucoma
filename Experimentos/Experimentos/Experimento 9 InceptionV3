{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18166,"status":"ok","timestamp":1732032434984,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"boX8ZPtfYMuE","outputId":"c4c42c80-c3c6-4df5-ad62-4461ab4e0d57"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8770,"status":"ok","timestamp":1732032446813,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"mQzpyzneXrW8","outputId":"a205602a-5de1-4514-f084-45f3ddad34dd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train DataFrame:\n","                                             filename   id eye Diagnosis\n","2   /content/drive/My Drive/Proyecto de Grado G/Pr...  004  OD         1\n","3   /content/drive/My Drive/Proyecto de Grado G/Pr...  004  OS         1\n","4   /content/drive/My Drive/Proyecto de Grado G/Pr...  005  OD         1\n","5   /content/drive/My Drive/Proyecto de Grado G/Pr...  005  OS         1\n","14  /content/drive/My Drive/Proyecto de Grado G/Pr...  010  OD         1\n","\n","Test DataFrame:\n","                                             filename   id eye Diagnosis\n","20  /content/drive/My Drive/Proyecto de Grado G/Pr...  015  OD         1\n","21  /content/drive/My Drive/Proyecto de Grado G/Pr...  015  OS         1\n","32  /content/drive/My Drive/Proyecto de Grado G/Pr...  023  OD         1\n","33  /content/drive/My Drive/Proyecto de Grado G/Pr...  023  OS         1\n","42  /content/drive/My Drive/Proyecto de Grado G/Pr...  028  OD         0\n"]}],"source":["import pandas as pd\n","from sklearn.model_selection import StratifiedShuffleSplit\n","import numpy as np\n","import os\n","\n","# Ruta al directorio con las imágenes\n","directorio_imagenes = '/content/drive/My Drive/Proyecto de Grado G/ProcessedImages_Disc_Exp2'\n","\n","imagenes_info = []\n","for filename in os.listdir(directorio_imagenes):\n","    if filename.endswith('.jpg') or filename.endswith('.png'):\n","        base = filename.split('_')[0]\n","        id_paciente = base[3:-2]  # Extrae correctamente el ID del paciente\n","        tipo_ojo = base[-2:]\n","        full_path = os.path.join(directorio_imagenes, filename)\n","        imagenes_info.append({'filename': full_path, 'id': id_paciente, 'eye': tipo_ojo})\n","\n","imagenes_df = pd.DataFrame(imagenes_info)\n","\n","# Cargar y preparar los datos clínicos\n","data_od = pd.read_excel('/content/drive/My Drive/Proyecto de Grado G/patient_data_od.xlsx')\n","data_os = pd.read_excel('/content/drive/My Drive/Proyecto de Grado G/patient_data_os.xlsx')\n","\n","data_od['id'] = data_od['Unnamed: 0'].str.replace('#', '').astype(str)\n","data_os['id'] = data_os['Unnamed: 0'].str.replace('#', '').astype(str)\n","\n","data_od['eye'] = 'OD'\n","data_os['eye'] = 'OS'\n","\n","data_clinica = pd.concat([data_od[['id', 'eye', 'Diagnosis']], data_os[['id', 'eye', 'Diagnosis']]])\n","\n","full_df = pd.merge(imagenes_df, data_clinica, on=['id', 'eye'], how='left')\n","full_df = full_df[full_df['Diagnosis'] != 2]\n","\n","dominant_diagnosis = full_df.groupby('id')['Diagnosis'].agg(lambda x: x.mode()[0])\n","\n","\n","patient_df = pd.DataFrame(dominant_diagnosis).reset_index()\n","\n","splitter = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n","train_patients, test_patients = next(splitter.split(patient_df, patient_df['Diagnosis']))\n","\n","train_ids = patient_df.iloc[train_patients]['id']\n","test_ids = patient_df.iloc[test_patients]['id']\n","\n","train_df = full_df[full_df['id'].isin(train_ids)]\n","test_df = full_df[full_df['id'].isin(test_ids)]\n","\n","print(\"Train DataFrame:\")\n","print(train_df[['filename', 'id', 'eye', 'Diagnosis']].head())\n","\n","print(\"\\nTest DataFrame:\")\n","print(test_df[['filename', 'id', 'eye', 'Diagnosis']].head())"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3602,"status":"ok","timestamp":1732032451530,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"4YD6q2Ue5XkZ","outputId":"4f4b831d-0d67-49b5-b529-95205aad72cf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Found 335 validated image filenames belonging to 2 classes.\n","Found 84 validated image filenames belonging to 2 classes.\n","Found 84 validated image filenames belonging to 2 classes.\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-3-d2558d8b6ad4>:29: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train_df['Diagnosis'] = train_df['Diagnosis'].astype(str)\n","<ipython-input-3-d2558d8b6ad4>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_df['Diagnosis'] = test_df['Diagnosis'].astype(str)\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import os\n","from tensorflow.keras.applications.inception_v3 import InceptionV3, preprocess_input\n","from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Input\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n","from sklearn.metrics import roc_auc_score\n","from sklearn.model_selection import StratifiedShuffleSplit\n","from sklearn.utils.class_weight import compute_class_weight\n","# Preparar los generadores de datos\n","train_datagen = ImageDataGenerator(\n","    preprocessing_function=preprocess_input,\n","    rotation_range=10,\n","    width_shift_range=0.2,\n","    height_shift_range=0.2,\n","    horizontal_flip=True,\n","    vertical_flip=False,\n","    fill_mode='nearest',\n","    validation_split = 0.2\n",")\n","\n","test_datagen = ImageDataGenerator(\n","    preprocessing_function=preprocess_input,\n",")\n","\n","train_df['Diagnosis'] = train_df['Diagnosis'].astype(str)\n","test_df['Diagnosis'] = test_df['Diagnosis'].astype(str)\n","\n","train_data = train_datagen.flow_from_dataframe(\n","    dataframe=train_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=20,\n","    class_mode='binary'\n",")\n","\n","test_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode='binary'\n",")\n","\n","valid_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode='binary'\n",")\n"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":246,"status":"ok","timestamp":1732032452602,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"j6-13qP2n_02","outputId":"07aff709-fe38-402a-e875-679f2f1a98db"},"outputs":[{"output_type":"stream","name":"stdout","text":["Valores únicos en 'Diagnosis' después de la conversión: [1 0]\n","Class weights: {0: 0.6320754716981132, 1: 2.392857142857143}\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-4-5d28dd34677d>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train_df['Diagnosis'] = train_df['Diagnosis'].astype(int)\n","<ipython-input-4-5d28dd34677d>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_df['Diagnosis'] = test_df['Diagnosis'].astype(int)\n"]}],"source":["from sklearn.utils.class_weight import compute_class_weight\n","import pandas as pd\n","\n","# Convertir 'Diagnosis' de cadena a enteros\n","train_df['Diagnosis'] = train_df['Diagnosis'].astype(int)\n","test_df['Diagnosis'] = test_df['Diagnosis'].astype(int)\n","\n","# Verificar que la conversión fue exitosa\n","print(\"Valores únicos en 'Diagnosis' después de la conversión:\", train_df['Diagnosis'].unique())\n","\n","# Calcular los pesos de clases\n","class_weights = compute_class_weight(\n","    class_weight='balanced',\n","    classes=np.unique(train_df['Diagnosis']),\n","    y=train_df['Diagnosis']\n",")\n","class_weights = dict(enumerate(class_weights))\n","\n","print(\"Class weights:\", class_weights)\n"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RNcbG_WLm8Ma","executionInfo":{"status":"ok","timestamp":1732033159231,"user_tz":300,"elapsed":704752,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"13d6d7ad-ce7f-469b-f300-98c1c6d25583"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/inception_v3/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n","\u001b[1m87910968/87910968\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 0us/step\n","Inicio de Warm-Up Training...\n","\n","Epoch 1/50\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:122: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 914ms/step - loss: 0.7253\n","Epoch 1: val_loss improved from inf to 0.63053, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m62s\u001b[0m 2s/step - loss: 0.7245 - val_loss: 0.6305\n","Epoch 2/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 367ms/step - loss: 0.7037\n","Epoch 2: val_loss did not improve from 0.63053\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 402ms/step - loss: 0.7028 - val_loss: 0.6684\n","Epoch 3/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 313ms/step - loss: 0.6213\n","Epoch 3: val_loss did not improve from 0.63053\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 393ms/step - loss: 0.6238 - val_loss: 0.6310\n","Epoch 4/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 288ms/step - loss: 0.6350\n","Epoch 4: val_loss did not improve from 0.63053\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 319ms/step - loss: 0.6365 - val_loss: 0.6397\n","Epoch 5/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 279ms/step - loss: 0.6323\n","Epoch 5: val_loss improved from 0.63053 to 0.62942, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 387ms/step - loss: 0.6328 - val_loss: 0.6294\n","Epoch 6/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 388ms/step - loss: 0.6220\n","Epoch 6: val_loss did not improve from 0.62942\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 423ms/step - loss: 0.6225 - val_loss: 0.6325\n","Epoch 7/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 281ms/step - loss: 0.6226\n","Epoch 7: val_loss improved from 0.62942 to 0.59889, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 389ms/step - loss: 0.6224 - val_loss: 0.5989\n","Epoch 8/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 288ms/step - loss: 0.6342\n","Epoch 8: val_loss did not improve from 0.59889\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 321ms/step - loss: 0.6334 - val_loss: 0.6225\n","Epoch 9/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 375ms/step - loss: 0.6026\n","Epoch 9: val_loss improved from 0.59889 to 0.59263, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 480ms/step - loss: 0.6027 - val_loss: 0.5926\n","Epoch 10/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 281ms/step - loss: 0.6223\n","Epoch 10: val_loss did not improve from 0.59263\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 316ms/step - loss: 0.6223 - val_loss: 0.6177\n","Epoch 11/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 279ms/step - loss: 0.5944\n","Epoch 11: val_loss improved from 0.59263 to 0.58879, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 387ms/step - loss: 0.5948 - val_loss: 0.5888\n","Epoch 12/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 389ms/step - loss: 0.6176\n","Epoch 12: val_loss did not improve from 0.58879\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 420ms/step - loss: 0.6164 - val_loss: 0.6145\n","Epoch 13/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 280ms/step - loss: 0.5945\n","Epoch 13: val_loss did not improve from 0.58879\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 360ms/step - loss: 0.5933 - val_loss: 0.5920\n","Epoch 14/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 287ms/step - loss: 0.5396\n","Epoch 14: val_loss did not improve from 0.58879\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 318ms/step - loss: 0.5409 - val_loss: 0.5992\n","Epoch 15/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 304ms/step - loss: 0.5201\n","Epoch 15: val_loss did not improve from 0.58879\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 338ms/step - loss: 0.5224 - val_loss: 0.6132\n","Epoch 16/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 361ms/step - loss: 0.5776\n","Epoch 16: val_loss improved from 0.58879 to 0.57318, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 471ms/step - loss: 0.5769 - val_loss: 0.5732\n","Epoch 17/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 284ms/step - loss: 0.5637\n","Epoch 17: val_loss did not improve from 0.57318\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 318ms/step - loss: 0.5638 - val_loss: 0.6396\n","Epoch 18/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 375ms/step - loss: 0.5582\n","Epoch 18: val_loss did not improve from 0.57318\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 408ms/step - loss: 0.5591 - val_loss: 0.6539\n","Epoch 19/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 281ms/step - loss: 0.5335\n","Epoch 19: val_loss did not improve from 0.57318\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 362ms/step - loss: 0.5343 - val_loss: 0.6024\n","Epoch 20/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 289ms/step - loss: 0.5122\n","Epoch 20: val_loss did not improve from 0.57318\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 322ms/step - loss: 0.5144 - val_loss: 0.5991\n","Epoch 21/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 315ms/step - loss: 0.5289\n","Epoch 21: val_loss did not improve from 0.57318\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 349ms/step - loss: 0.5295 - val_loss: 0.6219\n","Epoch 22/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 364ms/step - loss: 0.5361\n","Epoch 22: val_loss improved from 0.57318 to 0.57290, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 469ms/step - loss: 0.5368 - val_loss: 0.5729\n","Epoch 23/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 277ms/step - loss: 0.5562\n","Epoch 23: val_loss did not improve from 0.57290\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 312ms/step - loss: 0.5552 - val_loss: 0.6222\n","Epoch 24/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 273ms/step - loss: 0.4689\n","Epoch 24: val_loss did not improve from 0.57290\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 309ms/step - loss: 0.4724 - val_loss: 0.5750\n","Epoch 25/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 371ms/step - loss: 0.4813\n","Epoch 25: val_loss did not improve from 0.57290\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 405ms/step - loss: 0.4830 - val_loss: 0.6026\n","Epoch 26/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 294ms/step - loss: 0.4923\n","Epoch 26: val_loss improved from 0.57290 to 0.56846, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 433ms/step - loss: 0.4945 - val_loss: 0.5685\n","Epoch 27/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 277ms/step - loss: 0.5078\n","Epoch 27: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 311ms/step - loss: 0.5083 - val_loss: 0.5928\n","Epoch 28/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 400ms/step - loss: 0.5435\n","Epoch 28: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 434ms/step - loss: 0.5422 - val_loss: 0.5861\n","Epoch 29/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 278ms/step - loss: 0.5187\n","Epoch 29: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 318ms/step - loss: 0.5187 - val_loss: 0.5799\n","Epoch 30/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 273ms/step - loss: 0.5024\n","Epoch 30: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 304ms/step - loss: 0.5035 - val_loss: 0.6008\n","Epoch 31/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 379ms/step - loss: 0.5077\n","Epoch 31: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 414ms/step - loss: 0.5083 - val_loss: 0.5810\n","Epoch 32/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 288ms/step - loss: 0.4925\n","Epoch 32: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 329ms/step - loss: 0.4945 - val_loss: 0.6280\n","Epoch 33/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 292ms/step - loss: 0.5253\n","Epoch 33: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 328ms/step - loss: 0.5244 - val_loss: 0.6152\n","Epoch 34/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 319ms/step - loss: 0.5210\n","Epoch 34: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 350ms/step - loss: 0.5197 - val_loss: 0.6001\n","Epoch 35/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 397ms/step - loss: 0.4955\n","Epoch 35: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 447ms/step - loss: 0.4966 - val_loss: 0.6067\n","Epoch 36/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 310ms/step - loss: 0.4864\n","Epoch 36: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 341ms/step - loss: 0.4873 - val_loss: 0.5949\n","Epoch 37/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 350ms/step - loss: 0.4684\n","Epoch 37: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 431ms/step - loss: 0.4695 - val_loss: 0.5766\n","Epoch 38/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 294ms/step - loss: 0.5056\n","Epoch 38: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 331ms/step - loss: 0.5052 - val_loss: 0.5992\n","Epoch 39/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 303ms/step - loss: 0.4761\n","Epoch 39: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 340ms/step - loss: 0.4763 - val_loss: 0.5784\n","Epoch 40/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 400ms/step - loss: 0.5189\n","Epoch 40: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 433ms/step - loss: 0.5177 - val_loss: 0.5891\n","Epoch 41/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 301ms/step - loss: 0.4749\n","Epoch 41: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 337ms/step - loss: 0.4743 - val_loss: 0.5981\n","Epoch 42/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 310ms/step - loss: 0.5485\n","Epoch 42: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 340ms/step - loss: 0.5446 - val_loss: 0.5873\n","Epoch 43/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - loss: 0.4729\n","Epoch 43: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 452ms/step - loss: 0.4736 - val_loss: 0.6117\n","Epoch 44/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 293ms/step - loss: 0.4663\n","Epoch 44: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 324ms/step - loss: 0.4666 - val_loss: 0.5765\n","Epoch 45/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 363ms/step - loss: 0.4513\n","Epoch 45: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 400ms/step - loss: 0.4522 - val_loss: 0.5939\n","Epoch 46/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 299ms/step - loss: 0.4402\n","Epoch 46: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 329ms/step - loss: 0.4408 - val_loss: 0.6039\n","Epoch 47/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 303ms/step - loss: 0.4427\n","Epoch 47: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 339ms/step - loss: 0.4448 - val_loss: 0.6033\n","Epoch 48/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 347ms/step - loss: 0.5062\n","Epoch 48: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 387ms/step - loss: 0.5048 - val_loss: 0.5851\n","Epoch 49/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 292ms/step - loss: 0.4347\n","Epoch 49: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 373ms/step - loss: 0.4373 - val_loss: 0.6566\n","Epoch 50/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 300ms/step - loss: 0.4801\n","Epoch 50: val_loss did not improve from 0.56846\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 333ms/step - loss: 0.4792 - val_loss: 0.6073\n"]}],"source":["input_tensor = Input(shape=(299, 299, 3))\n","base_model = InceptionV3(input_tensor=input_tensor, weights='imagenet', include_top=False, pooling='avg')\n","\n","x = base_model.output\n","x = Dense(2048, activation='relu')(x)\n","predictions = Dense(1, activation='sigmoid')(x)\n","model = Model(inputs=base_model.input, outputs=predictions)\n","\n","for layer in base_model.layers:\n","    layer.trainable = False\n","\n","model.compile(optimizer=Adam(learning_rate=0.00001), loss='binary_crossentropy')\n","\n","checkpoint = ModelCheckpoint('best_model_warmup.keras', monitor='val_loss', save_best_only=True, mode='min', verbose=1)\n","early_stop = EarlyStopping(monitor='val_loss', patience=25, restore_best_weights=True, mode='min')\n","\n","print(\"Inicio de Warm-Up Training...\\n\")\n","warmup_history = model.fit(\n","    train_data,\n","    validation_data=valid_data,\n","    epochs=50,\n","    callbacks=[checkpoint, early_stop],\n","    class_weight=class_weights\n",")\n"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1625392,"status":"ok","timestamp":1732034872895,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"kEOK8le1nAVq","outputId":"8bdb248c-e376-46db-f1ac-33b5e07dd44c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Inicio de Fine-Tuning Training...\n","\n","Epoch 1/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4s/step - loss: 0.8141\n","Epoch 1: val_loss improved from inf to 0.59360, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m166s\u001b[0m 4s/step - loss: 0.8108 - val_loss: 0.5936\n","Epoch 2/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 507ms/step - loss: 0.5855\n","Epoch 2: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 543ms/step - loss: 0.5850 - val_loss: 0.7213\n","Epoch 3/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 442ms/step - loss: 0.3842\n","Epoch 3: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 483ms/step - loss: 0.3849 - val_loss: 0.8412\n","Epoch 4/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 410ms/step - loss: 0.3017\n","Epoch 4: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 444ms/step - loss: 0.3050 - val_loss: 1.2439\n","Epoch 5/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 460ms/step - loss: 0.2612\n","Epoch 5: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 496ms/step - loss: 0.2587 - val_loss: 1.3336\n","Epoch 6/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 405ms/step - loss: 0.2360\n","Epoch 6: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 440ms/step - loss: 0.2392 - val_loss: 1.4029\n","Epoch 7/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 448ms/step - loss: 0.2283\n","Epoch 7: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 482ms/step - loss: 0.2294 - val_loss: 2.8280\n","Epoch 8/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 408ms/step - loss: 0.1993\n","Epoch 8: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 455ms/step - loss: 0.1969 - val_loss: 2.2031\n","Epoch 9/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - loss: 0.0974\n","Epoch 9: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 446ms/step - loss: 0.0976 - val_loss: 2.3678\n","Epoch 10/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 434ms/step - loss: 0.0805\n","Epoch 10: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 515ms/step - loss: 0.0795 - val_loss: 2.6869\n","Epoch 11/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 404ms/step - loss: 0.0616\n","Epoch 11: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 451ms/step - loss: 0.0611 - val_loss: 1.8060\n","Epoch 12/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 410ms/step - loss: 0.0379\n","Epoch 12: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 446ms/step - loss: 0.0415 - val_loss: 1.5655\n","Epoch 13/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 398ms/step - loss: 0.0604\n","Epoch 13: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 433ms/step - loss: 0.0619 - val_loss: 1.2502\n","Epoch 14/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 450ms/step - loss: 0.0851\n","Epoch 14: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 490ms/step - loss: 0.0872 - val_loss: 0.9752\n","Epoch 15/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 400ms/step - loss: 0.1042\n","Epoch 15: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 445ms/step - loss: 0.1021 - val_loss: 1.1837\n","Epoch 16/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 399ms/step - loss: 0.0212\n","Epoch 16: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 436ms/step - loss: 0.0215 - val_loss: 0.8658\n","Epoch 17/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 392ms/step - loss: 0.0265\n","Epoch 17: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 428ms/step - loss: 0.0277 - val_loss: 1.2108\n","Epoch 18/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 473ms/step - loss: 0.0720\n","Epoch 18: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 511ms/step - loss: 0.0740 - val_loss: 0.9217\n","Epoch 19/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 402ms/step - loss: 0.1122\n","Epoch 19: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 450ms/step - loss: 0.1125 - val_loss: 0.9341\n","Epoch 20/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 422ms/step - loss: 0.0950\n","Epoch 20: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 458ms/step - loss: 0.0967 - val_loss: 0.7806\n","Epoch 21/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 496ms/step - loss: 0.0362\n","Epoch 21: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 532ms/step - loss: 0.0365 - val_loss: 0.6807\n","Epoch 22/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 524ms/step - loss: 0.0399\n","Epoch 22: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 561ms/step - loss: 0.0416 - val_loss: 0.7311\n","Epoch 23/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 405ms/step - loss: 0.0386\n","Epoch 23: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 442ms/step - loss: 0.0385 - val_loss: 1.0335\n","Epoch 24/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 419ms/step - loss: 0.0410\n","Epoch 24: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 456ms/step - loss: 0.0401 - val_loss: 0.7963\n","Epoch 25/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 495ms/step - loss: 0.0136\n","Epoch 25: val_loss did not improve from 0.59360\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 531ms/step - loss: 0.0152 - val_loss: 0.9276\n","Epoch 26/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 525ms/step - loss: 0.0309\n","Epoch 26: val_loss improved from 0.59360 to 0.58340, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 696ms/step - loss: 0.0314 - val_loss: 0.5834\n","Epoch 27/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 406ms/step - loss: 0.0104\n","Epoch 27: val_loss did not improve from 0.58340\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 443ms/step - loss: 0.0103 - val_loss: 0.5927\n","Epoch 28/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 406ms/step - loss: 0.0107\n","Epoch 28: val_loss did not improve from 0.58340\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 441ms/step - loss: 0.0110 - val_loss: 0.9977\n","Epoch 29/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 461ms/step - loss: 0.0136\n","Epoch 29: val_loss did not improve from 0.58340\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 497ms/step - loss: 0.0137 - val_loss: 1.0170\n","Epoch 30/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 400ms/step - loss: 0.0175\n","Epoch 30: val_loss did not improve from 0.58340\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 445ms/step - loss: 0.0175 - val_loss: 1.2335\n","Epoch 31/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 394ms/step - loss: 0.0613\n","Epoch 31: val_loss did not improve from 0.58340\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 428ms/step - loss: 0.0605 - val_loss: 1.0820\n","Epoch 32/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 400ms/step - loss: 0.0578\n","Epoch 32: val_loss did not improve from 0.58340\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 437ms/step - loss: 0.0577 - val_loss: 0.9451\n","Epoch 33/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 478ms/step - loss: 0.0570\n","Epoch 33: val_loss did not improve from 0.58340\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 512ms/step - loss: 0.0586 - val_loss: 0.7722\n","Epoch 34/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 515ms/step - loss: 0.0742\n","Epoch 34: val_loss did not improve from 0.58340\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 550ms/step - loss: 0.0779 - val_loss: 1.9163\n","Epoch 35/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 398ms/step - loss: 0.2196\n","Epoch 35: val_loss improved from 0.58340 to 0.57800, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 845ms/step - loss: 0.2174 - val_loss: 0.5780\n","Epoch 36/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 456ms/step - loss: 0.0718\n","Epoch 36: val_loss did not improve from 0.57800\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 492ms/step - loss: 0.0717 - val_loss: 0.9573\n","Epoch 37/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 409ms/step - loss: 0.0433\n","Epoch 37: val_loss did not improve from 0.57800\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 449ms/step - loss: 0.0432 - val_loss: 0.7595\n","Epoch 38/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 422ms/step - loss: 0.0160\n","Epoch 38: val_loss improved from 0.57800 to 0.54981, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 784ms/step - loss: 0.0161 - val_loss: 0.5498\n","Epoch 39/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 407ms/step - loss: 0.0074\n","Epoch 39: val_loss did not improve from 0.54981\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m17s\u001b[0m 440ms/step - loss: 0.0075 - val_loss: 0.6464\n","Epoch 40/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 439ms/step - loss: 0.0087\n","Epoch 40: val_loss did not improve from 0.54981\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 486ms/step - loss: 0.0087 - val_loss: 0.7541\n","Epoch 41/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 401ms/step - loss: 0.0380\n","Epoch 41: val_loss improved from 0.54981 to 0.49013, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 631ms/step - loss: 0.0379 - val_loss: 0.4901\n","Epoch 42/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 389ms/step - loss: 0.0068\n","Epoch 42: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 435ms/step - loss: 0.0068 - val_loss: 0.7573\n","Epoch 43/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 401ms/step - loss: 0.0165\n","Epoch 43: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 435ms/step - loss: 0.0168 - val_loss: 0.8644\n","Epoch 44/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 410ms/step - loss: 0.0334\n","Epoch 44: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 446ms/step - loss: 0.0328 - val_loss: 0.8118\n","Epoch 45/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 418ms/step - loss: 0.0244\n","Epoch 45: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 499ms/step - loss: 0.0245 - val_loss: 0.7184\n","Epoch 46/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 402ms/step - loss: 0.0174\n","Epoch 46: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 448ms/step - loss: 0.0174 - val_loss: 0.5989\n","Epoch 47/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 402ms/step - loss: 0.0186\n","Epoch 47: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 437ms/step - loss: 0.0213 - val_loss: 0.8229\n","Epoch 48/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 522ms/step - loss: 0.0644\n","Epoch 48: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 560ms/step - loss: 0.0668 - val_loss: 0.8092\n","Epoch 49/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - loss: 0.0765\n","Epoch 49: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 442ms/step - loss: 0.0756 - val_loss: 1.0609\n","Epoch 50/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 514ms/step - loss: 0.0644\n","Epoch 50: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 551ms/step - loss: 0.0633 - val_loss: 1.0890\n","Epoch 51/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 394ms/step - loss: 0.0370\n","Epoch 51: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 427ms/step - loss: 0.0371 - val_loss: 0.8504\n","Epoch 52/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 517ms/step - loss: 0.0486\n","Epoch 52: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 554ms/step - loss: 0.0486 - val_loss: 0.8595\n","Epoch 53/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 445ms/step - loss: 0.0300\n","Epoch 53: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 487ms/step - loss: 0.0300 - val_loss: 0.8570\n","Epoch 54/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 405ms/step - loss: 0.0122\n","Epoch 54: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 440ms/step - loss: 0.0125 - val_loss: 0.6016\n","Epoch 55/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 413ms/step - loss: 0.0036\n","Epoch 55: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 494ms/step - loss: 0.0038 - val_loss: 0.5799\n","Epoch 56/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 402ms/step - loss: 0.0235\n","Epoch 56: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 482ms/step - loss: 0.0231 - val_loss: 0.6453\n","Epoch 57/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 395ms/step - loss: 0.0316\n","Epoch 57: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 429ms/step - loss: 0.0307 - val_loss: 0.7606\n","Epoch 58/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 498ms/step - loss: 0.0023\n","Epoch 58: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 533ms/step - loss: 0.0024 - val_loss: 0.7364\n","Epoch 59/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 410ms/step - loss: 0.0108\n","Epoch 59: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 490ms/step - loss: 0.0106 - val_loss: 0.7967\n","Epoch 60/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 394ms/step - loss: 0.0051\n","Epoch 60: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 430ms/step - loss: 0.0052 - val_loss: 0.8338\n","Epoch 61/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 399ms/step - loss: 0.0071\n","Epoch 61: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 433ms/step - loss: 0.0070 - val_loss: 0.7018\n","Epoch 62/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 896ms/step - loss: 0.0013\n","Epoch 62: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 932ms/step - loss: 0.0014 - val_loss: 0.6802\n","Epoch 63/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 440ms/step - loss: 0.0068\n","Epoch 63: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 474ms/step - loss: 0.0066 - val_loss: 0.7578\n","Epoch 64/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 402ms/step - loss: 7.1336e-04\n","Epoch 64: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 447ms/step - loss: 7.5691e-04 - val_loss: 0.6882\n","Epoch 65/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 423ms/step - loss: 0.0029\n","Epoch 65: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 455ms/step - loss: 0.0029 - val_loss: 0.6976\n","Epoch 66/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 514ms/step - loss: 0.0012\n","Epoch 66: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 551ms/step - loss: 0.0014 - val_loss: 0.7279\n","Epoch 67/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 390ms/step - loss: 7.5879e-04\n","Epoch 67: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 431ms/step - loss: 8.0975e-04 - val_loss: 1.0612\n","Epoch 68/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 448ms/step - loss: 0.0070\n","Epoch 68: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 484ms/step - loss: 0.0074 - val_loss: 0.7254\n","Epoch 69/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 393ms/step - loss: 0.0361\n","Epoch 69: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 437ms/step - loss: 0.0376 - val_loss: 1.4820\n","Epoch 70/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 388ms/step - loss: 0.0502\n","Epoch 70: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 424ms/step - loss: 0.0503 - val_loss: 1.2689\n","Epoch 71/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 422ms/step - loss: 0.0270\n","Epoch 71: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 456ms/step - loss: 0.0272 - val_loss: 0.7803\n","Epoch 72/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 465ms/step - loss: 0.0170\n","Epoch 72: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 501ms/step - loss: 0.0171 - val_loss: 0.8264\n","Epoch 73/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 399ms/step - loss: 0.0080\n","Epoch 73: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 445ms/step - loss: 0.0082 - val_loss: 0.7841\n","Epoch 74/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 403ms/step - loss: 0.0057\n","Epoch 74: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 442ms/step - loss: 0.0078 - val_loss: 0.8690\n","Epoch 75/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 480ms/step - loss: 0.0175\n","Epoch 75: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 517ms/step - loss: 0.0181 - val_loss: 0.9779\n","Epoch 76/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 391ms/step - loss: 0.0450\n","Epoch 76: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 433ms/step - loss: 0.0484 - val_loss: 0.9546\n","Epoch 77/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 399ms/step - loss: 0.1535\n","Epoch 77: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 433ms/step - loss: 0.1525 - val_loss: 1.0242\n","Epoch 78/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 402ms/step - loss: 0.0591\n","Epoch 78: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 439ms/step - loss: 0.0586 - val_loss: 0.8902\n","Epoch 79/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 471ms/step - loss: 0.0205\n","Epoch 79: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 511ms/step - loss: 0.0206 - val_loss: 0.9792\n","Epoch 80/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 500ms/step - loss: 0.0356\n","Epoch 80: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 535ms/step - loss: 0.0347 - val_loss: 1.0115\n","Epoch 81/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 399ms/step - loss: 0.0131\n","Epoch 81: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 436ms/step - loss: 0.0128 - val_loss: 1.1745\n","Epoch 82/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 504ms/step - loss: 0.0071\n","Epoch 82: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 540ms/step - loss: 0.0073 - val_loss: 1.0576\n","Epoch 83/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 490ms/step - loss: 0.0126\n","Epoch 83: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 523ms/step - loss: 0.0132 - val_loss: 0.9673\n","Epoch 84/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 395ms/step - loss: 0.0162\n","Epoch 84: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 440ms/step - loss: 0.0161 - val_loss: 1.5062\n","Epoch 85/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 416ms/step - loss: 0.0308\n","Epoch 85: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 451ms/step - loss: 0.0300 - val_loss: 1.1049\n","Epoch 86/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 477ms/step - loss: 0.0060\n","Epoch 86: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 512ms/step - loss: 0.0059 - val_loss: 0.8522\n","Epoch 87/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 518ms/step - loss: 0.0014\n","Epoch 87: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 554ms/step - loss: 0.0014 - val_loss: 0.8185\n","Epoch 88/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 386ms/step - loss: 5.5276e-04\n","Epoch 88: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 420ms/step - loss: 5.5887e-04 - val_loss: 0.8121\n","Epoch 89/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 516ms/step - loss: 0.0023\n","Epoch 89: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 551ms/step - loss: 0.0023 - val_loss: 0.8607\n","Epoch 90/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 411ms/step - loss: 0.0033\n","Epoch 90: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 492ms/step - loss: 0.0033 - val_loss: 0.8572\n","Epoch 91/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 404ms/step - loss: 0.0450\n","Epoch 91: val_loss did not improve from 0.49013\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 444ms/step - loss: 0.0448 - val_loss: 0.9800\n"]}],"source":["from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n","\n","model.load_weights(\"best_model_warmup.keras\")\n","\n","for layer in base_model.layers:\n","    layer.trainable = True\n","\n","model.compile(optimizer=Adam(learning_rate=0.0001), loss='binary_crossentropy')\n","\n","checkpoint_finetune_path = \"best_model_finetune.keras\"\n","checkpoint_finetune = ModelCheckpoint(\n","    checkpoint_finetune_path,\n","    save_best_only=True,\n","    monitor=\"val_loss\",\n","    mode='min',\n","    verbose=1\n",")\n","early_stopping = EarlyStopping(\n","    monitor='val_loss',\n","    patience=50,\n","    restore_best_weights=True,\n","    mode='min'\n",")\n","\n","print(\"Inicio de Fine-Tuning Training...\\n\")\n","history_finetune = model.fit(\n","    train_data,\n","    validation_data=valid_data,\n","    epochs=200,\n","    callbacks=[checkpoint_finetune, early_stopping],\n","    class_weight=class_weights\n",")"]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.metrics import precision_score, recall_score, f1_score, classification_report, roc_auc_score\n","import matplotlib.pyplot as plt\n","\n","predictions_test = model.predict(test_data)\n","y_test = test_data.classes\n","\n","thresholds = np.arange(0.1, 1.0, 0.1)\n","best_threshold = 0.5\n","best_f1 = 0\n","\n","for threshold in thresholds:\n","    predicted_classes_test = (predictions_test >= threshold).astype(int)\n","    f1 = f1_score(y_test, predicted_classes_test)\n","    precision = precision_score(y_test, predicted_classes_test)\n","    recall = recall_score(y_test, predicted_classes_test)\n","\n","    print(f'Threshold: {threshold:.2f}')\n","    print(f'Precision: {precision:.4f}, Recall: {recall:.4f}, F1 Score: {f1:.4f}\\n')\n","\n","    if f1 > best_f1:\n","        best_f1 = f1\n","        best_threshold = threshold\n","\n","print(f'Mejor threshold: {best_threshold} con F1 Score: {best_f1}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nf_qfjXzKUxF","executionInfo":{"status":"ok","timestamp":1732034912817,"user_tz":300,"elapsed":14265,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"b0b9ad51-c9de-4765-c5a6-730db35f0e06"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 4s/step\n","Threshold: 0.10\n","Precision: 0.2414, Recall: 0.4118, F1 Score: 0.3043\n","\n","Threshold: 0.20\n","Precision: 0.2800, Recall: 0.4118, F1 Score: 0.3333\n","\n","Threshold: 0.30\n","Precision: 0.3043, Recall: 0.4118, F1 Score: 0.3500\n","\n","Threshold: 0.40\n","Precision: 0.2857, Recall: 0.3529, F1 Score: 0.3158\n","\n","Threshold: 0.50\n","Precision: 0.2857, Recall: 0.3529, F1 Score: 0.3158\n","\n","Threshold: 0.60\n","Precision: 0.3000, Recall: 0.3529, F1 Score: 0.3243\n","\n","Threshold: 0.70\n","Precision: 0.3000, Recall: 0.3529, F1 Score: 0.3243\n","\n","Threshold: 0.80\n","Precision: 0.3333, Recall: 0.3529, F1 Score: 0.3429\n","\n","Threshold: 0.90\n","Precision: 0.3750, Recall: 0.3529, F1 Score: 0.3636\n","\n","Mejor threshold: 0.9 con F1 Score: 0.36363636363636365\n"]}]},{"cell_type":"code","source":["precisions = []\n","recalls = []\n","f1_scores = []\n","\n","for threshold in thresholds:\n","    predicted_classes_test = (predictions_test >= threshold).astype(int)\n","    precisions.append(precision_score(y_test, predicted_classes_test))\n","    recalls.append(recall_score(y_test, predicted_classes_test))\n","    f1_scores.append(f1_score(y_test, predicted_classes_test))\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(thresholds, precisions, label='Precision')\n","plt.plot(thresholds, recalls, label='Recall')\n","plt.plot(thresholds, f1_scores, label='F1 Score')\n","plt.xlabel('Threshold')\n","plt.ylabel('Metric Value')\n","plt.title('Metrics vs. Threshold')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"6lvmLbEKKUp7","executionInfo":{"status":"ok","timestamp":1732034916563,"user_tz":300,"elapsed":587,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"6245b217-64d4-40c1-f442-1e9cffa7634c"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA18AAAIjCAYAAAD80aFnAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAACz7ElEQVR4nOzdd3QUddvG8e9uekJCCBBCDxB6C4Qi0nuxoI8gSO8ggggoglhAUYrSu9JBBMUOCNKLIj00IfReQg/pm+y+f+Qlj3kASSCbSbk+5+SczexvZ675ZQl7Z2buMdlsNhsiIiIiIiJiV2ajA4iIiIiIiGQFKr5ERERERETSgIovERERERGRNKDiS0REREREJA2o+BIREREREUkDKr5ERERERETSgIovERERERGRNKDiS0REREREJA2o+BIREREREUkDKr5ERMQwCxYswGQycfbsWaOjGO7+XOzZs8foKIB98nTp0gV/f//Hjjt79iwmk4kFCxak2rZFRNIDFV8iIlnA/Q/SJpOJ7du3P/C8zWajYMGCmEwmnn/++SfaxowZM/Rh+R/uFxDJ+VLxKSKSNTgaHUBERNKOq6srS5cupVatWkmWb9myhYsXL+Li4vLE654xYwa5cuWiS5cuyX5Nx44dadu27VNtN73KnTs3ixcvTrJs/PjxXLx4kYkTJz4wVkREMj8VXyIiWUiLFi347rvvmDJlCo6O//0vYOnSpQQFBXHjxo00yREREYGHhwcODg44ODikyTbTmoeHBx06dEiybNmyZdy+ffuB5U/LZrMRHR2Nm5tbqq5XRERSl047FBHJQl577TVu3rzJunXrEpfFxsayYsUK2rVr99DXWK1WJk2aRNmyZXF1dSVPnjz07t2b27dvJ47x9/fnyJEjbNmyJfFUunr16gH/PeVxy5Yt9O3bF19fXwoUKJDkuf897e63336jbt26eHp64uXlRdWqVVm6dGni8ydOnOCVV17Bz88PV1dXChQoQNu2bbl79+4j971fv35ky5aNyMjIh86Ln58f8fHxAOzZs4emTZuSK1cu3NzcKFKkCN26dfv3yU0lMTExDBo0iNy5c+Ph4cHLL7/M9evXk4zx9/fn+eefZ+3atVSpUgU3Nzdmz54NwJ07d3jrrbcoWLAgLi4uBAQEMHbsWKxWa5J1LFu2jKCgoMQ5Ll++PJMnT36iPJBw5LNs2bK4uLiQL18+3njjDe7cufPY/b1z5w5dunQhe/bseHt707lz52S9TkQkI9KRLxGRLMTf358aNWrwzTff0Lx5cyCh0Ll79y5t27ZlypQpD7ymd+/eLFiwgK5du/Lmm29y5swZpk2bxv79+/njjz9wcnJi0qRJ9O/fn2zZsjF8+HAA8uTJk2Q9ffv2JXfu3Hz44YdEREQ8MuOCBQvo1q0bZcuWZdiwYXh7e7N//37WrFlDu3btiI2NpWnTpsTExNC/f3/8/Py4dOkSK1eu5M6dO2TPnv2h623Tpg3Tp09n1apVtG7dOnF5ZGQkv/76K126dMHBwYHQ0FCaNGlC7ty5GTp0KN7e3pw9e5YffvghxfP9JPr370+OHDn46KOPOHv2LJMmTaJfv34sX748ybiQkBBee+01evfuTc+ePSlZsiSRkZHUrVuXS5cu0bt3bwoVKsSff/7JsGHDuHLlCpMmTQJg3bp1vPbaazRs2JCxY8cCcPToUf744w8GDBiQ4jwjRoxg5MiRNGrUiNdff52QkBBmzpzJ7t27E98jD2Oz2WjZsiXbt2+nT58+lC5dmh9//JHOnTun4oyKiKQjNhERyfTmz59vA2y7d++2TZs2zebp6WmLjIy02Ww2W+vWrW3169e32Ww2W+HChW3PPfdc4uu2bdtmA2xff/11kvWtWbPmgeVly5a11a1b95HbrlWrli0uLu6hz505c8Zms9lsd+7csXl6etqqV69ui4qKSjLWarXabDabbf/+/TbA9t1336VoDqxWqy1//vy2V155Jcnyb7/91gbYtm7darPZbLYff/wxca5S23PPPWcrXLjwQ5+7PxeNGjVK3FebzWYbOHCgzcHBwXbnzp3EZYULF7YBtjVr1iRZxyeffGLz8PCwHT9+PMnyoUOH2hwcHGznz5+32Ww224ABA2xeXl4P/DyeJE9oaKjN2dnZ1qRJE1t8fHziuGnTptkA27x58xKXde7cOcn+//TTTzbANm7cuMRlcXFxttq1a9sA2/z58x+ZT0QkI9JphyIiWcyrr75KVFQUK1eu5N69e6xcufKRpxx+9913ZM+encaNG3Pjxo3Er6CgILJly8amTZuSvd2ePXs+9vqudevWce/ePYYOHYqrq2uS50wmE0Dika21a9c+9BTCRzGZTLRu3ZrVq1cTHh6euHz58uXkz58/sQmJt7c3ACtXrsRisSR7/amlV69eifsKULt2beLj4zl37lyScUWKFKFp06ZJln333XfUrl2bHDlyJPl5NWrUiPj4eLZu3Qok7GNERESS00+fNM/69euJjY3lrbfewmz+78eKnj174uXlxapVqx657tWrV+Po6Mjrr7+euMzBwYH+/fs/NpeISEak4ktEJIvJnTs3jRo1YunSpfzwww/Ex8fTqlWrh449ceIEd+/exdfXl9y5cyf5Cg8PJzQ0NNnbLVKkyGPHnDp1CoBy5cr963oGDRrEnDlzyJUrF02bNmX69On/er3XfW3atCEqKopffvkFgPDwcFavXk3r1q0TC4y6devyyiuvMHLkSHLlykXLli2ZP38+MTExydnNp1aoUKEk3+fIkQMgyTV28PD5PHHiBGvWrHngZ9WoUSOAxJ9X3759KVGiBM2bN6dAgQJ069aNNWvWPFGe+0VYyZIlk4xzdnamaNGiDxSN/3Tu3Dny5s1LtmzZkiz/33WJiGQWuuZLRCQLateuHT179uTq1as0b9488WjP/7Jarfj6+vL1118/9PmUtEhPzU5848ePp0uXLvz888/8/vvvvPnmm4wePZq//vorsZnHwzzzzDP4+/vz7bff0q5dO3799VeioqJo06ZN4hiTycSKFSv466+/+PXXX1m7di3dunVj/Pjx/PXXXw8UCqntUUcHbTZbku8fNp9Wq5XGjRszZMiQh66jRIkSAPj6+hIcHMzatWv57bff+O2335g/fz6dOnVi4cKFT5RHREQeT8WXiEgW9PLLL9O7d2/++uuvBxo5/FOxYsVYv349NWvWfGzx9M9T055UsWLFADh8+DABAQH/OrZ8+fKUL1+e999/nz///JOaNWsya9YsRo0a9a+ve/XVV5k8eTJhYWEsX74cf39/nnnmmQfGPfPMMzzzzDN8+umnLF26lPbt27Ns2TJ69Ojx5DtoZ8WKFSM8PDzxSNe/cXZ25oUXXuCFF17AarXSt29fZs+ezQcffPDYuf+nwoULAwkNQIoWLZq4PDY2ljNnzvxrlsKFC7NhwwbCw8OTFLUhISHJ3r6ISEai0w5FRLKgbNmyMXPmTEaMGMELL7zwyHGvvvoq8fHxfPLJJw88FxcXl6QluIeHx1O3CG/SpAmenp6MHj2a6OjoJM/dP9ISFhZGXFxckufKly+P2WxO1qmBbdq0ISYmhoULF7JmzRpeffXVJM/fvn37gaM6gYGBAEnWf+rUqcTTJNOLV199lR07drB27doHnrtz507ivN28eTPJc2azmQoVKgCk+PTKRo0a4ezszJQpU5LM29y5c7l79y7PPffcI1/bokUL4uLimDlzZuKy+Ph4pk6dmqIMIiIZhY58iYhkUclp5123bl169+7N6NGjCQ4OpkmTJjg5OXHixAm+++47Jk+enHi9WFBQEDNnzmTUqFEEBATg6+tLgwYNUpTJy8uLiRMn0qNHD6pWrUq7du3IkSMHBw4cIDIykoULF7Jx40b69etH69atKVGiBHFxcSxevBgHBwdeeeWVx26jcuXKBAQEMHz4cGJiYpKccgiwcOFCZsyYwcsvv0yxYsW4d+8eX331FV5eXrRo0SJxXMOGDQEeuEeZkd555x1++eUXnn/+ebp06UJQUBAREREcOnSIFStWcPbsWXLlykWPHj24desWDRo0oECBApw7d46pU6cSGBhI6dKlU7TN3LlzM2zYMEaOHEmzZs148cUXCQkJYcaMGVStWvVfbyj9wgsvULNmTYYOHcrZs2cpU6YMP/zwQ7Ku3xMRyYhUfImIyL+aNWsWQUFBzJ49m/feew9HR0f8/f3p0KEDNWvWTBz34Ycfcu7cOcaNG8e9e/eoW7duiosvgO7du+Pr68uYMWP45JNPcHJyolSpUgwcOBCAihUr0rRpU3799VcuXbqEu7s7FStW5Lfffnvo6YMP06ZNGz799FMCAgKoXLlykufq1q3Lrl27WLZsGdeuXSN79uxUq1aNr7/+OllNQ4zk7u7Oli1b+Oyzz/juu+9YtGgRXl5elChRgpEjRyZ2iuzQoQNffvklM2bM4M6dO/j5+dGmTRtGjBiRpGNhco0YMYLcuXMzbdo0Bg4ciI+PD7169eKzzz575D2+IOGI2y+//MJbb73FkiVLMJlMvPjii4wfP55KlSo98TyIiKRXJpuumBUREREREbE7XfMlIiIiIiKSBlR8iYiIiIiIpAEVXyIiIiIiImlAxZeIiIiIiEgaUPElIiIiIiKSBlR8iYiIiIiIpAHd5+sJWa1WLl++jKenJyaTyeg4IiIiIiJiEJvNxr1798iXL9+/3i9RxdcTunz5MgULFjQ6hoiIiIiIpBMXLlygQIECj3xexdcT8vT0BBIm2MvLy9AsFouF33//nSZNmuDk5GRolsxI82tfml/70vzal+bXvjS/9qX5tS/Nr32lt/kNCwujYMGCiTXCo6j4ekL3TzX08vJKF8WXu7s7Xl5e6eLNl9lofu1L82tfml/70vzal+bXvjS/9qX5ta/0Or+PuxxJDTdERERERETSgIovERERERGRNKDiS0REREREJA3omi8RERERkTRks9mIi4sjPj7e6CgZlsViwdHRkejo6DSZRwcHBxwdHZ/6FlMqvkRERERE0khsbCxXrlwhMjLS6CgZms1mw8/PjwsXLqTZPXfd3d3Jmzcvzs7OT7wOFV8iIiIiImnAarVy5swZHBwcyJcvH87OzmlWOGQ2VquV8PBwsmXL9q83NU4NNpuN2NhYrl+/zpkzZyhevPgTb1PFl4iIiIhIGoiNjcVqtVKwYEHc3d2NjpOhWa1WYmNjcXV1tXvxBeDm5oaTkxPnzp1L3O6TUMMNEREREZE0lBbFgqS+1Pi56ScvIiIiIiKSBlR8iYiIiIiIpAEVXyIiIiIiku6YTCZ++umnVB9rJBVfIiIiIiLyr7p06YLJZMJkMuHs7ExAQAAff/wxcXFxdtvmlStXaN68eaqPNZK6HYqIiIiIyGM1a9aM+fPnExMTw+rVq3njjTdwcnJi2LBhScbFxsY+1b2w7vPz87PLWCPpyJeIiIiIiAFsNhuRsXGGfNlsthTndXFxwc/Pj8KFC/P666/TqFEjfvnlF7p06cJLL73Ep59+Sr58+ShZsiQAFy5c4NVXX8Xb2xsfHx9atmzJ2bNnk6xz3rx5lC1bFhcXF/LmzUu/fv0Sn/vnqYSxsbH069ePvHnz4urqSpEiRZgwYcJDxwIcOnSIBg0a4ObmRs6cOenVqxfh4eGJz9/P/MUXX5A3b15y5szJG2+8gcViSfG8pISOfImIiIiIGCDKEk+ZD9casu2/P26Ku/PTlQJubm7cvHkTgA0bNuDl5cW6desAsFgsNG3alBo1arBt2zYcHR0ZNWoUzZo14+DBgzg7OzNz5kwGDRrEmDFjaN68OXfv3uWPP/546LamTJnCL7/8wrfffkuhQoU4d+4cx48ff+jYiIiIxG3v3r2b0NBQevToQb9+/ViwYEHiuE2bNpE3b142bdrEyZMnadOmDYGBgfTs2fOp5uXfqPgSEREREZFks9lsbNiwgbVr19K/f3+uX7+Oh4cHc+bMSTzdcMmSJVitVubMmYPJZAJg/vz5eHt7s3nzZpo0acKoUaMYPHgwAwYMSFx31apVH7rN8+fPU7x4cWrVqoXJZKJgwYJUqFDhoWOXLl1KdHQ0ixYtwsPDA4Bp06bxwgsvMHbsWPLkyQNAjhw5mDZtGg4ODpQqVYrnnnuODRs2qPiSfxEdhunEBvLe2YvpmBUcHIxOlOmY4uM1v3Zkio8nW/RVo2OIiIikOTcnB/7+uKlh206plStXki1bNiwWC1arlXbt2jFixAjeeOMNypcvn+Q6rwMHDnDy5Ek8PT2TrCM6OppTp04RGhrK5cuXadiwYbK23aVLFxo3bkzJkiVp1qwZLVq04Jlnnnno2KNHj1KxYsXEwgugZs2aWK1WQkJCEouvsmXL4vCPz3Z58+bl0KFDyZ6PJ6HiK6O7dwXH77tQDeCM0WEyJ0fQ/NqRI1DX5IztdkPwLWF0HBERkTRjMpme+tS/tFS/fn1mzpyJs7Mz+fLlw9Hxv9n/WegAhIeHExQUxNdff/3AenLnzo3ZnLLWE5UrV+bMmTP89ttvrF+/nrZt21K3bl1+/PHHJ9sZwMnJKcn3JpMJq9X6xOtLjozz05aHc3TFWqA6t2/fIkcOH8z/f1hXUo/VZtP82pHt7gUcwy5hXTsMOqwAzbGIiEi65OHhQUBAQLLGVq5cmeXLl+Pr64uXl9dDx/j7+7Nhwwbq16+frHV6eXnRpk0b2rRpw3/+8x9atGjBrVu3yJUrV5JxpUuXZsGCBURERCQWhX/88QdmszmxGYhRVHxldDkKE995FdtXr6ZFixaY/6eCl6cXb7Fofu0o7urfOMyuhfnUeji2Ekq/YHQkEREReUrt27fn888/p2XLlnz88ccUKFCAc+fO8cMPPzBkyBAKFCjAiBEj6NOnD76+vjRv3px79+7xxx9/0L9//wfWN2HCBPLmzUulSpUwm82sWLGCPHny4O3t/dBtf/TRR3Tu3JkRI0Zw/fp1+vfvT8eOHRNPOTSKWs2LiLFyFuekb4uEx78NhdgIY/OIiIjIU3N3d2fr1q0UKlSI//znP5QuXZru3bsTHR2deCSsc+fOTJo0iRkzZlC2bFmef/55Tpw48dD1eXp6Mm7cOKpUqULVqlU5d+4c33777UNPX3R3d2ft2rXcunWLqlWr0qpVKxo2bMi0adPsus/JoSNfImK4434vUjw6GNPdC7BlHDQeaXQkERER+Yd/tmhP7nN+fn4sXLjwX9fbu3dvevfu/dDn/nkvsp49eybpQmi1WgkLC3voWIDy5cuzcePGFGWeNGnSv2ZNDTryJSKGize7EN/ks4RvdkyD6yHGBhIRERGxAxVfIpIu2Eo0hxLNwBoHqwbD//wFS0RERCSjU/ElIulH87Hg6Apnt8GhFUanEREREUlVKr5EJP3I4Q+13054/PtwiL5raBwRERGR1KTiS0TSl5pvgk8xCL8Gmz4zOo2IiIhIqlHxJSLpi6MLPPdFwuNdX8KVg8bmEREREUklKr5EJP0p1gDKvgw2K6waBFar0YlEREREnpqKLxFJn5p+Bs7Z4OJuCF5idBoRERGRp6biS0TSJ698UG9YwuN1H0HkLWPziIiIiDwlFV8ikn5V7w2+ZSDqFqwfYXQaERERMZDJZOKnn34C4OzZs+TIkYPg4GBDM6WUii8RSb8cnOC5CQmP9y2EC7uNzSMiIpJFdenSBZPJhMlkwsnJiSJFijBkyBCio6ONjpahqPgSkfStcA2o2C7h8apBEB9nbB4REZEsqlmzZly5coXTp08zceJEZs+ezUcffWR0rAxFxZeIpH+NPwbX7HD1IOyZa3QaERGR1GGzQWyEMV82W4rjuri44OfnR8GCBXnppZdo1KgR69atA8BqtTJ69GiKFCmCm5sbFStWZMWKFUlef+TIEZ5//nm8vLzw9PSkdu3anDp1CoDdu3fTuHFjcuXKRfbs2albty779u17+jlOZxyNDiAi8ljZckPDD2HVYNg4Csq8BJ55jE4lIiLydCyR8Fk+Y7b93mVw9njilx8+fJg///yTwoULAzB69GiWLFnCrFmzKF68OFu3bqVDhw7kzp2bunXrcunSJerUqUO9evXYuHEjXl5e/PHHH8TFJZzRcu/ePTp37szUqVOx2WyMHz+eFi1acOLECTw9PVNll9MDFV8ikjEEdYX9S+Dyfvj9fXjlK6MTiYiIZCkrV64kW7ZsxMXFERMTg9lsZtq0acTExPDZZ5+xfv16atSoAUDRokXZvn07s2fPpm7dukyfPp3s2bOzbNkynJycAChRokTiuhs0aJBkW19++SXe3t5s2bKF559/Pu120s5UfIlIxmB2SGi+8VUDOPQtVO4ERWobnUpEROTJObknHIEyatspVL9+fWbOnElERAQTJ07E0dGRV155hSNHjhAZGUnjxo2TjI+NjaVSpUoABAcHU7t27cTC639du3aN999/n82bNxMaGkp8fDyRkZGcP38+5fuWjqn4EpGMI39lqNIt4bqvVYOhz3ZwdDY6lYiIyJMxmZ7q1L+05uHhQUBAAADz5s2jYsWKzJ07l3LlygGwatUq8ufPn+Q1Li4uALi5uf3rujt37szNmzeZPHkyhQsXxsXFhRo1ahAbG2uHPTGOii8RyVgafgB//ww3QuCvGVDrLaMTiYiIZDlms5n33nuPQYMGcfz4cVxcXDh//jx169Z96PgKFSqwcOFCLBbLQ49+/fHHH8yYMYMWLVoAcOHCBW7cuGHXfTCCuh2KSMbilgOafJLweMtYuHPB2DwiIiJZVOvWrXFwcGD27Nm8/fbbDBw4kIULF3Lq1Cn27dvH1KlTWbhwIQD9+vUjLCyMtm3bsmfPHk6cOMHixYsJCQkBoHjx4ixevJijR4+yc+dO2rdv/9ijZRmRii8RyXgqvgaFaiR0iVo7zOg0IiIiWZKjoyP9+vVj3LhxDBs2jA8++IDRo0dTunRpmjVrxqpVqyhSpAgAOXPmZOPGjYSHh1O3bl2CgoL46quvEo+CzZ07l9u3b1O5cmU6duzIm2++ia+vr5G7Zxc67VBEMh6TCZ4bD7Nqw9Ff4cQ6KN748a8TERGRJ7JgwYKHLh86dChDhw4FYMCAAQwYMOCR66hQoQJr16596HOVKlVi9+7dSZa1atUqyfe2f9ybzN/fn9u3b+Pl5ZWc+OmG4Ue+pk+fjr+/P66urlSvXp1du3Yl63XLli3DZDLx0ksvJVlus9n48MMPyZs3L25ubjRq1IgTJ04kGXPr1i3at2+Pl5cX3t7edO/enfDw8NTaJRFJC3nKwjOvJzxe/TZYoozNIyIiIvIYhhZfy5cvZ9CgQXz00Ufs27ePihUr0rRpU0JDQ//1dWfPnuXtt9+mdu0H20yPGzeOKVOmMGvWLHbu3ImHhwdNmzYlOjo6cUz79u05cuQI69atY+XKlWzdupVevXql+v6JiJ3VGwqeeeH2Wdg+yeg0IiIiIv/K0OJrwoQJ9OzZk65du1KmTBlmzZqFu7s78+bNe+Rr4uPjad++PSNHjqRo0aJJnrPZbEyaNIn333+fli1bUqFCBRYtWsTly5f56aefADh69Chr1qxhzpw5VK9enVq1ajF16lSWLVvG5csG3WdBRJ6Miyc0/Szh8faJcPOUsXlERERE/oVh13zFxsayd+9ehg3778XyZrOZRo0asWPHjke+7uOPP8bX15fu3buzbdu2JM+dOXOGq1ev0qhRo8Rl2bNnp3r16uzYsYO2bduyY8cOvL29qVKlSuKYRo0aYTab2blzJy+//PJDtxsTE0NMTEzi92FhYQBYLBYsFkvKdj6V3d++0TkyK82vfT31/JZ4Hoci9TCf2Yx11TvEt12WcE2YAHr/2pvm1740v/al+bWvh82vxWLBZrNhtVqxWq1GRcsU7l//dX8+04LVasVms2GxWHBwcEjyXHL/HRlWfN24cYP4+Hjy5MmTZHmePHk4duzYQ1+zfft25s6dS3Bw8EOfv3r1auI6/ned95+7evXqA51THB0d8fHxSRzzMKNHj2bkyJEPLP/9999xd0/5HcLtYd26dUZHyNQ0v/b1NPPr4dqc+qbtOJzewJ5vPuaKd9VUTJY56P1rX5pf+9L82pfm177+Ob+Ojo74+fkRHh6e6W4ebJR79+6l2bZiY2OJiopi69atxMXFJXkuMjIyWevIMN0O7927R8eOHfnqq6/IlStXmm9/2LBhDBo0KPH7sLAwChYsSJMmTQzvsmKxWFi3bh2NGzd+6E3r5Olofu0r1eZ3cyj8MZ6qN74nrtVgcM6WeiEzML1/7Uvza1+aX/vS/NrXw+Y3OjqaCxcukC1bNlxdXQ1OmLHZbDbu3buHp6cnpjQ64yU6Oho3Nzfq1KnzwM/v/llxj2NY8ZUrVy4cHBy4du1akuXXrl3Dz8/vgfGnTp3i7NmzvPDCC4nL7h9idHR0JCQkJPF1165dI2/evEnWGRgYCICfn98DDT3i4uK4devWQ7d7n4uLCy4uLg8sd3JySje/sNJTlsxI82tfTz2/dd+GI99hunMepz8nQuOPUy9cJqD3r31pfu1L82tfml/7+uf8xsfHYzKZMJvNmM2GNx3P0O7XAffnMy2YzWZMJtND/80k99+QYT91Z2dngoKC2LBhQ+Iyq9XKhg0bqFGjxgPjS5UqxaFDhwgODk78evHFF6lfvz7BwcEULFiQIkWK4Ofnl2SdYWFh7Ny5M3GdNWrU4M6dO+zduzdxzMaNG7FarVSvXt2OeywiduXsDs0/T3i8YzqEHjU2j4iIiMj/MPS0w0GDBtG5c2eqVKlCtWrVmDRpEhEREXTt2hWATp06kT9/fkaPHo2rqyvlypVL8npvb2+AJMvfeustRo0aRfHixSlSpAgffPAB+fLlS7wf2P07bvfs2ZNZs2ZhsVjo168fbdu2JV++fGmy3yJiJyWbQckWELIaVr0NXVaq+YaIiIikG4YWX23atOH69et8+OGHXL16lcDAQNasWZPYMOP8+fMpPow4ZMgQIiIi6NWrF3fu3KFWrVqsWbMmyXmZX3/9Nf369aNhw4aYzWZeeeUVpkyZkqr7JiIGaTYGTm2Cc9vh4LdQsY3RiUREREQAg+/zBdCvXz/OnTtHTEwMO3fuTHLq3+bNm1mwYMEjX7tgwYLE+3fdZzKZ+Pjjj7l69SrR0dGsX7+eEiVKJBnj4+PD0qVLuXfvHnfv3mXevHlky6aL80UyhRyFoc7bCY9/fx+i7hgaR0REJKPr0qULJpPpga+TJ08CsHXrVl544QXy5cuHyWR64PP5w8THxzNmzBhKlSqFm5sbPj4+VK9enTlz5th5b4xlePElIpLqnu0POYtDRChs+tToNCIiIhles2bNuHLlSpKvIkWKABAREUHFihWZPn16stc3cuRIJk6cyCeffMLff//Npk2bEs9cs5f00N4/w7SaFxFJNkcXeO4LWNQSds+BwPaQL9DoVCIiIknYbDai4qIM2babo1uKWrS7uLg8sjN48+bNad68eYq2/8svv9C3b19at26duKxixYpJxlitVr744gu+/PJLLly4QJ48eejduzfDhw8H4MiRI3zwwQfs2LEDd3d3XnnlFSZMmJB4RluXLl24c+cOVatWZfr06bi4uHDmzBkuXLjA4MGD+f333zGbzdSuXZvJkyfj7++fon14Eiq+RCRzKloPyr0Ch7+HVYOh+zpQW18REUlHouKiqL7UmG7bO9vtxN3J3ZBtQ8LtnzZu3Ejfvn3JnTv3Q8cMGzaMr776iokTJ1KrVi2uXLnCsWPHgISjba1ataJGjRrs3r2b0NBQevToQb9+/ZJctrRhwwa8vLwSb3ZtsVho2rQpNWrUYNu2bTg6OjJq1CiaNWvGwYMHcXZ2tut+65OIiGReTT4FZ0+4tAf2LzI6jYiISIa1cuVKsmXLlvj1zyNWT2LChAlcv34dPz8/KlSoQJ8+ffjtt98Sn7937x6TJ09m3LhxdO7cmWLFilGrVi169OgBwNKlS4mOjmbhwoWUK1eOBg0aMG3aNBYvXpzkPsIeHh7MmTOHsmXLUrZsWZYvX47VamXOnDmUL1+e0qVLM3/+fM6fP8/mzZufap+SQ0e+RCTz8soL9d+DtcNg/Qgo9QJ45DQ6lYiICJBw6t/OdjsN23ZK1K9fn5kzZyZ+7+Hh8VTbL1OmDIcPH2bv3r388ccfiU07unTpwpw5czh69CgxMTE0bNjwoa8/duwY5cqVS5KjZs2aWK1WQkJCErunly9fPsnRrAMHDnDy5Ek8PT2TrC86OppTp0491T4lh4ovEcncqvWC4K/h2mFY/xG0nGZ0IhERESChS7eRp/6lhIeHBwEBAam6TrPZTNWqValatSpvvfUWS5YsoWPHjgwfPhw3t5QVh4/yv0VieHg4QUFBfP311w+MfdTpj6lJpx2KSObm4AjPjU94vH8xnDfmL4wiIiLy78qUKQMkXM9VvHhx3Nzc2LBhw0PHlipVisOHDxMREZG47I8//sBsNlOyZMlHbqNy5cqcOHECX19fAgICknxlz549dXfoIVR8iUjmV+gZCOyQ8HjVYIiPMzaPiIhIJhIeHk5wcDDBwcEAnDlzhuDgYM6fP//I17Rq1YqJEyeyc+dOzp07x+bNm3njjTcoUaIEpUqVwtXVlXfffZchQ4awaNEiTp06xV9//cXcuXMBaN++Pa6urnTp0oXDhw+zadMm+vfvT8eOHRNPOXyY9u3bkytXLlq2bMm2bds4c+YMmzdv5s033+TixYupOi8Po+JLRLKGxiPB1RuuHYLdXxmdRkREJNPYs2cPlSpVolKlSgAMGjSISpUq8eGHHz7yNU2bNuXXX3/lhRdeoESJEnTu3JlSpUrx+++/4+iYcGXUBx98wODBg/nwww8pXbo0bdq0ITQ0FAB3d3dWrFjB7du3qVq1Kq1ataJhw4ZMm/bvlxe4u7uzdetWChUqxH/+8x9Kly5N9+7diY6OxsvLK5Vm5NF0zZeIZA0euaDRR7ByIGz8FMq+DJ4Pv1+JiIiI/Nc/W7c/TL169bDZbClaZ8+ePenZs+e/jjGbzQwfPjzxvl7/q2zZsqxfvx7zI24l86jcfn5+LFy4MEV5U4uOfIlI1lG5M+QPgth78Pv7RqcRERGRLEbFl4hkHWaH/2++YYJD38HpLUYnEhERkSxExZeIZC35KkHVhBs0svptiIs1No+IiIhkGSq+RCTrafA+eOSGG8dhh+77JSIiImlDxZeIZD1u3tBkVMLjrZ/DnUe3whUREUltKW1OIelDavzcVHyJSNZUoQ0UrgmWSFgzzOg0IiKSBTg5OQEQGRlpcBJ5Evd/bvd/jk9CreZFJGsymaDFFzC7NhxbCcfXQommRqcSEZFMzMHBAW9v7yT3qjKZTAanypisViuxsbFER0c/stV8arHZbERGRhIaGoq3tzcODg5PvC4VXyKSdeUpA8+8Dn9OhdXvQJE64ORmdCoREcnE/PwS7jF5vwCTJ2Oz2YiKisLNzS3NClhvb+/En9+TUvElIllb3aFw6Hu4cw62T4T67xmdSEREMjGTyUTevHnx9fXFYrEYHSfDslgsbN26lTp16jzVaYDJ5eTk9FRHvO5T8SUiWZtLNmg2Gr7rnFB8VWgDOYsZnUpERDI5BweHVPkwn1U5ODgQFxeHq6trmhRfqUUNN0REyrSEYg0hPjbh9EN1oRIRERE7UPElImIyQYvPwcEZTm2Av382OpGIiIhkQiq+REQg4VTDmm8lPF4zDGLuGRpHREREMh8VXyIi99UeBN6F4d5l2DLW6DQiIiKSyaj4EhG5z8kt4fRDgL9mwrW/jc0jIiIimYqKLxGRfyrRFEo9D9Y4WP22mm+IiIhIqlHxJSLyv5qNBkc3OPcHHFxudBoRERHJJFR8iYj8L+9CUHdIwuPf34eoO4bGERERkcxBxZeIyMPU6Ae5SkDEddg4yug0IiIikgmo+BIReRhHZ2jxRcLj3XPg8n5j84iIiEiGp+JLRORRitaFcq0AG6wcBNZ4oxOJiIhIBqbiS0Tk3zT9FJw94fI+2LfQ6DQiIiKSgan4EhH5N55+0GB4wuP1IyHihrF5REREJMNS8SUi8jhVe0Ke8hB9B9Z9ZHQaERERyaBUfImIPI6DIzw/IeFx8BI4/5exeURERCRDUvElIpIcBatBpY4Jj1cNhvg4Y/OIiIhIhqPiS0QkuRqNBLcccO0w7PrS6DQiIiKSwaj4EhFJLo+c0GhEwuNNn0HYFUPjiIiISMai4ktEJCUqdYL8VSD2Hvw+3Og0IiIikoGo+BIRSQmzGZ4bDyYzHP4eTm82OpGIiIhkECq+RERSKl8gVO2R8HjV2xAXY2gcERERyRhUfImIPIn6w8HDF26egD+nGp1GREREMgAVXyIiT8LNG5qMSni89Qu4fc7QOCIiIpL+qfgSEXlSFV6FwrUgLgrWDDU6jYiIiKRzKr5ERJ6UyZTQfMPsCCGrIeQ3oxOJiIhIOqbiS0TkafiWghpvJDz+bQjERhqbR0RERNItFV8iIk+rzhDwyg93zsP2CUanERERkXRKxZeIyNNyyQbNxiQ8/mMy3DhpbB4RERFJl1R8iYikhtIvQEAjiI+F1YPBZjM6kYiIiKQzKr5ERFKDyQTNx4GDC5zeDEd+NDqRiIiIpDOGF1/Tp0/H398fV1dXqlevzq5dux459ocffqBKlSp4e3vj4eFBYGAgixcvTjLGZDI99Ovzzz9PHOPv7//A82PGjLHbPopIFpGzGNQamPB47XsQc8/YPCIiIpKuGFp8LV++nEGDBvHRRx+xb98+KlasSNOmTQkNDX3oeB8fH4YPH86OHTs4ePAgXbt2pWvXrqxduzZxzJUrV5J8zZs3D5PJxCuvvJJkXR9//HGScf3797frvopIFlHrLchRBO5dgc36o46IiIj8l6HF14QJE+jZsyddu3alTJkyzJo1C3d3d+bNm/fQ8fXq1ePll1+mdOnSFCtWjAEDBlChQgW2b9+eOMbPzy/J188//0z9+vUpWrRoknV5enomGefh4WHXfRWRLMLJDVr8/5H2v2bCtSPG5hEREcmk4jPg5dWORm04NjaWvXv3MmzYsMRlZrOZRo0asWPHjse+3mazsXHjRkJCQhg7duxDx1y7do1Vq1axcOHCB54bM2YMn3zyCYUKFaJdu3YMHDgQR8dHT0dMTAwxMTGJ34eFhQFgsViwWCyPzWtP97dvdI7MSvNrX5lyfv3r4VDyecwhK7GuHER8x18TrgkzQKac33RE82tfml/70vzal+bXvv44EcqYYAcCKt2hdD5vo+Mk++dsstmMacl1+fJl8ufPz59//kmNGjUSlw8ZMoQtW7awc+fOh77u7t275M+fn5iYGBwcHJgxYwbdunV76Nhx48YxZswYLl++jKura+LyCRMmULlyZXx8fPjzzz8ZNmwYXbt2ZcKER9+fZ8SIEYwcOfKB5UuXLsXd3T25uy0iWYRr7E0aHn0XR2ss+wr15ELO2kZHEhERyRSuRcGkQw5Expt4xtfKa8WsRkciMjKSdu3acffuXby8vB45zrAjX0/K09OT4OBgwsPD2bBhA4MGDaJo0aLUq1fvgbHz5s2jffv2SQovgEGDBiU+rlChAs7OzvTu3ZvRo0fj4uLy0O0OGzYsyevCwsIoWLAgTZo0+dcJTgsWi4V169bRuHFjnJycDM2SGWl+7Sszz68pz23Y+DGVbvxI+Vbvgpt3mmfIzPObHmh+7Uvza1+aX/vS/NrHzYhYWs/eSWR8FP7ZbMzoXg9Pd9fHv9DO7p8V9ziGFV+5cuXCwcGBa9euJVl+7do1/Pz8Hvk6s9lMQEAAAIGBgRw9epTRo0c/UHxt27aNkJAQli9f/tgs1atXJy4ujrNnz1KyZMmHjnFxcXloYebk5JRu/kGlpyyZkebXvjLl/D7bHw4ux3QjBKeto+H5Rx9dt7dMOb/piObXvjS/9qX5tS/Nb+qJtsTzxjcHuHA7igI53OhR7B6e7q7pYn6Tm8GwhhvOzs4EBQWxYcOGxGVWq5UNGzYkOQ3xcaxWa5Jrse6bO3cuQUFBVKxY8bHrCA4Oxmw24+vrm+ztiog8lqMzPDc+4fGeeXBpn7F5REREMiir1cY7Kw6y99xtPF0d+apDJTyNr7lSzNDTDgcNGkTnzp2pUqUK1apVY9KkSURERNC1a1cAOnXqRP78+Rk9ejQAo0ePpkqVKhQrVoyYmBhWr17N4sWLmTlzZpL1hoWF8d133zF+/PgHtrljxw527txJ/fr18fT0ZMeOHQwcOJAOHTqQI0cO+++0iGQtRWpD+Vfh0LewahD02ABmB6NTiYiIZCgT1x/n1wOXcTSbmN0hiADfbBw3OtQTMLT4atOmDdevX+fDDz/k6tWrBAYGsmbNGvLkyQPA+fPnMZv/e3AuIiKCvn37cvHiRdzc3ChVqhRLliyhTZs2Sda7bNkybDYbr7322gPbdHFxYdmyZYwYMYKYmBiKFCnCwIEDk1zPJSKSqpqMguNr4PJ+2LsAqnY3OpGIiEiGsWLvRaZuPAnAZ/8pz7MBuTJsF0nDG27069ePfv36PfS5zZs3J/l+1KhRjBo16rHr7NWrF7169Xroc5UrV+avv/5KcU4RkSfmmQcavA+/DYENI6H0i5Att9GpRERE0r0dp24y7IeDALxRvxivVilocKKnY+hNlkVEsowq3cGvAkTfhfUfGZ1GREQk3TsZGk7vxXuwxNt4vkJeBjd+eGO8jETFl4hIWnBwhOf+v9th8Ndw7vE3kxcREcmqbobH0G3BbsKi46hcyJsvWlfEbDYZHeupqfgSEUkrBatC5c4Jj1cNgviMeb66iIiIPUVb4um1eC/nb0VS0MeNrzpVwdUpczSrUvElIpKWGo0ANx8I/Rt2zjY6jYiISLryz5byXq6OzO9SlZzZHrzXbkal4ktEJC25+0DjkQmPN4+GsMvG5hEREUlH/tlSflaHIAJ8PY2OlKpUfImIpLXADlCgGsSGw9r3jE4jIiKSLny358IDLeUzGxVfIiJpzWyG58aDyQxHfoRTG41OJCIiYqg/T93gvR8PAZmjpfyjqPgSETFC3gpQ7f/vR7jqbYiLMTaPiIiIQU6GhtNn8d5M1VL+UVR8iYgYpf57kC0P3DoFf04xOo2IiEiay6wt5R9FxZeIiFFcs0OTTxMeb/0Cbp81NI6IiEha+mdL+UI+7pmqpfyjqPgSETFS+VbgXxviouG3oUanERERSRNWq423vzuQ2FJ+XiZrKf8oKr5ERIxkMiU03zA7wfHf4NhqoxOJiIjY3YR1x1l58EpCS/mOQQT4ZjM6UppQ8SUiYrTcJeHZfgmPf3sXYiONzSMiImJH3+25wLRNCS3lR/+nPM8Wy3wt5R9FxZeISHpQ5x3IXhDunodtXxidRkRExC7+PHWDYT8ktJTvVz+A1pm0pfyjqPgSEUkPnD2g2ZiEx39MgRsnjM0jIiKSyu63lI+zJrSUH9S4hNGR0pyKLxGR9KLUc1C8CVgtsGow2GxGJxIREUkVN8Nj6LpgF2HRcQQVzpHpW8o/ioovEZH0wmSC5uPA0RXObIEjPxidSERE5KlFW+LpuWgPF25FUcjHnS87BmX6lvKPouJLRCQ98SkCtQYlPF7zHkSHGZtHRETkKdxvKb/v/J0s1VL+UVR8iYikNzUHgE9RCL8Km8cYnUZEROSJZdWW8o+i4ktEJL1xcoUWnyc83jkLrh42No+IiMgT+NbOLeWtNmuqri8tqPgSEUmPAhpBmZZgi4dVg8Ca8f6DERGRrOvPkzd4z04t5W02GxsvbGTKvSmcuXsm1dabFlR8iYikV01Hg5MHXNgJB5YanUZERCRZToaG02dJQkv5FyrmS9WW8idvn6Tnup68ve1tblhvMPfI3FRbd1pQ8SUikl5lzw/1hiY8XvchRN4yNo+IiMhj/G9L+c9bVUiVlvJ3Y+4yeudoWv3aip1XduJsdqauS13eq/peKqROOyq+RETSs2deh9ylIfImbPjY6DQiIiKPZI+W8vHWeL4N+Zbnf3yepceWEm+Lp0HBBqx4fgWN3Rrj7uSeSunThoovEZH0zMEJnvsi4fHeBXBxr6FxREREHsYeLeX3XN1Dm5Vt+OSvT7gTc4cA7wC+bPwlkxtMpkC2AqmUPG05Gh1AREQew78WVGgLB5fBqoHQcxOYs+bNKUVEJH0avy6ElQev4ORgYnbHKk/VUv5y+GUm7J3A2rNrAfB09uSNwDdoU7INjuaMXb5k7PQiIllFk08g5De4cgD2zINqPY1OJCIiAiS0lJ++6RQAo/9TgRrFcj7ReqLioph/eD7zDs8jJj4Gs8lMq+Kt6FepHzlcc6RmZMOo+BIRyQiy+ULDD2D127Dhk4Q29Nl8jU4lIiJZ3D9byvdvEECroJSfDmiz2Vh7bi0T9kzgSsQVAILyBDG02lBK+ZRK1bxGU/ElIpJRVOkG+xcnHP1a9yG8PMvoRCIikoWdDL331C3lQ26FMGbXGPZc2wOAn4cfg6sMpmnhpphMT98lMb1R8SUiklGYHeC5CTCnERz4Bip1BP+aRqcSEZEs6EZ4DF0X7E7SUj4lxdLt6NtM2z+NFSdWYLVZcXFwoXu57nQp1wU3Rzc7JjeWii8RkYykQBUI6pzQ+XDVYOizLaEjooiISBqJtsTT6wlbysdZ41gespzpwdO5F3sPgKb+TRkcNJi82fLaM3a6oOJLRCSjafgRHP0Vrh+FnbPg2f5GJxIRkSzCarUx+P9bymd3c2J+1+S3lP/ryl+M3TWWk3dOAlAyR0nerfYuVf2q2jNyuqLiS0Qko3H3gUYj4Zd+sGk0lP0PZM9vdCoREckCxq8LYdX/t5Sf1SGIYrkf31L+4r2LfLHnCzac3wCAt4s3/Sv155Xir+CQxW6douJLRCQjCmyf0Hzjwk5Y+x68utDoRCIiksl9uztlLeUjLZHMOTSHhUcWEmuNxcHkQJuSbegb2JfsLtnTInK6o+JLRCQjMpvhufEwuw78/ROc3AABDY1OJSIimdQfJ2/w3o/Jaylvs9lYdWYVE/dMJDQqFIDqeavzbtV3KZ6jeJrkTa9UfImIZFR+5aF6H/hrRsL9v17fAU6uRqcSEZFM5p8t5V98TEv5IzePMGbnGIKvBwOQP1t+3qn6Dg0KNsiUreNTSsWXiEhGVm8YHP4Bbp2GP6dA3SFGJxIRkUzkRngMXebv5l50HFUK52DcI1rK34y6yZT9U/jxxI/YsOHm6EbP8j3pVLYTLg7Ja8iRFaj4EhHJyFy9oOmn8H132DYeyrcGnyJGpxIRkUwg2hJPz0V7uHg7isI53Zn9kJbylngLS48tZdaBWYRbwgF4ruhzDKw8kDweeYyIna6p+BIRyejKvQL7FsKZrfDbu9BuOejUDhEReQpWq43B3x5g//+3lJ/X5cGW8tsubmPc7nGcDTsLQJmcZRhWbRiBvoFpHziDUPElIpLRmUzQYjzMfBZOrIWQ1VDqOaNTiYhIBvbF7yGsOvTwlvLnws4xbvc4tl7cCoCPqw8DKg/gpYCXMJvMRkXOEFR8iYhkBrlLJNxsefuEhKNfReuBs4fRqUREJAP6dvcFZmxOaCk/5h8t5cNjw/ny4JcsPrqYOGscjiZH2pduT++KvfF09jQycoah4ktEJLOo8w4cWgF3z8PWL6DRR0YnEhGRDOafLeXfbBDAK0EFsNqs/HLqFybtncTN6JsA1MpfiyFVh1Aku64zTgkVXyIimYWzOzQfA8vawZ9ToeJr4K3/FEVEJHlOXEvaUn5g4xIcvH6QMbvGcOhGQkFW2KswQ6oOoU6BOganzZhUfImIZCYlW0CJZnB8DaweDK99b3QiERHJAK7fi6Hrgv+2lH+nhR/Dtw/n19O/AuDh5EHvCr3pULoDTg5OBqfNuFR8iYhkJiYTNB8LpzfDma2Y/v4BcDM6lYiIpGP/bClfKKcTdasdotXKgUTGRQLQslhL3gp6i1xuuQxOmvGp+BIRyWxy+EPtt2HTKBzWfYBjsY+NTiQiIunU/ZbywRdu4+VzHBf/3/ny8CUAKuSqwNBqQymfu7zBKTMPFV8iIplRzTfhwDeYbp2iwoVFmI65goPD418nKWKKjyfvnb2Yjlk1v3ag+bUvza99ZZT5/Tn4EmEnjlOo0EFue4RyNRJyO3kysEBTnstZEfP1M3D9jNExH3B/frlZHPzKGB0n2VR8iYhkRo4u0OJzWPIfCt7+E77/0+hEmZIjUA0g/X0uyRQ0v/al+bWvjDC/YWYTx72zc9jfkziTCSebjU53w+h55wIex48YHe9f3Z/f+BBvFV8iIpIOBDQkvu4w7uxZQY4cPphNJqMTZTpWm43bt29pfu1E82tfml/7Ss/zG4+Nb+LuMcMpnHv/f1CuntWVd6xeFMqWH7L9++vTg/vzm90zr9FRUkTFl4hIJmatNZjtYaVp0aIFZid1p0pt8RYL21ev1vzaiebXvjS/9pVe53fftX2M+PNTzoRdAcDdlI8JDT+kZv6aBidLmcT5Ld/C6CgpouJLRERERCSTuxpxlQl7JvDb2d8AsMW74hv/Ar90GkI2F1eD02UdZqMDTJ8+HX9/f1xdXalevTq7du165NgffviBKlWq4O3tjYeHB4GBgSxevDjJmC5dumAymZJ8NWvWLMmYW7du0b59e7y8vPD29qZ79+6Eh4fbZf9ERERERIwSHRfNrAOzePGnFxMKL5uJ2NvVyHHrA1a0G6rCK40ZeuRr+fLlDBo0iFmzZlG9enUmTZpE06ZNCQkJwdfX94HxPj4+DB8+nFKlSuHs7MzKlSvp2rUrvr6+NG3aNHFcs2bNmD9/fuL3Li4uSdbTvn17rly5wrp167BYLHTt2pVevXqxdOlS++2siIiIiEgasdlsrD+/nvF7xnMpPKF1vBcluHKmKZ5mfxb2fRYfD2eDU2Y9hhZfEyZMoGfPnnTt2hWAWbNmsWrVKubNm8fQoUMfGF+vXr0k3w8YMICFCxeyffv2JMWXi4sLfn5+D93m0aNHWbNmDbt376ZKlSoATJ06lRYtWvDFF1+QL1++VNo7EUkOm82G1WY1OoaIiEimcfz2ccbuGsuuqwlnlOVxz0Nxp9f47a88ODmYmd09iKK5M0BXjUzIsOIrNjaWvXv3MmzYsMRlZrOZRo0asWPHjse+3mazsXHjRkJCQhg7dmyS5zZv3oyvry85cuSgQYMGjBo1ipw5cwKwY8cOvL29EwsvgEaNGmE2m9m5cycvv/zyQ7cXExNDTExM4vdhYWEAWCwWLBZL8nfcDu5v3+gcmZXm1z7uxd7j2xPf8s2xb7BZbJS+VZpiPsWMjpXp6P1rX5pf+9L82pfm176MmN+7MXeZeXAmK06uwGqz4uLgQqfSnfCMbszIX08D8NlLZQkq6JXhf+7p7f2b3ByGFV83btwgPj6ePHnyJFmeJ08ejh079sjX3b17l/z58xMTE4ODgwMzZsygcePGic83a9aM//znPxQpUoRTp07x3nvv0bx5c3bs2IGDgwNXr1594JRGR0dHfHx8uHr16iO3O3r0aEaOHPnA8t9//x13d/fk7rZdrVu3zugImZrmN3WEWcP4M+ZPdsfsJob//kGj69qudM3WlTwOef7l1fKk9P61L82vfWl+7Uvza19pMb/xtnj2xO5hffR6omxRAJR1Kksz12aEHvZh0rFTgImmBaw4Xw5m9eVgu2dKK+nl/RsZGZmscRmu26GnpyfBwcGEh4ezYcMGBg0aRNGiRRNPSWzbtm3i2PLly1OhQgWKFSvG5s2badiw4RNvd9iwYQwaNCjx+7CwMAoWLEiTJk3w8vJ64vWmBovFwrp162jcuDFO6aiVaWah+U0dZ8POsujoIladWYXFmvDXoWLZi9EmoA3z9s/jqvUqi2IWMb3BdMr4ZJybJaZ3ev/al+bXvjS/9qX5ta+0mt/d13bz+d7PORl1EoCA7AG8U+UdquapyonQcNp8tQurLY4XKvgxvlV5TOnsnmNPKr29f++fFfc4hhVfuXLlwsHBgWvXriVZfu3atUderwUJpyYGBAQAEBgYyNGjRxk9evQD14PdV7RoUXLlysXJkydp2LAhfn5+hIaGJhkTFxfHrVu3/nW7Li4uDzTuAHByckoXP3BIX1kyI83vkzl0/RDzDs9jw/kN2LABUNm3Mt3KdaN2gdrEx8XDCfjF6RcO3zxMnw19mNloJoG+gcYGz2T0/rUvza99aX7tS/NrX/aa30vhlxi/ZzzrziUc+cnukp1+gf1oVaIVjmZHrt+LodeS/dyLjqOqfw6+eDUQZ0eHVM9htPTy/k1uBsNazTs7OxMUFMSGDRsSl1mtVjZs2ECNGjWSvR6r1ZrkWqz/dfHiRW7evEnevAl3v65RowZ37txh7969iWM2btyI1WqlevXqT7AnIvK/bDYbf1z6g+5ru9NudTvWn1+PDRv1CtRjUfNFLGy+kLoF62I2JfwKcje7M6PBDCr7VibcEk6vdb3YeWWnwXshIiKS/kRaIpm2fxotf2rJunPrMJvMtC3ZlpUvraRtqbY4mh2JtsTTc9EeLt6Owj+nO7M7VsElExZeGZGhpx0OGjSIzp07U6VKFapVq8akSZOIiIhI7H7YqVMn8ufPz+jRo4GE666qVKlCsWLFiImJYfXq1SxevJiZM2cCEB4ezsiRI3nllVfw8/Pj1KlTDBkyhICAgMRuiKVLl6ZZs2b07NmTWbNmYbFY6NevH23btlWnQ5GnFGeNY925dcw7PI9jtxKu3XQ0OdKiaAu6lu1KQI6AR742m1M2ZjWexYCNA9hxZQd91/dlYv2J1ClQJ63ii4iIpFs2m401Z9cwfs94rkUmnDlWza8a71Z7lxI5SiSOs1ptDPo2mOALd/B2d2Jel6pqKZ+OGFp8tWnThuvXr/Phhx9y9epVAgMDWbNmTWITjvPnz2M2//fgXEREBH379uXixYu4ublRqlQplixZQps2bQBwcHDg4MGDLFy4kDt37pAvXz6aNGnCJ598kuSUwa+//pp+/frRsGFDzGYzr7zyClOmTEnbnRfJRKLjovn55M8sOLKAi+EXAXBzdOOV4q/QqUwn8mbLm6z1uDm6MbXhVN7e8jabL2xmwKYBjKszjsaFGz/2tSIiIpnV0ZtHGbNrDPtC9wGQzyMfb1d9m0aFGj1wDde4tSGsPnQVJwcTszuopXx6Y3jDjX79+tGvX7+HPrd58+Yk348aNYpRo0Y9cl1ubm6sXbv2sdv08fHRDZVFUkFYbBjLjy1nydEl3Iq+BYC3izftSrXjtVKv4e3qneJ1uji4MKHeBN7b9h5rzq7hnS3v8EnNT3ih2AupnF5ERCR9uxV9i6n7p/L98e+xYcPN0Y3u5brTuWxnXB1dHxi/bNd5Zm05BcC4VhWoXjRnWkeWxzC8+BKRjOdaxDWWHF3CtyHfEhmX0Fo1r0deOpftzMsBL+Pu9HS3X3AyOzGm9hhcHFz4+dTPDN8+nOj4aFqXaJ0a8UVERNI1i9XCsmPLmBk8k3uWewA0L9KcQUGD8PN4eIO47SduMPynwwAMaFiclysVSLO8knwqvkQk2U7fPc2Cwwv49fSvxFnjAAjwDqBbuW40K9IMJ3PqdRtyMDvwcc2PcXV0ZXnIcj7e8THRcdF0LNMx1bYhIiKS3vx56U/G7h7L6bsJN0Uu7VOaodWGUjlP5Ue+5vi1e7y+ZC/xVhsvBebjrUbF0yqupJCKLxF5rIPXDzLv8Dw2nt+YpF189/LdqZ2/tt3uGWI2mRlefTjuju7MPzKfcbvHERUXRa8KveyyPREREaNcCLvAuD3j2HxhMwA5XHLwZuU3eTngZRzMj+5UeP1eDF3n7+ZeTEJL+bGtKmSae3llRiq+ROShbDYbf17+k7mH57L76u7E5fUK1qN7ue5pdh8uk8nEwKCBuDm6MePADKbun0p0XDT9K/XXfy4iIpLhRVgi+OrgVyz6exEWqwVHkyNtS7Xl9cDX8XL2+tfXRsXG02PRHi7dSWgp/6Vayqd7Kr5EJIl/axffrVw3inkXS/NMJpOJ1wNfx9XRlQl7J/DVoa+IiotiSNUhKsBERCRDstqsrDq9iol7J3I96joANfPVZEjVIRT1Lvr41/9/S/kD/99Sfn7XauRQS/l0T8WXiAAJ7eJ/OvkTC44s4FL4JeDJ2sXbU9dyXXFzdOPTnZ+y5OgSouKi+OCZD/71dAwREZH05vCNw4zeNZqD1w8CUNCzIEOqDqFugbrJ/qPiuLUh/Hb4vy3li+TysGdkSSUqvkSyuLsxd1kespyvj36dtF186Xa8VvLJ2sXbU9tSbXFxcGHEjhF8f+J7ouOjGVVzFI5m/ToTEZH07UbUDSbtncTPp34GwN3RnV4VetGxTEecHZJ/1OobtZTPsPRpRSSLuhZxjcV/L+a7498ltovP55EvoV188Zdxc3QzOOGj3c83bNswVp1eRUxcDOPqjMPJIfW6LYqIiKQWS7yFJUeXMPvgbCIsEQC8WOxFBlQegK+7b4rWte3Edd5XS/kMS8WXSBbzsHbxxXMUp1u5bjT1b5qq7eLtqVmRZrg4uDB4y2DWn1/Pm5veZGK9iQ+96aSIiIhRtl3axoT9EzgXdg6A8rnK8261d6mYu2KK13X82j36LtlHvNXGy5Xyq6V8BvRUxVd0dDSurvqgI5IRGNUu3p7qF6rPtAbTGLBpANsvbeeNDW8wtcHUp77Js4iIyNM6ffc0i8IXcXzLcQByueXircpv8UKxFzCbzCle3z9bylfz92HMK+Uz5P/dWV2Kf/JWq5VPPvmE/Pnzky1bNk6fTrgB3AcffMDcuXNTPaCIPDmbzcb2S9vptrYb7Ve3Z8P5DdiwUa9gPRY3X8zC5gupU6BOhv7l/Wz+Z5nZaCbuju7surqL3ut6ExYbZnQsERHJoi7cu8B7297j1dWvcjzuOI5mR7qW68qvL/1Ky4CWT1R4/bOlfJFcHszuGKSW8hlUin/6o0aNYsGCBYwbNw5n5/9eGFiuXDnmzJmTquFE5MnEWeNYfXo1rX9tzevrX2f31d04mhxpWawlP7X8iakNpqbZfbrSQhW/KsxpMgdPZ0+CrwfTY20PbkffNjqWiIhkIVcjrjJyx0he/PFFfj39K1ablTJOZVjRYgWDggaRzTnbE633f1vKz+tSVS3lM7AUn3a4aNEivvzySxo2bEifPn0Sl1esWJFjx46lajgRSZlHtYtvVaIVncp0ws/Dz+CE9lM+d3nmN51Pr3W9OHrrKN3WduOrJl+Ryy2X0dFERCQTuxl1kzmH5vBtyLfEWmMBqJm/Jq+Xf52zf52lkFehp1r/2LXH+O3wVZwdzHzZsYpaymdwKS6+Ll26REBAwAPLrVYrFoslVUKJSMo8rF18DpccCe3iS71GdpfsBidMGyV9SjK/6Xx6/t6Tk3dO0mVNF+Y0mZOpi04RETHG3Zi7LDyyMPG+kwBBeYJ4s9KbVM5TGYvFwlnOPtU2vtl1ntlbEi7xGduqPNWK+DxtbDFYiouvMmXKsG3bNgoXLpxk+YoVK6hUqVKqBRORx8vI7eLtpah3URY0W0CP33twLuwcnX/rzJwmcyjoVdDoaCIikglEWCJY8vcSFh5ZyD3LPQDK5SxH/8r9qZG3RqpdR/3PlvJvNVJL+cwixcXXhx9+SOfOnbl06RJWq5UffviBkJAQFi1axMqVK+2RUUT+R2ZpF28vBb0KsqDZAnqu68m5sHN0WdOFr5p+RdHsRY2OJiIiGVR0XDTLQ5Yz99BcbsckXFdcPEdx+gX2o37B+qnavOp/W8oPaKiW8plFiouvli1b8uuvv/Lxxx/j4eHBhx9+SOXKlfn1119p3LixPTKKyP87cP0A8w7NY9OFTYnt4oPyBNG9XHdq5a+VobsWpra82fImFGD/fwpi1zVd+bLxl5T0KWl0NBERyUAs8RZ+PPkjsw/MJjQqFIDCXoV5I/ANmvo3faLuhf9GLeUztye6z1ft2rVZt25damcRkYew2Wz8cfkP5h6ay55rexKX1y9Yn27lumWqroWpLZdbLuY1nUfvdb05eusoXdd2ZXaj2ZTPXd7oaCIiks7FW+NZeXolMw/MTGxildcjL69XfJ0Xir2Ao/mpbpf7UGopn/ml/rtGRFJFnDWO38/+zrzD8wi5HQKAo9mR54s+T9eyXSnqrVPokiOHaw7mNJ1D3/V9OXD9AD3X9WRag2lU8atidDQREUmHrDYr686tY3rwdM7cPQMk/DGvZ/metCrRCmcH+7R5V0v5rCHFxZfZbP7XQ5/x8fFPFUgkq4uKi+Knkz+x8MjCJO3iW5doTccyHdW57wl4OXvxZeMv6b+xP7uu7uL19a8zuf5kns3/rNHRREQknbDZbGy9uJVpwdM4divh9knZXbLTvVx32pZqa/cmVmopnzWkuPj68ccfk3xvsVjYv38/CxcuZOTIkakWTCSruRtzl2XHlrH02NIk7eLbl25P21Jts0y7eHtxd3JnesPpDNw8kO2XttNvYz/G1x1P/UL1jY4mIiIG23llJ1P2T+Hg9YMAeDh50LlMZzqW6fjEN0dOiX+2lB/XqoJaymdiT9Rw43+1atWKsmXLsnz5crp3754qwUSyiqsRV1n892JWHF+R2C4+f7b8dC7bmZcCXsqS7eLtxdXRlcn1J/Pu1ndZf349gzYPYnTt0TQr0szoaCIiYoDg0GCm7Z/Gzqs7AXB1cOW10q/RrWw3vF290yTD/7aUf6lS/jTZrhgj1a75euaZZ+jVq1dqrU4k0zt95zTzj8xn5emVie3iS+Qokdgu3h4X8go4Ozjzed3Pef+P91l1ehXvbnuX6PhoXgp4yehoIiKSRo7dOsbU/VPZenErAE5mJ1qXaE3PCj3J5ZYrzXKEXFVL+awmVT7dRUVFMWXKFPLnV6Uu8jj328VvvLAxcVmVPFXoVq6b2sWnEUezI5/W/BRXB1e+P/E9H/zxAdFx0bQt1dboaCIiYken75xmevB0fj/3OwAOJgdaBrSkT4U+5M2WN02zhN6LptuC/28pX0Qt5bOKFBdfOXLkSPLGsNls3Lt3D3d3d5YsWZKq4UQyC5vNxvZL25l3eF6SdvENCjagW/luVMxd0cB0WZOD2YGPanyEm6MbS44u4dOdnxIdF02Xcl2MjiYiIqnswr0LzDowi5WnV2K1WTFhonmR5vQN7Ethr8JpnicqNp6eC//RUr6DWspnFSkuviZOnJik+DKbzeTOnZvq1auTI0eOVA0nktHFWeNYe3Yt8w7P4/jt44DaxacnJpOJIVWH4OboxleHvmL83vFExUXRp2If/fVRRCQTuBZxjS8PfskPJ34gzpZwin+Dgg14o9IblMhRwpBMVquNgcuDOXDxrlrKZ0EpLr66dOlihxgimcvD2sW7O7rTqkQrtYtPZ0wmE29WfhNXR1em7p/KjAMziIqLYmDQQBVgIiIZ1K3oW8w5NIflx5YTa40FoGa+mvSr1I9yucoZmm3smmOsOaKW8llVsoqvgwcPJnuFFSpUeOIwIhnd/XbxXx/9mtsxtwHwcfWhfen2tCnZRu3i07FeFXrh5ujGuN3jmH9kPlFxUQyrPgyzyWx0NBERSaaw2DAWHF7AkqNLiIqLAqCyb2X6V+pPFb8qBqeDpTvPM3urWspnZckqvgIDAzGZTNhstn8dZzKZdJNlyZLut4v/7vh3ib/s82fLT5eyXXgp4CVcHV0NTijJ0bFMR1wdXflkxycsC1lGVFwUI58diYNZ5+GLiKRnkZZIvj76NfOPzOde7D0AyuYsS/9K/Xk237Pp4kyGrcev88HPCS3lBzYqoZbyWVSyiq8zZ87YO4dIhvSodvHdy3WniX8TtYvPgFqXaI2rgyvv//E+P5/6mZj4GD6r/RlOZiejo4mIyP+IiY9h+bHlzD08l1vRtwAI8A6gX6V+NCjYIF0UXfD/LeW/Tmgp/59K+XmzYYDRkcQgyfpkWLhw2neBEUnPDlw/wNxDc9l0YVPisqp+VelWrhs189VMN7/s5cm8UOwFXB1dGbJ1CGvOriE6Ppov6n6Bi4OL0dFERASwWC38eOJHZh+cTWhkKACFPAvRN7AvzfybpaszFq7fi6Hbgt2E/39L+dFqKZ+lPfGf5f/++2/Onz9PbGxskuUvvvjiU4cSSY9sNhtbL25l3uF57L22FwATJhoUakC3ct2okFvXO2YmjQs3ZnL9yQzcNJDNFzbTf0N/JjeYjJujm9HRRESyrHhrPKvOrGJm8Ewuhl8EwM/Djz4V+vBiwIvp7iyF2Hjo8/V+tZSXRCkuvk6fPs3LL7/MoUOHklwHdr+C1zVfktnEWeM4EHuAhb8t5MSdE0BCu/gXir5Al3JdKJpd7eIzqzoF6jC90XTe3PgmO67s4PX1rzO94XQ8nNSZSkQkLVltVtafW8/04OmcvpvQsCKna056VuhJ6xKtcXZIf63arVYbi0+aOXgrjBzuTsxXS3nhCYqvAQMGUKRIETZs2ECRIkXYtWsXN2/eZPDgwXzxxRf2yChimJO3TzJw80DORp6FyIR28a1LtKZjmY7k8chjdDxJA8/kfYbZjWfTd31f9l7bS8/fezKz0Ux1rhQRSQM2m41tl7Yxbf80jt46CoCXsxfdynXjtVKv4e7kbnDCh7NabXy86hgHb5lxcjDxZacq+KulvPAExdeOHTvYuHEjuXLlwmw2YzabqVWrFqNHj+bNN99k//799sgpkuY2nt/IsG3DiIyLxMPkQefynWlXpp0+dGdBlXwrMafpHHqv682hG4fovrY7sxvPJqdbTqOjiYhkWruu7GLq/qkEXw8GwMPJg05lOtGxTEc8nT2NDfcvLPFWhqw4yI/7L2HCxpiXy1PVXy3lJUGKi6/4+Hg8PRPe8Lly5eLy5cuULFmSwoULExISkuoBRdKa1WZl9sHZzAieAUCVPFVoHNWY1uVa4+SUvs4ll7RTNmdZ5jWdR6/fexFyO4Sua7syp8kcfN19jY4mIpKpHLh+gKn7p7Lzyk4AXB1cea3Ua3Qt15UcrjkMTvfvoi3x9Fu6n/VHr+FgNtGuaDwvVsxrdCxJR1JcfJUrV44DBw5QpEgRqlevzrhx43B2dubLL7+kaFFd+yIZW6QlkuHbh7P+/HoA2pVqx4DAAaxbs87gZJIelMhRggXNFtDj9x6cuXuGzr91Zk7TOeTPpnu1iIg8rZBbIUzdP5UtF7cACddXtyreil4VepHbPbfB6R4vPCaOHgt389fpW7g4mpnStiLRp3YbHUvSmRQXX++//z4REREAfPzxxzz//PPUrl2bnDlzsnz58lQPKJJWLty7wJsb3+TknZM4mZ344JkPeLn4y1gsFqOjSTrin92fhc0X0n1tdy6GX6TLmi7MaTKHwl66JYeIyJM4ffc0M4JnsPbsWgDMJjMti7WkT8U+5MuWz+B0yXMrIpYu83dx8OJdsrk4MqdzFYIKerH6lNHJJL1JdvFVpUoVevToQbt27fDy8gIgICCAY8eOcevWLXLkyKF7FkiG9deVv3h7y9vcjblLLrdcTKw3kUDfQKNjSTqVP1t+FjZbSI/fe3A27Cydf+vMV02+oniO4kZHExHJMC6FX2Jm8Ex+Pf0rVpsVgOb+zekb2Bf/7P7GhkuBq3ej6Th3JydCw8nh7sSibtUpXyC7/ngrD2VO7sCKFSsyZMgQ8ubNS6dOndi8eXPicz4+Piq8JEOy2Wws/nsxfdb14W7MXcrnKs+y55ap8JLHyuORh/nN5lMiRwluRt+k29pu/H3zb6NjiYike6GRoYz6axTP//g8P5/6GavNSr2C9VjxwgrG1R2XoQqvszciaDXrT06EhpM3uyvf9alB+QJqzCWPluzia+7cuVy9epXp06dz/vx5GjZsSEBAAJ999hmXLl2yZ0YRu4iJj+H9P95n3O5xxNviebHYi8xvNl8t5CXZcrnlYl7TeZTLWY47MXfosbYHwaHBRscSEUmXbkff5ovdX9DihxYsD1lOnDWOGnlrsLTFUqY2mEpJn5JGR0yRo1fCaDVrBxdvR+Gf053v+tQgwDf9dmGU9CHZxReAu7s7Xbp0YfPmzRw/fpy2bdsye/Zs/P39ee655/jhhx/slVMkVYVGhtJ1TVd+OfULDiYHhlQdwqiao3BxcDE6mmQw2V2y81WTr6jsW5l7lnv0WteLXVd2GR1LRCTdCIsNY9r+aTT7vhkL/15ITHwMlXwrMa/pPL5s8iXlc5c3OmKK7T13mzazd3AjPIbSeb34rs+zFMiRPu85JulLioqvfypWrBijRo3i7NmzfPPNN/z111+0bt06NbOJ2MWB6wdou7Ith24cwsvZi5mNZtKxTEedOitPLJtzNmY2mkmNvDWIioui74a+bLu4zehYIiKGirREMufQHJp/35zZB2cTGRdJmZxlmNloJgubLaSqX1WjIz6RbSeu02HOTsKi46hSOAfLej1Dbk/98VaSJ8XdDv9p8+bNzJ8/n++//x5HR0d69uyZWrlE7OLHEz/yyV+fYLFaCPAOYEr9KRT0Kmh0LMkE3J3cmdpwKm9vfpvNFzfz5qY3+bzO5zQq3MjoaCIiaSomPobvQr7jq0NfcSv6FgDFshejX6V+NCzUMEP/sfO3Q1d4c9l+LPE26pTIzawOlXF3fqqP05LFpPjdcvHiRRYsWMCCBQs4ffo0tWvXZsaMGbRu3Ro3Nzd7ZBR5aharhfF7xvP10a8BaFioIZ/V+gx3J50iIKnHxcGFCfUnMGzbMNaeXcvbW95mVK1RPF/0eaOjiYjYncVq4aeTPzH7wGyuRV4DoKBnQV6v+DotirTAwexgcMKn8+3uCwz94SBWGzxXPi8T2wTi7PjEJ5FJFpXs4uvbb79l3rx5bNiwAV9fXzp37ky3bt0ICAiwZz6Rp3Y7+jZvb3mbXVcTrsPpG9iX3hV6YzbpF6akPiezE2Nrj8XFwYVfTv3Ce9veIzoumlYlWhkdTUTELuKt8aw+s5qZB2Zy4d4FAPK456FPxT60DGiJk9nJ4IRPb86204xadRSAtlUL8unL5XEwZ9wjeGKcZBdfHTp04LnnnuPHH3+kRYsWmM364CrpX8itEAZsGsCl8Eu4O7rzWe3PaFioodGxJJNzMDvwSc1PcHN0Y3nIckbuGEl0XDQdynQwOpqISKqx2WxsOL+Bafuncepuwt2EfVx96Fm+J61Lts4UTaxsNhsT1h1n6saTAPSuU5ShzUtl6FMnxVjJLr4uXryIr6+vPbOIpKrfz/7O+3+8T1RcFAU9CzKl/hQCcuhIraQNs8nM8OrDcXVwZeHfCxm7eyzR8dH0KN/D6GgiIk/FZrOx/dJ2pu6fytFbCUeDvJy96FquK+1Ktcs0p/RbrTZG/HqERTvOAfBO05L0rVdMhZc8lWQXXyq8JKOw2qxMD57Olwe/BKBG3hp8XvdzsrvopoeStkwmE4OrDMbdyZ2ZB2Yyed9kIi2R9K/UX/95i0iGtPvqbqbun8r+0P0AuDu607FMRzqV7YSXs5fB6VKPJd7KO98d4Kfgy5hM8HHLcnR8prDRsSQTUHsWyVTCY8MZtm0Ymy9uBqBTmU4MDBqIo1lvdTGGyWSib2BfXB1dmbh3Il8d+oqouCiGVB2iAkxEMoxD1w8xZf8U/rryF5DQYKhtybZ0K98NH1cfg9OlrmhLPP2W7mP90VAczSbGv1qRloH5jY4lmYQ+kUqmcS7sHG9ufJPTd0/jbHZmxLMjeKHYC0bHEgGgW7luuDq4MnrXaJYcXUJ0fDQfPPOBGr+ISLoWciuEacHT2HxhMwCOZkdeKf4KvSr0wtc9850VdS/aQo+Fe9h55hYujmZmdqhMg1J5jI4lmYjh/+tPnz4df39/XF1dqV69Ort27Xrk2B9++IEqVarg7e2Nh4cHgYGBLF68OPF5i8XCu+++S/ny5fHw8CBfvnx06tSJy5cvJ1mPv78/JpMpydeYMWPsto9if39c+oPXVr3G6bun8XX3ZWHzhSq8JN1pV7odHz/7MSZMrDi+guHbhxNnjTM6lojIA87cPcM7W96h1a+t2HxhM2aTmZbFWrLy5ZW8/8z7mbLwuhURS/s5O9l55hbZXBxZ1K2aCi9JdSk+8rV7926sVivVq1dPsnznzp04ODhQpUqVZK9r+fLlDBo0iFmzZlG9enUmTZpE06ZNCQkJeeg1Zj4+PgwfPpxSpUrh7OzMypUr6dq1K76+vjRt2pTIyEj27dvHBx98QMWKFbl9+zYDBgzgxRdfZM+ePUnW9fHHHye5KbSnp2cKZ0LSA5vNxoIjC5i0bxJWm5XA3IFMrD+RXG65jI4m8lAvF38ZFwcX3tv+HitPryQmPoaxtcfi5JDxWzGLSMZ3KfwSsw7M4pdTv2C1WQFo5t+M1wNfp2j2ogans58rd6PoOHcXJ0PD8fFwZlG3apTLr2vFJfWluPh64403GDJkyAPF16VLlxg7diw7d+5M9romTJhAz5496dq1KwCzZs1i1apVzJs3j6FDhz4wvl69ekm+HzBgAAsXLmT79u00bdqU7Nmzs27duiRjpk2bRrVq1Th//jyFChVKXO7p6Ymfn1+ys0r6Ex0XzUd/fsTqM6sB+E/x/zC8+nCcHZwNTiby71oUbYGroytvb3mbdefWER0XzYR6E3B1dDU6mohkUdcjr/PlwS9ZcWJF4hH5egXq0a9SP0r6lDQ4nX2duRFBhzk7uXQnirzZXVncvToBvtmMjiWZVIqLr7///pvKlSs/sLxSpUr8/fffyV5PbGwse/fuZdiwYYnLzGYzjRo1YseOHY99vc1mY+PGjYSEhDB27NhHjrt79y4mkwlvb+8ky8eMGcMnn3xCoUKFaNeuHQMHDsTR8dHTERMTQ0xMTOL3YWFhQMKpjhaL5bF57en+9o3OkZauRlxl8LbBHL11FEeTI4ODBvNq8VcxWU1YrKk7D1lxftNSVp3f2nlrM7HORAZvG8y2S9vou74vE+tMTPUWzVl1ftOK5te+NL/2ZbFYiLBGMH7PeFacWkFMfMLnnOp+1Xm9wutUyFUhcVxmdfTKPbot2suN8Fj8c7qzoEsQ+b1dUmWf9f61r/Q2v8nNYbLZbLaUrDhnzpysXLmSGjVqJFn+559/8txzz3H79u1krefy5cvkz5+fP//8M8m6hgwZwpYtWx55BO3u3bvkz5+fmJgYHBwcmDFjBt26dXvo2OjoaGrWrEmpUqX4+uuvE5dPmDCBypUr4+Pjw59//smwYcPo2rUrEyZMeGTeESNGMHLkyAeWL126FHf3zHE/i4zibNxZvon4hghbBO4md9q6t6WoU+Y9FUIytzNxZ1gcvphYYinkUIhO2TrhatIRMMm6bDYb163XORd3jrNxZ7llvWV0pEwtND6UGBKKrkIOhWjk2ijL/J965h7MPupAVLyJ/O42+pSOx0snz8gTioyMpF27dty9excvr0ffdiHFxddrr73GlStX+Pnnn8mePeFc2Dt37vDSSy/h6+vLt99+m6z1PGnxZbVaOX36NOHh4WzYsIFPPvmEn3766YFTEi0WC6+88goXL15k8+bN/zoJ8+bNo3fv3oSHh+Pi8vC7sT/syFfBggW5cePGv647LVgsFtatW0fjxo1xcsrc1418f/J7xu4ZS5w1jhLeJZhQZwL5suWz6zaz0vwaQfMLB28cpP+m/tyz3KO0T2mm15+Ot4t3qqxb82tfmt+nF2eNI+R2CPtD97P/esLXnZg7RsfKUkp6l+SNim9QM1/NLHMLjG0nbvDGN8FEWawEFfLmyw6V8HJL3X/D+v1gX+ltfsPCwsiVK9dji68Un3b4xRdfUKdOHQoXLkylSpUACA4OJk+ePEk6Dz5Orly5cHBw4Nq1a0mWX7t27V+vxTKbzQQEBAAQGBjI0aNHGT16dJLiy2Kx8Oqrr3Lu3Dk2btz42OKoevXqxMXFcfbsWUqWfPh5zS4uLg8tzJycnNLFDxzSV5bUZom3MGbXGL49nlDcN/VvysfPfpzqp2j9m8w8v+lBVp7foLxBzGs2j16/9+LoraP02tCLr5p8laqNY7Ly/KYFzW/yRcdFc+jGIfZe28u+a/sIvh5MVFxUkjEuDi5UyF2BwFyBhJ8Op1qVajg4OBiUOPOKj4/nyL4j9GneBxfnh//xOTNafegKA5btxxJvo26J3MzqEISbs/3eX/r9YF/pZX6TmyHFxVf+/Pk5ePAgX3/9NQcOHMDNzY2uXbvy2muvpWjHnZ2dCQoKYsOGDbz00ktAwlGtDRs20K9fv2Svx2q1Jjkidb/wOnHiBJs2bSJnzpyPXUdwcDBms/mhHRbFeDejbjJo8yD2he7DhIk3K79J93Lds8xf5yRrKOVTivnN5tPz956cvHOSrmu68lWTr/DzUGMgydjuxtwlODSYvaEJxdaRm0ceuMWCp7MnlX0rUzlPZSr7VqZszrI4OThhsVhYfXE1dQvUTRcfrjIbi8VCxMGILHW/weW7zzPsh0NYbfBchbxMfDUQZ8ess/9ivCe6ybKHhwe9evV66o0PGjSIzp07U6VKFapVq8akSZOIiIhI7H7YqVMn8ufPz+jRowEYPXo0VapUoVixYsTExLB69WoWL17MzJkzgYRfIq1atWLfvn2sXLmS+Ph4rl69CiS0qXd2dmbHjh3s3LmT+vXr4+npyY4dOxg4cCAdOnQgR44cT71Pkrr+vvk3AzYN4GrEVbI5ZWNsnbHUKVDH6FgidlHMuxgLmi2gx+89OBt2ls6/dWZO0zkU9CxodDSRZAuNDGXftX0JR7ZC93Hi9glsJL3CwdfNN6HQ+v9iq3iO4lmqABBjfLX1NJ+uPgrAa9UKMuql8jiY9YdcSVvJKr5++eUXmjdvjpOTE7/88su/jn3xxReTvfE2bdpw/fp1PvzwQ65evUpgYCBr1qwhT56EG9qdP38es/m/v4wjIiLo27cvFy9exM3NjVKlSrFkyRLatGkDJLS7v58vMDAwybY2bdpEvXr1cHFxYdmyZYwYMYKYmBiKFCnCwIEDGTRoULJzS9r47cxvfPjHh0THR+Pv5c/kBpMz9T1GRAAKeRViYbOF9Pi9B+fvnafLb134qulXeu9LumSz2Th/73xisbX32l4uhl98YJy/l39ioVU5T2UKZCugsxckzdhsNr74PYTpm04B0LtuUYY2K6X3oBgiWcXXSy+9xNWrV/H19U08RfBhTCYT8fHxKQrQr1+/R55muHnz5iTfjxo1ilGjRj1yXf7+/jyuf0jlypX566+/UpRR0la8NZ4p+6cw7/A8AGrlr8XYOmPxcja2sYlIWsmbLS8Lmi2g5+89OXX3FF3XdOXLxl9m+nvtSPoXb43n+O3j7Avdl3jN1s3om0nGmE1mSuYomaTY0o3vxShWq42PfjnC4r/OATCkWUn61gswOJVkZckqvqxW60Mfi6S2sNgw3t36LtsvbQege7nu9K/UHwezLrSWrCW3e27mNZtHn3V9OHrrKN3WdmNWo1mUz13e6GiShcTGx3L4xuHEYis4NJhwS3iSMU5mJ8rnKk/lPJUJyhNExdwV8XT2NCixyH9Z4q28/d0Bfg6+jMkEn7QsR4dnChsdS7K4FF3zZbFYaNasGbNmzaJ48eL2yiRZ1Om7pxmwcQBnw87i6uDKyGdH0qJoC6NjiRjGx9WHOU3n8Pr61zl4/SA91/VkesPpBOUJMjqaZFLhseEcuH4g8RTCwzcOE2uNTTLGw8mDQN9AgnyDqJynMuVylcPFIet0ypOMIdoSzxtf72PDsVAczSYmtAnkxYr2vTWNSHKkqPhycnLi4MGD9soiWdiWC1sYum0o4ZZw/Dz8mFx/MmVyljE6lojhvJy9+LLxl/Tf2J/dV3fTZ10fJjeYzLP5njU6mmQCN6Nusi90X+I1WyG3Q7Dakp7h4uPqQ1CeoMRTCEvmKKmzESRduxdtocfCPew8cwsXRzOzOgRRv5Q6Wkv6kOJuhx06dGDu3LmMGTPGHnkki7HZbMw5NIep+6diw0Zl38pMqDeBnG6Pv0WASFbh4eTB9IbTGbh5IH9c+oN+G/oxod4E6hWsZ3Q0yUBsNhuXwi8lKbbOhp19YFz+bPkJyhOUWHAV9iqsxgSSYdwMj6Hz/F0cvhSGp4sjc7tUpVoRH6NjiSRKcfEVFxfHvHnzWL9+PUFBQXh4eCR5fsKECakWTjK3SEskH/75IWvPrgWgTck2vFv1XZwcdC8Xkf/l5ujGlPpTGLJ1CBvOb2DgpoGMrjOaZv7NjI4m6ZTVZuXUnVOJjTH2hu4lNDL0gXHFcxSnsm/lxGIrj0ceA9KKPL3Ld6LoOHcnp65HkNPDmYXdqlEuf3ajY4kkkeLi6/Dhw1SuXBmA48ePp3ogyRouhV9iwMYBhNwOwdHsyHvV36N1idZGxxJJ15wdnPm87ucM3z6c3878xrtb3yUmLoaWAS2NjibpgMVq4e+bf7PvWsKRrX2h+wiLDUsyxtHkSJlcZRKv16rkW4nsLvpwKhnfmRsRdJizk0t3osiX3ZXFPapTLHc2o2OJPCDFxdemTZvskUOykN1XdzN482Bux9zGx9WHifUmUjlPZaNjiWQITmYnRtcajZujGz+c+IH3/3if6Lho2pRqY3Q0SWORlkgO3jiYeArhwesHiY6PTjLGzdGNirkrJnQi9A2ifO7yuDm6GZRYxD7+vhxGp3k7uREeS9FcHizuUZ383nqfS/qU4uKrW7duTJ48GU/PpG1kIyIi6N+/P/PmzUu1cJK52Gw2loUsY+yuscTb4intU5opDabg5+FndDSRDMXB7MBHNT7C1cGVpceWMmrnKKLjo+lctrPR0cSO7kTfSbxea1/oPo7ePEqcLS7JGG8Xbyr5Vko8hbBUzlI4mXUqt2Ree87eouuC3dyLjqNMXi8Wda9GrmzqvinpV4qLr4ULFzJmzJgHiq+oqCgWLVqk4kseKjY+lk93fsoPJ34A4LmizzGixghcHV0NTiaSMZlNZoZWG4qboxtzD8/liz1fEBkXSZ8KfdQcIZO4GnE18XqtfaH7OHnn5ANj/Dz8Eq/XCsoTRJHsRTCbzAakFUl7m0NC6bNkL9EWK1X9czCnc1Wyu+mPDZK+Jbv4CgsLw2azYbPZuHfvHq6u//3QHB8fz+rVq/H1VRtPedCNqBu8tektDlw/gNlkZmDlgXQu21kfEEWekslkYkDlAbg5ujEteBozgmcQFRfFwMoD9e8rg7HZbJwJO5N4CuG+a/u4HHH5gXFFsxelcp7KiQVXvmy6b5FkTSsPXmbg8mAs8TbqlczNzPZBuDnrFgiS/iW7+PL29sZkMmEymShRosQDz5tMJkaOHJmq4STjO3zjMAM2DSA0MhRPZ08+r/M5NfPXNDqWSKZhMpnoXbE3bo5ufL7nc+Yfnk90XDRDqw3VEZB0LM4aR8itkIRCK3Qf+0P3cyv6VpIxDiYHSvmUSrxeq1KeSvi4qmW2yDe7zvPej4ew2eD5CnmZ8Gogzo76fScZQ7KLr02bNmGz2WjQoAHff/89Pj7//Q/A2dmZwoULky+f/gIn//XrqV8Z8ecIYq2xFM1elCkNplDYq7DRsUQypU5lO+Hq6Mqov0bxzbFviIqLYkSNEUbHkv8XHRfNoRuHEo9sHbh+gMi4yCRjXBxcqJC7QuLNjCvmroiHk8cj1iiSNc3ecorRvx0DoF31QnzSshwOZh3pl4wj2cVX3bp1AThz5gyFChXSKS3ySHHWOCbunciivxcBUK9APUbXHk02Z7V8FbGnV0u+ipujG+//8T4/nfyJmLgYRjwzwuhYWVJYbBjBocGJpxAevnmYOGvS5hieTp5UylMp8RTCMjnL4OzgbFBikfTNZrPx+doQZmw+BcDr9YoxpGlJfR6VDCfFDTcKFy7Mtm3bmD17NqdPn+a7774jf/78LF68mCJFilCrVi175JQM4m7MXd7Z8g47ruwAoHeF3vQN7KvTn0TSyAvFXsDZwZmhW4fy29nfiIqLop6tntGxMr3rUdc5eOlg4j22jt8+jg1bkjG53XInuV4rwDsAB7OuURF5HKvVxgc/H+brnecBeLdZKV6vV8zgVCJPJsXF1/fff0/Hjh1p3749+/btIyYmBoC7d+/y2WefsXr16lQPKRnDydsn6b+xPxfDL+Lm6MaomqNo4t/E6FgiWU5T/6a4OrgyaPMgNl/czBHzEVZuWKk/gtiB1WbldNhpbv1464HnCnsVTjyFMMg3iAKeBfRXepEUssRbGfztAX45cBmTCT59qTztqhcyOpbIE0tx8TVq1ChmzZpFp06dWLZsWeLymjVrMmrUqFQNJxnHhvMbeG/be0TGRZI/W34m159MSZ+SRscSybLqFqzL9EbT6b+hP9fjr3P92nWjI2VqJkyU9Cn532IrTxC53HIZHUskQ4uKjeeNpfvYeCwUR7OJiW0CeaGi+gtIxpbi4iskJIQ6deo8sDx79uzcuXMnNTJJBmK1WZl9cDYzgmcAUM2vGl/U/YIcrjkMTiYiz+R9hhXPr2DRukVUCqyEg6NOcUtt8XHxHDtwjG7Nu+HjoU6EIqklLNpCjwV72HX2Fq5OZmZ2CKJ+Sd3SSDK+FBdffn5+nDx5En9//yTLt2/fTtGiRVMrl2QAEZYIhm8fzobzGwBoX7o9g6sMxsmsGxyKpBf5PPJRwbkCTf2b4uSkf5upzWKxEP93PJ7OnkZHEck0bobH0Hn+Lg5fCsPTxZG5XapSrYj+uCGZQ4qLr549ezJgwADmzZuHyWTi8uXL7Nixg7fffpsPPvjAHhklHbpw7wJvbnyTk3dO4mR24oNnPuDl4i8bHUtEREQysMt3ougwdyenr0eQ08OZhd2qUS5/dqNjiaSaFBdfQ4cOxWq10rBhQyIjI6lTpw4uLi68/fbb9O/f3x4ZJZ3ZcXkH72x9h7sxd8ntlpuJ9SdSMXdFo2OJiIhIBnb6ejgd5+7i0p0o8mV3ZUmP6hTNrdvUSOaS4uLLZDIxfPhw3nnnHU6ePEl4eDhlypQhWzb948jsbDYbS44u4Ys9X2C1WSmfqzyT6k/C113nYIuIiMiTO3L5Lp3n7eJGeCxFc3uwpHt18nm7GR1LJNWluPi6z9nZmTJlyqRmFknHYuJj+HjHx/xy6hcAXiz2Ih/W+BAXBxeDk4mIiEhGtvvsLbrN3829mDjK5vNiYbdq5MqmzxeSOSW7+OrWrVuyxs2bN++Jw0j6dC3iGgM3D+TQjUM4mBx4u8rbtC/dXverERERkaeyKSSU15fsJdpipZq/D3O6VMHLVc2BJPNKdvG1YMECChcuTKVKlbDZbPbMJOlIcGgwAzcP5EbUDbK7ZOeLul/wTN5njI4lIiIiGdyvBy4zcHkwcVYb9UvmZkb7INycdUsMydySXXy9/vrrfPPNN5w5c4auXbvSoUMHfHzU9jMz+/HEj3zy1ydYrBYCvAOY0mAKBT0LGh1LREREMrhvdp3nvR8PYbPBCxXzMb51RZwdzUbHErG7ZL/Lp0+fzpUrVxgyZAi//vorBQsW5NVXX2Xt2rU6EpbJWKwWRu8czYd/fojFaqFRoUZ83eJrFV4iIiLy1GZtOcWwHxIKr/bVCzGpTaAKL8kyUvROd3Fx4bXXXmPdunX8/ffflC1blr59++Lv7094eLi9Mkoauh19mz7r+rD02FIA3gh8g/H1xuPu5G5wMhEREcnIbDYbY9ccY8xvxwDoW68Yo14qh4NZ15BL1vHE3Q7NZjMmkwmbzUZ8fHxqZhKDhNwKYcCmAVwKv4S7ozuf1f6MhoUaGh1LREREMrh4q40Pfj7M0p3nARjavBR96hYzOJVI2kvRka+YmBi++eYbGjduTIkSJTh06BDTpk3j/Pnzus9XBrf27Fo6/taRS+GXKOhZkK9bfK3CS0RERJ5abJyVAcv2s3TneUwmGP2f8iq8JMtK9pGvvn37smzZMgoWLEi3bt345ptvyJUrlz2zSRqw2qxMD57Olwe/BKBG3hp8XvdzsrtkNziZiIiIZHRRsfG8/vVeNodcx8nBxMQ2gTxfIZ/RsUQMk+zia9asWRQqVIiiRYuyZcsWtmzZ8tBxP/zwQ6qFE/sKjw1n2LZhbL64GYDOZTrzVtBbOJqf+GxUEREREQDCoi30WLCHXWdv4epkZlaHIOqV9DU6loihkv0pu1OnTrqpbiZyLuwcb258k9N3T+NsdmbEsyN4odgLRscSERGRTOBGeAyd5+3iyOUwPF0dmdelKlX9dYsikRTdZFkyh+2XtjNk6xDuxd7D192XyfUnUy5XOaNjiYiISCZw6U4UHefs5PSNCHJ6OLOoezXK5tPlDCLwFN0OJeOx2WwsOLKASfsmYbVZCcwdyMT6E8nlpmv3RERE5Omduh5Oxzk7uXw3mvzebizuXo2iudWUTeQ+FV9ZRHRcNB/9+RGrz6wG4JXir/Be9fdwdnA2OJmIiIhkBocv3aXzvF3cjIilaG4PlnSvTj5vN6NjiaQrKr6ygCvhVxiwaQBHbx3F0eTIu9XepU3JNrqGT0RERFLFrjO36L5gN/di4iiX34uFXauRM5uL0bFE0h0VX5ncvmv7GLh5ILeib5HDJQfj642nql9Vo2OJiIhIJrHpWCh9luwlJs5KtSI+zOlcBS9XJ6NjiaRLKr4ysW9DvmX0rtHEWeMo5VOKyfUnky+b7q0hIiIiqePXA5cZuDyYOKuNBqV8mdG+Mq5ODkbHEkm3VHxlQpZ4C2N2jeHb498C0NS/KR8/+zHuTu4GJxMREZHM4uud53j/p8PYbPBixXyMf7UiTg5mo2OJpGsqvjKZm1E3GbR5EPtC92HCxJuV36R7ue66vktERERSzYzNJxm3JgSADs8U4uMXy2E267OGyOOo+MpEjt46yuBtg7kacZVsTtkYW2csdQrUMTqWiIiIZBI2m40xa44xe8tpAN6oX4y3m5TUH3lFkknFVyZxIPYAo9aNIjo+Gn8vfyY3mEzR7EWNjiUiIiKZRLzVxvs/HeabXecBeK9FKXrVKWZwKpGMRcVXBhdvjWfy/sl8F/kdALXz12ZMnTF4OXsZnEzk8Ww2G78cuMKeUBMN46w4qTmWiEi6FBtnZdC3waw8eAWTCUa/XJ621QoZHUskw1HxlcH9fu53Fh5dCEDXMl0ZEDQAB7O6DEn6d+VuFENWHGTbiRuAA1snb2dAoxL8p1J+HHXBtohIuhEVG8/rX+9lc8h1nBxMTGpTiecq5DU6lkiGpOIrg2vm34ztF7fjetWV/oH9VXhJumez2fhx/yU++uUI96LjcHE042yK59KdaIasOMisLacY3Lgkzcv56eJtERGD3Y2y0H3Bbvacu42rk5nZHatQt0Ruo2OJZFj683IGZzKZGPHMCCo4VzA6ishj3QiPoc+SvQz69gD3ouOoWNCbn/vW4MNK8QxpWhxvdydOX4/gjaX7eH7qdjYdC8VmsxkdW0QkS7oRHsNrX/7FnnO38XR1ZEn36iq8RJ6SjnyJSJpYc/gK7/14mFsRsTg5mBjQsDh96hbDZo0nxAF61ipChxpFmLvtDHO3n+HvK2F0XbCboMI5eKdpSZ4pmtPoXRARyTIu3Ymi45ydnL4RQa5szizqVp0y+XQ9ucjTUvElInZ1N9LCiF+P8OP+SwCU8vNk/KsVKZsvOwAWa3ziWC9XJwY2LkHnZ/2ZteUUC/88y95zt2n75V/ULp6Lt5uUpGJBbyN2Q0QkyzgZGk7HuTu5cjea/N5uLOlRnSK5PIyOJZIpqPgSEbvZcvw67644yNWwaMwm6FO3GAMaFcfF8d+vTfTxcOa9FqXpXqsIUzeeYNmuC2w7cYNtJ27QpEweBjcpSUk/zzTaCxGRrOPwpbt0mreLWxGxFMvtwZIe1cmb3c3oWCKZhoovEUl1ETFxfLr6KEt3JtwLpkguD8a/WpHKhXKkaD15vFwZ9VJ5etUuxqQNx/lp/yV+//sa645eo2XFfLzVqAT++musiEiq2Hn6Jj0W7uFeTBzl82dnQdeq5MzmYnQskUzF8IYb06dPx9/fH1dXV6pXr86uXbseOfaHH36gSpUqeHt74+HhQWBgIIsXL04yxmaz8eGHH5I3b17c3Nxo1KgRJ06cSDLm1q1btG/fHi8vL7y9venevTvh4eF22T+RrGbXmVs0m7w1sfDq8qw/q9+sneLC658K5XRnwquBrH2rDs3L+WGzwU/Bl2k0YQvDfjjElbtRqRVfRCRL2nQslE7zdnEvJo5qRXxY2rO6Ci8ROzC0+Fq+fDmDBg3io48+Yt++fVSsWJGmTZsSGhr60PE+Pj4MHz6cHTt2cPDgQbp27UrXrl1Zu3Zt4phx48YxZcoUZs2axc6dO/Hw8KBp06ZER0cnjmnfvj1Hjhxh3bp1rFy5kq1bt9KrVy+7769IZhZtiefTVX/T5ssdXLgVRX5vN5b2qM6IF8vi5pw6t0AonseTmR2C+LVfLeqWyE2c1cY3u85T9/PNfLLyb26Gx6TKdkREspJfD16h56I9xMRZaVjKl0XdquHpqrvei9iDocXXhAkT6NmzJ127dqVMmTLMmjULd3d35s2b99Dx9erV4+WXX6Z06dIUK1aMAQMGUKFCBbZv3w4kHPWaNGkS77//Pi1btqRChQosWrSIy5cv89NPPwFw9OhR1qxZw5w5c6hevTq1atVi6tSpLFu2jMuXL6fVrotkKgcv3uH5qdv5atsZbDZ4tUoB1rxVm2cDctlle+ULZGdht2p827sG1fx9iI2zMnf7GeqM28T430O4G2Wxy3ZFRDKb7VdNDF5xiDirjZaB+ZjVMQhXJ90zVMReDLvmKzY2lr179zJs2LDEZWazmUaNGrFjx47Hvt5ms7Fx40ZCQkIYO3YsAGfOnOHq1as0atQocVz27NmpXr06O3bsoG3btuzYsQNvb2+qVKmSOKZRo0aYzWZ27tzJyy+//NDtxcTEEBPz37+qh4WFAWCxWLBYjP2gd3/7RufIrDS/j2aJtzJj82lmbj1DvNVG7mzOjHqpLA1KJtwHJjlz9jTzW6mAJ0u6BbH95E3Grz/Bkcv3mLrxJIt2nKVnrSJ0fKYg7s5Z+9JWvX/tS/NrHzabjQMX7/LNrgv8ddyB6af+wGTSTddTW7zVxsnrCYVW+2oF+fC5UmCNT9KFVp6cfj/YV3qb3+TmMOxTyY0bN4iPjydPnjxJlufJk4djx4498nV3794lf/78xMTE4ODgwIwZM2jcuDEAV69eTVzH/67z/nNXr17F19c3yfOOjo74+PgkjnmY0aNHM3LkyAeW//7777i7u//LnqaddevWGR0hU9P8JnU5Er4+6cDFiIQPRJVyWmldJJLoU7tZfSrl63va+e1ZCA5kM7H6gplrUXF8se4Eszcfp0l+K8/mseFo+BWuxtL71740v6kjKg723DDx5zUzlyPvF1smiIwwNFdm1zi/larmM6xZc8boKJmSfj/YV3qZ38jIyGSNy3B/Evb09CQ4OJjw8HA2bNjAoEGDKFq0KPXq1bPrdocNG8agQYMSvw8LC6NgwYI0adIELy9jbzposVhYt24djRs3xslJ52inNs1vUvFWG3P/OMukXSexxNvwdnNixAulea683xOtLzXn9zngXauNXw5cYcqmU1y8HcX3Zx3YcduVfvWL8XJgXhwdslYVpvevfWl+n979o1zL9lxk9aGrRFmsADg7mmlWJje+MZd5pmplHB0z3EeWdC8uLo6Th/bSqaXev/ag3w/2ld7m9/5ZcY9j2G+yXLly4eDgwLVr15Isv3btGn5+j/4QZzabCQgIACAwMJCjR48yevRo6tWrl/i6a9eukTdv3iTrDAwMBMDPz++Bhh5xcXHcunXrX7fr4uKCi8uDXX+cnJzSxQ8c0leWzEjzC2dvRDD4uwPsPXcbgAalfBnzn/L4erk+9bpTa36dgFerFealygVZvucCUzec4PLdaN776Qhztp9lYOMSPFc+L2Zz1jqFSe9f+9L8plxYtIWf9l9i6c7zHLt6L3F5cd9svFatEP+pnB8PJxOrV1+ibsk8ml87sFgsRJzS+9feNL/2lV7mN7kZDCu+nJ2dCQoKYsOGDbz00ksAWK1WNmzYQL9+/ZK9HqvV+n/t3XlcVPX+x/H3sKuAooiCggu4UC6kBJmZaZS2l2VuqVlqG7d7tSzLm3uppWZ1TbvumYrXtFVDk6KuK4rirglquIFbCILCAOf3Rz+5l+uKOnNm8PV8PObxcM4cZt7n44i8+c6cKXkvVr169VSzZk0lJCSUlK3s7GytX79eL730kiSpVatWysrKUnJyslq2bClJ+umnn1RcXKzo6Ogbd4BAOVJcbGje+t/13rLdOmstkrenm4Y+fIs6R9Z22PdheLi5qOcdddS5ZW19vvaApiSmad+JXP1lwWZ9mpimQR0aql2jAIfND5RHhmEo5WCW5q9P13dbj+jcf61yPdw0UN2jQ9Syjl/Jv0tHeS8HANwopq7hDxw4UL1791ZkZKSioqI0adIk5ebmqk+fPpKkXr16qVatWhozZoykP993FRkZqdDQUOXn52vZsmWaO3eupkyZIkmyWCz629/+ptGjR6tBgwaqV6+e3nnnHQUFBZUUvPDwcHXs2FH9+vXT1KlTZbVaFRsbq65duyooKMiUOQCO7EjWWb3x5VatSj0hSWpVv5o+6NxMtf0c472OV+Ll7qr+d4eqW1SIZq46oGn/3qddR7P13OyNahFSRYM6NFar0GpmxwTKtcutcnWPDtETt9VSlYoeJiYEAPswtXx16dJFx48f19ChQ5WRkaGIiAjFx8eXnDAjPT1dLi7/eX9Gbm6uXn75ZR06dEgVKlRQ48aN9cUXX6hLly4l+7zxxhvKzc1V//79lZWVpbvuukvx8fHy8vrPy6LmzZun2NhY3XvvvXJxcdGTTz6pjz/+2H4HDjgBwzC0eNNhjfh2h3LyC+Xl7qLBHRurV6u6TvmSPR8vd/01poF6taqjqb+mac6aA9qUnqVu09bprjB/vd6hkSKCq5gdEyg3DMPQ5oNZWvA/q1yebi56qFmgukeVXuUCgJuB6e9ejY2NveTLDBMTE0tdHz16tEaPHn3Z+7NYLBo5cqRGjhx5yX2qVq2q+fPnlzkrcLM4npOvt7/aph93/vmezNtCqmhC5+aqX93b5GTXz6+Sh956IFzPt66nf/ycqgVJ6VqVekKrUk/ovltq6LX7G6pxTXNPogM4s9NnrfomhVUuALgY08sXAMfyw7ajGvL1dp3KLZC7q0V/i2moF+6uX+7OEhjg66WRjzVRvzb19VHCXi3ZdEg/7szUyl2ZerR5kAbENFRd/0pmxwScAqtcAHB1KF8AJEmn86wa+u12fZNyRJIUHuiriU83V3hg+V4FCq5aUeM7N9eLbetr4o+/adm2DH2TckTfbz2qpyNr6y/tGyioSgWzYwIO6UqrXJ1uq63KFc0/CxkAOArKFwD9vOeYBi/eqszsfLlYpJfvCdOr9zaQx030ycRhAT76tEdLbT98WuNX7FHinuNakHRQizcd1jPRdfRyu1D5e1/4cRPAzYZVLgC4dpQv4CZ2Jr9Q7y7dqQVJByVJ9atX0oTOzXVbiJ/JyczTpFZlze4TpQ0HTumD5XuUtP+UZq7er7gN6XqudT31u7u+KlfgN/m4+bDKBQDXj/IF3KTW7Tup1xdt0aE/zkqSnmtdT4M6NFIFD1eTkzmG2+tW1cL+d+jfe0/og+V7tO3waf3j51R9vvaAXmgbqj6t66qiB99CUb6dX+Wavz5d319klatHdIhahLDKBQBXi58cgJvMOWuRPli+RzNX75dhSLWqVND4zs35rKuLsFgsurthdbVp4K/lOzI1YcUe7T12Rh8s36NZqw/olXah6h4dIk83CivKl0utcjWs4a3uUSF6glUuALgmlC/gJrLlYJYG/itFacdzJUldbw/W3x++Rd6efCu4HIvFoo5Nauq+W2ro2y2H9eGPe5V+Kk8jvtup6f/er1fvDdOTLWqXuzNC4ubCKhcA2B4/cQE3gYLCYn3y0159mpimomJDAT6eGvdkM7VrHGB2NKfi6mLRE7fV1sPNgvSvjQf1SUKqDmed1ZuLt+mzX/bpb/c11MNNA53yQ6hx8zp91qqvNx/WgiRWuQDA1ihfQDm3OyNbAxdu0c6j2ZKkR5sHaeRjt/Ihp9fB3dVFPaLr6MkWtfXFut/1aWKa9p3I1asLNuvTn1P1+v2NdG94ACsEcFiGYWhTepYWJF24yvVwsyB1jw5mlQsAbIDyBZRTRcWGPvs1TR/++JusRYb8Krpr9ONN9VCzQLOjlRte7q7q26a+ukaFaOaq/Zr26z7tzshR38836raQKhrUoZHuDPU3OyZQglUuADAX5Qsoh/afyNVr/0rRpvQsSVJMeIDe69RUAT5e5gYrp7w93fTqvQ3U8446+uzXfZq9Zr82p2ep+7T1ah1WTa/f3+imPn0/zMUqFwA4DsoXUI4UFxuau+53jflhl85Zi+Xj6aahj9yip1rW5gcrO/Cr5KHBDzTWc63ravLPqZqflK7VqSe1OnWNYsJr6LX7Gyo80NfsmLhJXGqVq1ENH3WLCmaVCwBMQPkCyonDWWc1aNEWrUk7KUm6M7SaPujcXLWqVDA52c0nwNdLIx5ror5t6uvjhL1avOmQVu7KVMLuTD3SLEgD7muoev6VzI6JcujKq1whahFShV/GAIBJKF+AkzMMQ4uSD2nUdzuVk18oL3cXvf1guJ6JrsNZ90wWXLWiPujcXC+0DdWHK3/T0q1H9e2WI1q67ag6t6ytV+9toCDKMW4AVrkAwDlQvgAndiznnN5esk0rdx2TJLUIqaIJT0ewquJgwgK8Nbl7C73U9rQm/vibftp9THEbDmrJpsPqcUeIXr4nTNV9PM2OCSdzqVUuL/c/V7m6RbHKBQCOhvIFOKnvtx7R37/erqw8qzxcXTTgvobqf3d9ubLa5bCa1Kqsmc/eruTfT+n9+D1av/+UZq0+oLikg3rurrrq3yaU1Qlc0eVWubpHh+jx22qpcgWeRwDgiChfgJPJyivQO9/s0HdbjkiSbgn01cQuzdW4JidycBYt61RVXP87tCr1hMYv36Mth05r8s9pmrv2d73QNlTP3llXlTz59oz/OL/KNX99upZuY5ULAJwV/7sDTuSn3Zl6c/E2Hc/Jl6uLRa/cE6rY9g3k4eZidjSUkcViUZsG1XVXmL9W7MzUhBV79FvmGX2wfI9mrd6vl+8JU/foEHm5u5odFSY6fdaqrzYd0oKkg9qTySoXADg7yhfgBHLOWTX6+11auPGgJCm0eiVNeDpCEcFVzA2G62axWNTh1pqKCa+h77Yc0Ycrf9PvJ/M08vudmv7vfXr13gZ6qmVtublSsG8WrHIBQPlF+QIc3Jq0Exq0aKsOZ52VxSI937qeXu/QiBWRcsbVxaLHb6ulh5oFatHGQ/o4Ya+OnD6nwUu26bNf9+lvMQ30SLMgzmBZjrHKBQDlH+ULcFDnrEUaF79bs1YfkCTV9qug8Z2b64761cwNBptyd3VR9+gQdWpRS1+s+12fJqZp/4lc/TUuRVMS0/Ta/Y0UEx7Aqkc58ecq1x+av/4gq1wAcBOgfAEOaHP6H3pt0RbtO54rSeoWFaIhD4XLm5Mw3DS83F3Vt019dY0K0axV+/XPf+/T7owc9ft8oyKCq2hQh0ZqHeZvdkxco9N5Vn21+cJVrsY1/1zleiyCVS4AKI/4SQ5wIAWFxfoo4TdNSUxTsSHV8PXUuCeb6Z5GAWZHg0m8Pd30l3sbqGerOvrs132avfqAUg5mqcf09boztJpe79BILUL8zI6Jq/Dfq1zfbz2i/MLSq1zdo0N0WzCrXABQnlG+AAex62i2BixMKfncnscjgjTi0SZ87hMkSVUqeujNjo3Vp3VdffpzmuavT9eatJPq9OkaxYQH6LX7Gyk8kI8bcESscgEAzqN8ASYrLCrWZ7/u06SVv8laZKhqJQ+NfryJHmwaaHY0OKAAHy8Nf/RW9W1TTx8n7NWXyYe0ctcxrdx1TI80D9KAmAaqX93b7Jg3vcutcj3SLEjdWOUCgJsS5QswUdrxM3rtX1uUcjBLknTfLTX03hNNVd3H09xgcHi1/Srq/aea64W2ofrwx9/0/daj+m7LES3bdlRPtaitV2MaqFaVCmbHvOmwygUAuBzKF2CC4mJDc9Ye0Lj43TpnLZaPp5uGP3qrOrWoxW/CUSah1b31j+4t9NI9pzVxxW9K2H1MCzce1FebD6t7dIheaFPH7IjlnmFIm9KztDD5sJZuPcoqFwDgkihfgJ0d+iNPgxZt1dp9JyVJd4X56/2nmimIVQpch1uDKmvGs7cr+fc/9MHy3Vq375RmrzmghRvSdWtlF63+eodcXPig5hutqLhYq3a66ui6pJJtrHIBAC6F8gXYiWEY+tfGgxr1/S6dyS9UBXdXvf1QuJ6JDuE34rhhWtbx04J+d2h16kl9sGKPthzM0sYTLtp44rDZ0coxS8kqV/foEEWwygUAuATKF2AHx7LPafCSbfpp9zFJUmQdP43v3Fx1/SuZnAzlkcVi0V0N/NU6rJoSdh7VV4kb1ahRI7m6upodrdwpKirSkX179Ea3dqrqU9HsOAAAB0f5Amzsuy1H9M4325WVZ5WHq4teu7+h+rapL1cXfjMO27JYLGrbsLpyUw092La+3N15CdyNZrVatSx3t3y8mC0A4MooX4CNnMot0DvfbNfSrUclSU1q+Wri0xFqWMPH5GQAAAAwA+ULsIGEXZl6c/E2nTiTL1cXi2LbhSm2fZjcXTnhAQAAwM2K8gXcQDnnrBr1/U79a+MhSVJYgLcmPt1czWpXMTcYAAAATEf5Am6QNaknNOjLrTqcdVYWi9T3rnp67f5G8nLnJAcAAACgfAHX7WxBkcbF79bsNQckSSFVK2p85+aKqlfV3GAAAABwKJQv4Dok//6HXl+0RftP5EqSekSH6O0Hw1XJk39aAAAAKI2fEIFrkF9YpEkr9+qzX9JUbEg1fb007qlmatuwutnRAAAA4KAoX0AZ7ThyWq/9a4t2Z+RIkjrdVkvDHrlVlSvyOT8AAAC4NMoXcJUKi4r12b/36qOEvbIWGapWyUPvPtFEHZsEmh0NAAAAToDyBVyFzLNSl2lJ2no4W5LU4dYaeveJpvL39jQ5GQAAAJwF5Qu4grnr0vXBFldZjWz5eLlp5GO36vGIWrJYLGZHAwAAgBOhfAGX8c9f0/Test2SLLorrJo+6NxcgZUrmB0LAAAATojyBVzCvzYc/P/iJT0YXKRJvVrIw8PD5FQAAABwVpQv4CLit2do8JKtkqS+d9VV06JUXmYIAACA6+JidgDA0axJPaFXF2xWsSF1iQzWG/c3MDsSAAAAygHKF/BfthzMUr/PN6qgqFgdb62pd59owooXAAAAbgjKF/D/Uo/l6NlZScotKFLrsGr6qFuE3Fz5JwIAAIAbg58sAUmHs86q54wk/ZFnVfPalfVZz0h5urmaHQsAAADlCOULN70TZ/LVc/p6HT19TmEB3prVJ0renpyLBgAAADcW5Qs3tZxzVj07K0n7TuSqVpUKmvt8lKpW4nTyAAAAuPFML1+TJ09W3bp15eXlpejoaCUlJV1y32nTpqlNmzby8/OTn5+fYmJiLtjfYrFc9PLBBx+U7FO3bt0Lbh87dqzNjhGO6Zy1SP0+36jth7NVrZKH5j4fxQcoAwAAwGZMLV8LFy7UwIEDNWzYMG3atEnNmzdXhw4ddOzYsYvun5iYqG7duunnn3/W2rVrFRwcrPvvv1+HDx8u2efo0aOlLjNnzpTFYtGTTz5Z6r5GjhxZar+//OUvNj1WOJbComLFzt+sdftOydvTTXOei1L96t5mxwIAAEA5ZuobWyZOnKh+/fqpT58+kqSpU6dq6dKlmjlzpgYPHnzB/vPmzSt1ffr06Vq8eLESEhLUq1cvSVLNmjVL7fPNN9+oXbt2ql+/fqntPj4+F+yLm0NxsaE3F2/Tyl2Z8nRz0fTekWpSq7LZsQAAAFDOmVa+CgoKlJycrLfeeqtkm4uLi2JiYrR27dqruo+8vDxZrVZVrVr1ordnZmZq6dKlmjNnzgW3jR07VqNGjVJISIi6d++uAQMGyM3t0uPIz89Xfn5+yfXs7GxJktVqldVqvaq8tnL+8c3O4QwMw9CY+N+0eNMhubpY9NHTzdQy2Peys2O+tsV8bYv52hbztS3ma1vM17aYr2052nyvNofFMAzDxlku6siRI6pVq5bWrFmjVq1alWx/44039Msvv2j9+vVXvI+XX35Zy5cv144dO+Tl5XXB7e+//77Gjh2rI0eOlLp94sSJatGihapWrao1a9borbfeUp8+fTRx4sRLPtbw4cM1YsSIC7bPnz9fFStWvGJWOIYVhyxaevDPU8j3CCtSVHVTnv4AAAAoR/Ly8tS9e3edPn1avr6+l9zPac+nPXbsWMXFxSkxMfGixUuSZs6cqR49elxw+8CBA0v+3KxZM3l4eOiFF17QmDFj5OnpedH7euutt0p9XXZ2dsl7zi43YHuwWq368ccfdd9998nd3d3ULI5sftJBLV27S5L09gON1OfOOlf1dczXtpivbTFf22K+tsV8bYv52hbztS1Hm+/5V8VdiWnly9/fX66ursrMzCy1PTMz84rvxRo/frzGjh2rlStXqlmzZhfd59///rf27NmjhQsXXjFLdHS0CgsLdeDAATVq1Oii+3h6el60mLm7uzvEX7jkWFkczXdbjmj4938Wr7+0D1P/tmFlvg/ma1vM17aYr20xX9tivrbFfG2L+dqWo8z3ajOYdrZDDw8PtWzZUgkJCSXbiouLlZCQUOpliP/r/fff16hRoxQfH6/IyMhL7jdjxgy1bNlSzZs3v2KWlJQUubi4KCAgoGwHAafwy2/HNfBfKTIMqecddTTwvoZmRwIAAMBNyNSXHQ4cOFC9e/dWZGSkoqKiNGnSJOXm5pac/bBXr16qVauWxowZI0kaN26chg4dqvnz56tu3brKyMiQJHl7e8vb+z+nCc/OztaiRYs0YcKECx5z7dq1Wr9+vdq1aycfHx+tXbtWAwYM0DPPPCM/Pz87HDXsKfn3U3pxbrKsRYYeaR6kEY/eKovFYnYsAAAA3IRMLV9dunTR8ePHNXToUGVkZCgiIkLx8fGqUaOGJCk9PV0uLv9ZnJsyZYoKCgr01FNPlbqfYcOGafjw4SXX4+LiZBiGunXrdsFjenp6Ki4uTsOHD1d+fr7q1aunAQMGlHo/F8qH3RnZ6jNrg85ai9S2YXVN6NxcLi4ULwAAAJjD9BNuxMbGKjY29qK3JSYmlrp+4MCBq7rP/v37q3///he9rUWLFlq3bl1ZIsIJpZ/MU88ZSco+V6iWdfw05ZkW8nAz9TPFAQAAcJPjp1GUO8dyzumZGet1PCdfjWv6aGbv21XRw/TfMwAAAOAmR/lCuXL6rFW9ZiQp/VSeQqpW1OfPRalyRfPPgAMAAABQvlBunC0o0vOzN2h3Ro6q+3jqi+ejFeB78c+AAwAAAOyN8oVyoaCwWC/NS9bG3/+Qr5ebPn8uSiHVKpodCwAAAChB+YLTKy429PqiLUrcc1xe7i6a+eztCg/0NTsWAAAAUArlC07NMAwN/26Hvt1yRG4uFk19pqUi61Y1OxYAAABwAcoXnNqHK/fq87W/y2KRJnaJ0D2NAsyOBAAAAFwU5QtOa9bq/fo4Ya8kaeRjTfRo8yCTEwEAAACXRvmCU1qy6ZBGfLdTkvTafQ3V8446JicCAAAALo/yBaezcmemBn25VZL0XOt6im0fZnIiAAAA4MooX3Aq6/ed1CvzN6mo2FCn22rp7w+Fy2KxmB0LAAAAuCLKF5zG9sOn1XfORuUXFismPEDjnmomFxeKFwAAAJwD5QtOYf+JXD07K0k5+YWKqldV/+jeQu6uPH0BAADgPPjpFQ7v6Omzemb6ep04U6Bbg3w1vXekvNxdzY4FAAAAlAnlCw7tj9wC9ZqRpMNZZ1XPv5LmPBclXy93s2MBAAAAZUb5gsM6k1+oZ2dv0N5jZ1TT10tzn4+Sv7en2bEAAACAa0L5gkPKLyzSC3M3asvBLFWp6K65z0eptl9Fs2MBAAAA14zyBYdTVGzob3EpWp16UhU9XDW7T5Qa1PAxOxYAAABwXShfcCiGYWjIV9v0w/YMebi6aFqvSEUEVzE7FgAAAHDdKF9wKOPi9yhuw0G5WKSPu0WodZi/2ZEAAACAG4LyBYfx2S9pmvpLmiRpTKem6tgk0OREAAAAwI1D+YJDWLghXWN+2C1JGvxAY3W5PcTkRAAAAMCNRfmC6eK3H9VbS7ZJkl5oW18vtg01OREAAABw41G+YKrVqSf06oIUFRtS19uDNbhjY7MjAQAAADZB+YJpthzMUv/PN6qgqFgPNKmpd59oKovFYnYsAAAAwCYoXzBF6rEcPTsrSbkFRWodVk2TukbI1YXiBQAAgPKL8gW7O/RHnp6ZnqQ/8qxqXruyPusZKU83V7NjAQAAADZF+YJdnTiTr54zkpSRfU5hAd6a3SdK3p5uZscCAAAAbI7yBbvJOWdV75lJ2n8iV7WqVNDc56PkV8nD7FgAAACAXVC+YBfnrEXqO2ejdhzJVrVKHpr7fJQCK1cwOxYAAABgN5Qv2FxhUbFi52/W+v2n5OPppjnPRal+dW+zYwEAAAB2RfmCTRUXG3pj8Vat3JUpTzcXTe8dqSa1KpsdCwAAALA7yhdsxjAMjV66S0s2HZari0WTu7dQdP1qZscCAAAATEH5gs3846dUzVy9X5L0wVPNFHNLDZMTAQAAAOahfMEm5q77XRN+/E2SNPThW9SpRW2TEwEAAADmonzhhvt2yxEN/Wa7JOnV9mF67q56JicCAAAAzEf5wg2VuOeYBi5MkWFIPe+oowH3NTQ7EgAAAOAQKF+4YZJ/P6UXv0hWYbGhR5oHacSjt8pisZgdCwAAAHAIlC/cELuOZqvPrA06Zy1W24bVNaFzc7m4ULwAAACA8yhfuG6/n8xVr5lJyj5XqJZ1/DT1mZbycOOpBQAAAPw3fkLGdTmWfU49ZyTpeE6+Gtf00czet6uCh6vZsQAAAACHQ/nCNTudZ1WvmUlKP5WnkKoV9flzUapc0d3sWAAAAIBDonzhmuQVFOq5ORu0OyNH1X089cXz0Qrw9TI7FgAAAOCwKF8os4LCYr30xSYl//6HfL3cNPf5KIVUq2h2LAAAAMChUb5QJkXFhl5btEW//HZcXu4umtXndjWu6Wt2LAAAAMDhUb5w1QzD0LBvt+u7LUfk7mrR1GdaqmWdqmbHAgAAAJwC5QtX7cMff9MX69JlsUgTn47QPY0CzI4EAAAAOA3KF67KzFX79fFPqZKkkY810SPNg0xOBAAAADgXyheuaHHyIY38fqck6bX7GqrnHXVMTgQAAAA4H8oXLuvHnZl6Y/FWSdJzresptn2YyYkAAAAA50T5wiWt23dSr8zfpKJiQ0+2qK2/PxQui8VidiwAAADAKZleviZPnqy6devKy8tL0dHRSkpKuuS+06ZNU5s2beTn5yc/Pz/FxMRcsP+zzz4ri8VS6tKxY8dS+5w6dUo9evSQr6+vqlSpoueff15nzpyxyfE5q+2HT6vvnI0qKCxWTHgNjXuyqVxcKF4AAADAtTK1fC1cuFADBw7UsGHDtGnTJjVv3lwdOnTQsWPHLrp/YmKiunXrpp9//llr165VcHCw7r//fh0+fLjUfh07dtTRo0dLLgsWLCh1e48ePbRjxw79+OOP+v777/Xrr7+qf//+NjtOZ7Pv+Bn1npmkM/mFiq5XVf/ofpvcXE3v6QAAAIBTczPzwSdOnKh+/fqpT58+kqSpU6dq6dKlmjlzpgYPHnzB/vPmzSt1ffr06Vq8eLESEhLUq1evku2enp6qWbPmRR9z165dio+P14YNGxQZGSlJ+uSTT/Tggw9q/PjxCgq6+Fn88vPzlZ+fX3I9OztbkmS1WmW1Wstw1Dfe+ce/ETmOnj6nZ6Yn6WRugW4N8tGU7hFyVbGs1uLrvm9ndSPniwsxX9tivrbFfG2L+doW87Ut5mtbjjbfq81hMQzDsHGWiyooKFDFihX15Zdf6vHHHy/Z3rt3b2VlZembb7654n3k5OQoICBAixYt0sMPPyzpz5cdfv311/Lw8JCfn5/at2+v0aNHq1q1apKkmTNn6rXXXtMff/xRcj+FhYXy8vLSokWL9MQTT1z0sYYPH64RI0ZcsH3+/PmqWLFiWQ7dYZ2xSh/vcFXmWYsCvAy92qRIPu5mpwIAAAAcW15enrp3767Tp0/L19f3kvuZtvJ14sQJFRUVqUaNGqW216hRQ7t3776q+3jzzTcVFBSkmJiYkm0dO3ZUp06dVK9ePaWlpentt9/WAw88oLVr18rV1VUZGRkKCCj94cBubm6qWrWqMjIyLvlYb731lgYOHFhyPTs7u+Rlj5cbsD1YrVb9+OOPuu++++Tufm1t6Ux+oXrP2qjMs9mq6eupuH5RqlWlwg1O6pxuxHxxaczXtpivbTFf22K+tsV8bYv52pajzff8q+KuxNSXHV6PsWPHKi4uTomJifLy8irZ3rVr15I/N23aVM2aNVNoaKgSExN17733XvPjeXp6ytPT84Lt7u7uDvEXLl17lvzCIsXGbdHWw9nyq+iuL/pGq251HxskdG6O9HddHjFf22K+tsV8bYv52hbztS3ma1uOMt+rzWDaWRT8/f3l6uqqzMzMUtszMzMv+X6t88aPH6+xY8dqxYoVatas2WX3rV+/vvz9/ZWamipJqlmz5gUn9CgsLNSpU6eu+LjlUVGxob8uSNHq1JOq5OGq2X2iFBZA8QIAAABuNNPKl4eHh1q2bKmEhISSbcXFxUpISFCrVq0u+XXvv/++Ro0apfj4+JITZlzOoUOHdPLkSQUGBkqSWrVqpaysLCUnJ5fs89NPP6m4uFjR0dHXcUTOxzAMvb1km+J3ZMjD1UX/7BWp5sFVzI4FAAAAlEumnj984MCBmjZtmubMmaNdu3bppZdeUm5ubsnZD3v16qW33nqrZP9x48bpnXfe0cyZM1W3bl1lZGQoIyOj5DO6zpw5o0GDBmndunU6cOCAEhIS9NhjjyksLEwdOnSQJIWHh6tjx47q16+fkpKStHr1asXGxqpr166XPNNheTU2frcWbjwoF4v0cbcItQ7zNzsSAAAAUG6Z+p6vLl266Pjx4xo6dKgyMjIUERGh+Pj4kpNwpKeny8XlP/1wypQpKigo0FNPPVXqfoYNG6bhw4fL1dVVW7du1Zw5c5SVlaWgoCDdf//9GjVqVKn3a82bN0+xsbG699575eLioieffFIff/yxfQ7aQUz9JU2f/bJPkjSmU1N1bBJociIAAACgfDP9hBuxsbGKjY296G2JiYmlrh84cOCy91WhQgUtX778io9ZtWpVzZ8//2ojljtxSeka+8OfZ5R864HG6nJ7iMmJAAAAgPLP1Jcdwv5+2HZUb3+1TZL0YttQvdA21OREAAAAwM2B8nUTWbX3hP4al6JiQ+oWFaw3OzYyOxIAAABw06B83SRSDmap/9yNKigq1gNNamr0401lsVjMjgUAAADcNChfN4G9mTl6dlaS8gqKdFeYvyZ1jZCrC8ULAAAAsCfKVzl36I889ZyRpKw8q5oHV9FnPVvK083V7FgAAADATYfyVY4dz8lXzxlJysg+pwYB3pr97O2q5Gn6CS4BAACAmxLlq5zKPmdV75lJ2n8iV7WqVNDc56PlV8nD7FgAAADATYvyVQ6dsxap75yN2nk0W/7eHvqib7RqVvYyOxYAAABwU6N8lTPWomLFzt+kpP2n5OPpptl9olTPv5LZsQAAAICbHuWrHCkuNvTml1u1ctcxebq5aHrvSDWpVdnsWAAAAABE+So3DEN6L36Plmw+LFcXiyZ3b6Ho+tXMjgUAAADg/3Hqu3JixWGLlh1MlySN79xMMbfUMDkRAAAAgP/Gylc5MG99upYd/POzu4Y9coueuK22yYkAAAAA/C/Kl5NL2JWpEUt3S5Ji76mvPq3rmZwIAAAAwMXwskMnF1m3qlqGVFGFc6f0avtQs+MAAAAAuARWvpxc5Qrumt27pTrVK5bFYjE7DgAAAIBLoHyVA57urnKhdwEAAAAOjfIFAAAAAHZA+QIAAAAAO6B8AQAAAIAdUL4AAAAAwA4oXwAAAABgB5QvAAAAALADyhcAAAAA2AHlCwAAAADsgPIFAAAAAHZA+QIAAAAAO6B8AQAAAIAdUL4AAAAAwA4oXwAAAABgB5QvAAAAALADyhcAAAAA2AHlCwAAAADsgPIFAAAAAHbgZnYAZ2UYhiQpOzvb5CSS1WpVXl6esrOz5e7ubnaccof52hbztS3ma1vM17aYr20xX9tivrblaPM93wnOd4RLoXxdo5ycHElScHCwyUkAAAAAOIKcnBxVrlz5krdbjCvVM1xUcXGxjhw5Ih8fH1ksFlOzZGdnKzg4WAcPHpSvr6+pWcoj5mtbzNe2mK9tMV/bYr62xXxti/nalqPN1zAM5eTkKCgoSC4ul35nFytf18jFxUW1a9c2O0Ypvr6+DvHkK6+Yr20xX9tivrbFfG2L+doW87Ut5mtbjjTfy614nccJNwAAAADADihfAAAAAGAHlK9ywNPTU8OGDZOnp6fZUcol5mtbzNe2mK9tMV/bYr62xXxti/nalrPOlxNuAAAAAIAdsPIFAAAAAHZA+QIAAAAAO6B8AQAAAIAdUL4AAAAAwA4oX05i8uTJqlu3rry8vBQdHa2kpKRL7rtjxw49+eSTqlu3riwWiyZNmmS/oE6qLPOdNm2a2rRpIz8/P/n5+SkmJuay+6Ns812yZIkiIyNVpUoVVapUSREREZo7d64d0zqfssz3v8XFxclisejxxx+3bUAnV5b5zp49WxaLpdTFy8vLjmmdT1mfv1lZWXrllVcUGBgoT09PNWzYUMuWLbNTWudTlvnec889Fzx/LRaLHnroITsmdi5lff5OmjRJjRo1UoUKFRQcHKwBAwbo3LlzdkrrfMoyX6vVqpEjRyo0NFReXl5q3ry54uPj7Zj2KhlweHFxcYaHh4cxc+ZMY8eOHUa/fv2MKlWqGJmZmRfdPykpyXj99deNBQsWGDVr1jQ+/PBD+wZ2MmWdb/fu3Y3JkycbmzdvNnbt2mU8++yzRuXKlY1Dhw7ZOblzKOt8f/75Z2PJkiXGzp07jdTUVGPSpEmGq6urER8fb+fkzqGs8z1v//79Rq1atYw2bdoYjz32mH3COqGyznfWrFmGr6+vcfTo0ZJLRkaGnVM7j7LONz8/34iMjDQefPBBY9WqVcb+/fuNxMREIyUlxc7JnUNZ53vy5MlSz93t27cbrq6uxqxZs+wb3EmUdb7z5s0zPD09jXnz5hn79+83li9fbgQGBhoDBgywc3LnUNb5vvHGG0ZQUJCxdOlSIy0tzfj0008NLy8vY9OmTXZOfnmULycQFRVlvPLKKyXXi4qKjKCgIGPMmDFX/No6depQvq7geuZrGIZRWFho+Pj4GHPmzLFVRKd2vfM1DMO47bbbjL///e+2iOf0rmW+hYWFxp133mlMnz7d6N27N+XrMso631mzZhmVK1e2UzrnV9b5Tpkyxahfv75RUFBgr4hO7Xq//3744YeGj4+PcebMGVtFdGplne8rr7xitG/fvtS2gQMHGq1bt7ZpTmdV1vkGBgYa//jHP0pt69Spk9GjRw+b5iwrXnbo4AoKCpScnKyYmJiSbS4uLoqJidHatWtNTFY+3Ij55uXlyWq1qmrVqraK6bSud76GYSghIUF79uzR3XffbcuoTula5zty5EgFBATo+eeft0dMp3Wt8z1z5ozq1Kmj4OBgPfbYY9qxY4c94jqda5nvt99+q1atWumVV15RjRo11KRJE7333nsqKiqyV2yncSP+f5sxY4a6du2qSpUq2Sqm07qW+d55551KTk4ueencvn37tGzZMj344IN2yexMrmW++fn5F7zMu0KFClq1apVNs5aVm9kBcHknTpxQUVGRatSoUWp7jRo1tHv3bpNSlR83Yr5vvvmmgoKCSn2DwJ+udb6nT59WrVq1lJ+fL1dXV3366ae67777bB3X6VzLfFetWqUZM2YoJSXFDgmd27XMt1GjRpo5c6aaNWum06dPa/z48brzzju1Y8cO1a5d2x6xnca1zHffvn366aef1KNHDy1btkypqal6+eWXZbVaNWzYMHvEdhrX+/9bUlKStm/frhkzZtgqolO7lvl2795dJ06c0F133SXDMFRYWKgXX3xRb7/9tj0iO5VrmW+HDh00ceJE3X333QoNDVVCQoKWLFnicL+cYeULuA5jx45VXFycvvrqK95UfwP5+PgoJSVFGzZs0LvvvquBAwcqMTHR7FhOLycnRz179tS0adPk7+9vdpxyqVWrVurVq5ciIiLUtm1bLVmyRNWrV9dnn31mdrRyobi4WAEBAfrnP/+pli1bqkuXLhoyZIimTp1qdrRyZ8aMGWratKmioqLMjlJuJCYm6r333tOnn36qTZs2acmSJVq6dKlGjRpldrRy4aOPPlKDBg3UuHFjeXh4KDY2Vn369JGLi2PVHVa+HJy/v79cXV2VmZlZantmZqZq1qxpUqry43rmO378eI0dO1YrV65Us2bNbBnTaV3rfF1cXBQWFiZJioiI0K5duzRmzBjdc889tozrdMo637S0NB04cECPPPJIybbi4mJJkpubm/bs2aPQ0FDbhnYiN+L7r7u7u2677TalpqbaIqJTu5b5BgYGyt3dXa6uriXbwsPDlZGRoYKCAnl4eNg0szO5nudvbm6u4uLiNHLkSFtGdGrXMt933nlHPXv2VN++fSVJTZs2VW5urvr3768hQ4Y4XEkw07XMt3r16vr666917tw5nTx5UkFBQRo8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\n"},"metadata":{}}]},{"cell_type":"code","source":["predicted_classes_test = (predictions_test >= best_threshold).astype(int)\n","\n","# Imprimir el reporte de clasificación con el mejor threshold\n","print(\"Test set classification report with custom threshold:\")\n","print(classification_report(y_test, predicted_classes_test, target_names=['Clase 0', 'Clase 1']))\n","\n","# Calcular la precisión y el recall con el mejor threshold\n","precision = precision_score(y_test, predicted_classes_test)\n","recall = recall_score(y_test, predicted_classes_test)\n","\n","print(\"Precision (Test Set, Class 1) with custom threshold:\", precision)\n","print(\"Recall (Test Set, Class 1) with custom threshold:\", recall)\n","\n","# AUC Score no se afecta por el threshold, pero se puede recalcular para referencia\n","auc_score_test = roc_auc_score(y_test, predictions_test)\n","print(\"Test set AUC Score:\", auc_score_test)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dAUu84D0KUkF","executionInfo":{"status":"ok","timestamp":1732034918657,"user_tz":300,"elapsed":262,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"fcfa4cef-52ca-45c3-aaba-40396f3ea345"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Test set classification report with custom threshold:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.84      0.85      0.84        67\n","     Clase 1       0.38      0.35      0.36        17\n","\n","    accuracy                           0.75        84\n","   macro avg       0.61      0.60      0.60        84\n","weighted avg       0.74      0.75      0.75        84\n","\n","Precision (Test Set, Class 1) with custom threshold: 0.375\n","Recall (Test Set, Class 1) with custom threshold: 0.35294117647058826\n","Test set AUC Score: 0.617208077260755\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import roc_curve, auc\n","import matplotlib.pyplot as plt\n","\n","# Calcular la curva ROC y el AUC\n","fpr, tpr, _ = roc_curve(y_test, predictions_test)\n","roc_auc = auc(fpr, tpr)\n","\n","# Graficar la curva ROC\n","plt.figure(figsize=(10, 6))\n","plt.plot(fpr, tpr, color='blue', label=f'ROC Curve (AUC = {roc_auc:.4f})')\n","plt.plot([0, 1], [0, 1], color='gray', linestyle='--')  # Línea de referencia (clasificador aleatorio)\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic (ROC) Curve')\n","plt.legend(loc='lower right')\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"AA-F6vWaKUcz","executionInfo":{"status":"ok","timestamp":1732034923257,"user_tz":300,"elapsed":566,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"75011504-d918-4cbc-f736-b65a59f2412a"},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#RESULTADOS ANTERIORES"],"metadata":{"id":"2Hb-In3rKVNr"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":34456,"status":"ok","timestamp":1731541110728,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"4-LSwrhIkB7e","outputId":"d988939b-65d4-404e-91f1-590b29656bb9"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 3s/step\n","Test set classification report after fine-tuning:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.81      0.88      0.84        67\n","     Clase 1       0.27      0.18      0.21        17\n","\n","    accuracy                           0.74        84\n","   macro avg       0.54      0.53      0.53        84\n","weighted avg       0.70      0.74      0.72        84\n","\n","Test set AUC Score after fine-tuning: 0.5013169446883231\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 770ms/step\n","Train set classification report after fine-tuning:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.79      0.79      0.79       265\n","     Clase 1       0.19      0.19      0.19        70\n","\n","    accuracy                           0.67       335\n","   macro avg       0.49      0.49      0.49       335\n","weighted avg       0.66      0.67      0.66       335\n","\n","Train set AUC Score after fine-tuning: 0.4768733153638814\n"]}],"source":["from sklearn.metrics import classification_report, roc_auc_score\n","import matplotlib.pyplot as plt\n","\n","predictions_test = model.predict(test_data)\n","predicted_classes_test = np.round(predictions_test).astype(int)\n","\n","y_test = test_data.classes\n","\n","print(\"Test set classification report after fine-tuning:\")\n","print(classification_report(y_test, predicted_classes_test, target_names=['Clase 0', 'Clase 1']))\n","\n","auc_score_test = roc_auc_score(y_test, predictions_test)\n","print(\"Test set AUC Score after fine-tuning:\", auc_score_test)\n","\n","predictions_train = model.predict(train_data, steps=len(train_data), verbose=1)\n","predicted_classes_train = np.round(predictions_train).astype(int)\n","\n","y_train = train_data.classes\n","\n","print(\"Train set classification report after fine-tuning:\")\n","print(classification_report(y_train, predicted_classes_train, target_names=['Clase 0', 'Clase 1']))\n","\n","auc_score_train = roc_auc_score(y_train, predictions_train)\n","print(\"Train set AUC Score after fine-tuning:\", auc_score_train)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-XZD7a7bS_E-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731541111579,"user_tz":300,"elapsed":858,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"84d18058-a57f-44c7-c8e7-4f02d8c2de14"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 149ms/step\n","Precision (Test Set, Class 1): 0.18181818181818182\n","Recall (Test Set, Class 1): 0.11764705882352941\n"]}],"source":["from sklearn.metrics import precision_score, recall_score\n","\n","predictions_test = model.predict(test_data)\n","predicted_classes_test = np.round(predictions_test).astype(int)\n","y_test = test_data.classes\n","\n","precision = precision_score(y_test, predicted_classes_test, average='binary', pos_label=1)\n","recall = recall_score(y_test, predicted_classes_test, average='binary', pos_label=1)\n","\n","print(\"Precision (Test Set, Class 1):\", precision)\n","print(\"Recall (Test Set, Class 1):\", recall)\n"]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"1XIQFivksNtyQmwqnxks8C3ziza499LmP","timestamp":1730227391477},{"file_id":"1bjaSRpUcyvdW5ToIZOb6Chi25LFZdZfA","timestamp":1730224807557},{"file_id":"1iW4qIigqB1uLTToYyPiOVwfgxmCnYXu9","timestamp":1729724070861},{"file_id":"14fteFtlnQAPiYwhAGEJVG3hHVHd9Fws5","timestamp":1729721692840},{"file_id":"14Z8LyP99xukHAoKBlOND6lfaRzOw024N","timestamp":1729719207228},{"file_id":"1hIS32OaEWe-ub6AUubjHFbCV-8Z9u3e9","timestamp":1729717024634},{"file_id":"1Dy-ngKQNSjbvLSnW9IYEw7uWEdMIUFgq","timestamp":1729713437883},{"file_id":"1OiHTrqHFB4BjQ4f7IPOxietIlC52S_-i","timestamp":1729710879543},{"file_id":"1iai0MKDIBpG8pBwceGufqM_mQrDGZK7p","timestamp":1729633654784},{"file_id":"1wthMRVFFFGVjNES7VdM8WmkjT1qoCcMK","timestamp":1729632597533},{"file_id":"1EuTB-NizY2iH3JrbCqFE3YPuNjKEQw8-","timestamp":1729622886260}],"collapsed_sections":["2Hb-In3rKVNr"],"authorship_tag":"ABX9TyNt1GmxeiSZQzQqWp/6eon4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}