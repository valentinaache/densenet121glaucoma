{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"14fteFtlnQAPiYwhAGEJVG3hHVHd9Fws5","timestamp":1729721692840},{"file_id":"14Z8LyP99xukHAoKBlOND6lfaRzOw024N","timestamp":1729719207228},{"file_id":"1hIS32OaEWe-ub6AUubjHFbCV-8Z9u3e9","timestamp":1729717024634},{"file_id":"1Dy-ngKQNSjbvLSnW9IYEw7uWEdMIUFgq","timestamp":1729713437883},{"file_id":"1OiHTrqHFB4BjQ4f7IPOxietIlC52S_-i","timestamp":1729710879543},{"file_id":"1iai0MKDIBpG8pBwceGufqM_mQrDGZK7p","timestamp":1729633654784},{"file_id":"1wthMRVFFFGVjNES7VdM8WmkjT1qoCcMK","timestamp":1729632597533},{"file_id":"1EuTB-NizY2iH3JrbCqFE3YPuNjKEQw8-","timestamp":1729622886260}],"gpuType":"T4","collapsed_sections":["xKngr2gTJVyE"],"authorship_tag":"ABX9TyO2BimsV4IdhrKwb1V0vS20"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"boX8ZPtfYMuE","executionInfo":{"status":"ok","timestamp":1732573837525,"user_tz":300,"elapsed":28205,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"ede016c7-f41c-4286-b471-81c14cd97fb5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mQzpyzneXrW8","executionInfo":{"status":"ok","timestamp":1732573849174,"user_tz":300,"elapsed":7835,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"9d3396bc-bfae-47d9-ff53-6b3fa50c280d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train DataFrame:\n","                                             filename   id eye Diagnosis\n","2   /content/drive/My Drive/Proyecto de Grado G/Pr...  004  OD         1\n","3   /content/drive/My Drive/Proyecto de Grado G/Pr...  004  OS         1\n","4   /content/drive/My Drive/Proyecto de Grado G/Pr...  005  OD         1\n","5   /content/drive/My Drive/Proyecto de Grado G/Pr...  005  OS         1\n","14  /content/drive/My Drive/Proyecto de Grado G/Pr...  010  OD         1\n","\n","Test DataFrame:\n","                                             filename   id eye Diagnosis\n","20  /content/drive/My Drive/Proyecto de Grado G/Pr...  015  OD         1\n","21  /content/drive/My Drive/Proyecto de Grado G/Pr...  015  OS         1\n","32  /content/drive/My Drive/Proyecto de Grado G/Pr...  023  OD         1\n","33  /content/drive/My Drive/Proyecto de Grado G/Pr...  023  OS         1\n","42  /content/drive/My Drive/Proyecto de Grado G/Pr...  028  OD         0\n"]}],"source":["import pandas as pd\n","from sklearn.model_selection import StratifiedShuffleSplit\n","import numpy as np\n","import os\n","\n","# Ruta al directorio con las imágenes\n","directorio_imagenes = '/content/drive/My Drive/Proyecto de Grado G/ProcessedImages_Disc_Exp2'\n","\n","imagenes_info = []\n","for filename in os.listdir(directorio_imagenes):\n","    if filename.endswith('.jpg') or filename.endswith('.png'):\n","        base = filename.split('_')[0]\n","        id_paciente = base[3:-2]  # Extrae correctamente el ID del paciente\n","        tipo_ojo = base[-2:]\n","        full_path = os.path.join(directorio_imagenes, filename)\n","        imagenes_info.append({'filename': full_path, 'id': id_paciente, 'eye': tipo_ojo})\n","\n","imagenes_df = pd.DataFrame(imagenes_info)\n","\n","# Cargar y preparar los datos clínicos\n","data_od = pd.read_excel('/content/drive/My Drive/Proyecto de Grado G/patient_data_od.xlsx')\n","data_os = pd.read_excel('/content/drive/My Drive/Proyecto de Grado G/patient_data_os.xlsx')\n","\n","data_od['id'] = data_od['Unnamed: 0'].str.replace('#', '').astype(str)\n","data_os['id'] = data_os['Unnamed: 0'].str.replace('#', '').astype(str)\n","\n","data_od['eye'] = 'OD'\n","data_os['eye'] = 'OS'\n","\n","data_clinica = pd.concat([data_od[['id', 'eye', 'Diagnosis']], data_os[['id', 'eye', 'Diagnosis']]])\n","\n","full_df = pd.merge(imagenes_df, data_clinica, on=['id', 'eye'], how='left')\n","full_df = full_df[full_df['Diagnosis'] != 2]\n","\n","dominant_diagnosis = full_df.groupby('id')['Diagnosis'].agg(lambda x: x.mode()[0])\n","\n","\n","patient_df = pd.DataFrame(dominant_diagnosis).reset_index()\n","\n","splitter = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n","train_patients, test_patients = next(splitter.split(patient_df, patient_df['Diagnosis']))\n","\n","train_ids = patient_df.iloc[train_patients]['id']\n","test_ids = patient_df.iloc[test_patients]['id']\n","\n","train_df = full_df[full_df['id'].isin(train_ids)]\n","test_df = full_df[full_df['id'].isin(test_ids)]\n","\n","print(\"Train DataFrame:\")\n","print(train_df[['filename', 'id', 'eye', 'Diagnosis']].head())\n","\n","print(\"\\nTest DataFrame:\")\n","print(test_df[['filename', 'id', 'eye', 'Diagnosis']].head())"]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import os\n","from tensorflow.keras.applications.inception_v3 import InceptionV3, preprocess_input\n","from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Input\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n","from sklearn.metrics import roc_auc_score\n","from sklearn.model_selection import StratifiedShuffleSplit\n","from sklearn.utils.class_weight import compute_class_weight\n","# Preparar los generadores de datos\n","train_datagen = ImageDataGenerator(\n","    preprocessing_function=preprocess_input,\n","    rotation_range=10,\n","    width_shift_range=0.2,\n","    height_shift_range=0.2,\n","    horizontal_flip=True,\n","    vertical_flip=True,\n","    shear_range=0.2,\n","    zoom_range=0.2,\n","    validation_split=0.2\n",")\n","\n","test_datagen = ImageDataGenerator(\n","    preprocessing_function=preprocess_input,\n",")\n","\n","train_df['Diagnosis'] = train_df['Diagnosis'].astype(str)\n","test_df['Diagnosis'] = test_df['Diagnosis'].astype(str)\n","\n","train_data = train_datagen.flow_from_dataframe(\n","    dataframe=train_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=20,\n","    class_mode='binary'\n",")\n","\n","test_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode='binary'\n",")\n","\n","valid_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode='binary'\n",")\n"],"metadata":{"id":"4YD6q2Ue5XkZ","colab":{"base_uri":"https://localhost:8080/"},"outputId":"8cd6b231-9223-4322-d13a-ce44c461595a","executionInfo":{"status":"ok","timestamp":1732573855022,"user_tz":300,"elapsed":3447,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 335 validated image filenames belonging to 2 classes.\n","Found 84 validated image filenames belonging to 2 classes.\n","Found 84 validated image filenames belonging to 2 classes.\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-3-32b89a1f5abf>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train_df['Diagnosis'] = train_df['Diagnosis'].astype(str)\n","<ipython-input-3-32b89a1f5abf>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_df['Diagnosis'] = test_df['Diagnosis'].astype(str)\n"]}]},{"cell_type":"code","source":["from sklearn.utils.class_weight import compute_class_weight\n","import pandas as pd\n","\n","# Convertir 'Diagnosis' de cadena a enteros\n","train_df['Diagnosis'] = train_df['Diagnosis'].astype(int)\n","test_df['Diagnosis'] = test_df['Diagnosis'].astype(int)\n","\n","# Verificar que la conversión fue exitosa\n","print(\"Valores únicos en 'Diagnosis' después de la conversión:\", train_df['Diagnosis'].unique())\n","\n","# Calcular los pesos de clases\n","class_weights = compute_class_weight(\n","    class_weight='balanced',\n","    classes=np.unique(train_df['Diagnosis']),\n","    y=train_df['Diagnosis']\n",")\n","class_weights = dict(enumerate(class_weights))\n","\n","print(\"Class weights:\", class_weights)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j6-13qP2n_02","executionInfo":{"status":"ok","timestamp":1732573861538,"user_tz":300,"elapsed":1011,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"ef3ef8b0-b4e6-422f-d399-0ae83793dd09"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Valores únicos en 'Diagnosis' después de la conversión: [1 0]\n","Class weights: {0: 0.6320754716981132, 1: 2.392857142857143}\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-4-5d28dd34677d>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train_df['Diagnosis'] = train_df['Diagnosis'].astype(int)\n","<ipython-input-4-5d28dd34677d>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_df['Diagnosis'] = test_df['Diagnosis'].astype(int)\n"]}]},{"cell_type":"code","source":["input_tensor = Input(shape=(299, 299, 3))\n","base_model = InceptionV3(input_tensor=input_tensor, weights='imagenet', include_top=False, pooling='avg')\n","\n","x = base_model.output\n","x = Dense(2048, activation='relu')(x)\n","predictions = Dense(1, activation='sigmoid')(x)\n","model = Model(inputs=base_model.input, outputs=predictions)\n","\n","for layer in base_model.layers:\n","    layer.trainable = False\n","\n","model.compile(optimizer=Adam(learning_rate=0.0001), loss='binary_crossentropy')\n","\n","checkpoint = ModelCheckpoint('best_model_warmup.keras', monitor='val_loss', save_best_only=True, mode='min', verbose=1)\n","early_stop = EarlyStopping(monitor='val_loss', patience=25, restore_best_weights=True, mode='min')\n","\n","print(\"Inicio de Warm-Up Training...\\n\")\n","warmup_history = model.fit(\n","    train_data,\n","    validation_data=valid_data,\n","    epochs=50,\n","    callbacks=[checkpoint, early_stop],\n","    class_weight=class_weights\n",")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RNcbG_WLm8Ma","executionInfo":{"status":"ok","timestamp":1732574582197,"user_tz":300,"elapsed":712961,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"c20169e0-a1a8-4d66-b734-24aafe179c5b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/inception_v3/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n","\u001b[1m87910968/87910968\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 0us/step\n","Inicio de Warm-Up Training...\n","\n","Epoch 1/50\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:122: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 998ms/step - loss: 0.8062\n","Epoch 1: val_loss improved from inf to 0.60847, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m66s\u001b[0m 3s/step - loss: 0.8061 - val_loss: 0.6085\n","Epoch 2/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 348ms/step - loss: 0.6652\n","Epoch 2: val_loss did not improve from 0.60847\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 428ms/step - loss: 0.6620 - val_loss: 0.6309\n","Epoch 3/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 300ms/step - loss: 0.5650\n","Epoch 3: val_loss improved from 0.60847 to 0.54394, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 410ms/step - loss: 0.5673 - val_loss: 0.5439\n","Epoch 4/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 361ms/step - loss: 0.5123\n","Epoch 4: val_loss did not improve from 0.54394\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 395ms/step - loss: 0.5138 - val_loss: 0.7116\n","Epoch 5/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 353ms/step - loss: 0.5664\n","Epoch 5: val_loss improved from 0.54394 to 0.42579, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 483ms/step - loss: 0.5660 - val_loss: 0.4258\n","Epoch 6/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 303ms/step - loss: 0.6303\n","Epoch 6: val_loss improved from 0.42579 to 0.41879, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 446ms/step - loss: 0.6304 - val_loss: 0.4188\n","Epoch 7/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 303ms/step - loss: 0.5648\n","Epoch 7: val_loss did not improve from 0.41879\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 338ms/step - loss: 0.5661 - val_loss: 0.7266\n","Epoch 8/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 329ms/step - loss: 0.6002\n","Epoch 8: val_loss did not improve from 0.41879\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 369ms/step - loss: 0.5978 - val_loss: 0.7065\n","Epoch 9/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 307ms/step - loss: 0.5077\n","Epoch 9: val_loss did not improve from 0.41879\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 387ms/step - loss: 0.5088 - val_loss: 0.5754\n","Epoch 10/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 302ms/step - loss: 0.5199\n","Epoch 10: val_loss did not improve from 0.41879\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 335ms/step - loss: 0.5192 - val_loss: 0.5564\n","Epoch 11/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 334ms/step - loss: 0.4805\n","Epoch 11: val_loss did not improve from 0.41879\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 370ms/step - loss: 0.4800 - val_loss: 0.6211\n","Epoch 12/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 391ms/step - loss: 0.5164\n","Epoch 12: val_loss did not improve from 0.41879\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 426ms/step - loss: 0.5181 - val_loss: 0.4541\n","Epoch 13/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 299ms/step - loss: 0.4731\n","Epoch 13: val_loss did not improve from 0.41879\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 339ms/step - loss: 0.4714 - val_loss: 0.7500\n","Epoch 14/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 300ms/step - loss: 0.4739\n","Epoch 14: val_loss did not improve from 0.41879\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 335ms/step - loss: 0.4732 - val_loss: 0.5146\n","Epoch 15/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 395ms/step - loss: 0.4003\n","Epoch 15: val_loss did not improve from 0.41879\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 430ms/step - loss: 0.4037 - val_loss: 0.6233\n","Epoch 16/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 300ms/step - loss: 0.4488\n","Epoch 16: val_loss improved from 0.41879 to 0.40953, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 450ms/step - loss: 0.4489 - val_loss: 0.4095\n","Epoch 17/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 293ms/step - loss: 0.4204\n","Epoch 17: val_loss did not improve from 0.40953\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 326ms/step - loss: 0.4236 - val_loss: 0.5540\n","Epoch 18/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 300ms/step - loss: 0.4393\n","Epoch 18: val_loss did not improve from 0.40953\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 340ms/step - loss: 0.4421 - val_loss: 0.6365\n","Epoch 19/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 334ms/step - loss: 0.4417\n","Epoch 19: val_loss did not improve from 0.40953\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 414ms/step - loss: 0.4437 - val_loss: 0.4443\n","Epoch 20/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 498ms/step - loss: 0.5173\n","Epoch 20: val_loss did not improve from 0.40953\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 534ms/step - loss: 0.5153 - val_loss: 0.5214\n","Epoch 21/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 292ms/step - loss: 0.3918\n","Epoch 21: val_loss did not improve from 0.40953\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 326ms/step - loss: 0.3950 - val_loss: 0.8320\n","Epoch 22/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 385ms/step - loss: 0.4181\n","Epoch 22: val_loss did not improve from 0.40953\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 425ms/step - loss: 0.4178 - val_loss: 0.5343\n","Epoch 23/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 314ms/step - loss: 0.3956\n","Epoch 23: val_loss did not improve from 0.40953\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 355ms/step - loss: 0.3966 - val_loss: 0.7886\n","Epoch 24/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 301ms/step - loss: 0.4487\n","Epoch 24: val_loss did not improve from 0.40953\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 337ms/step - loss: 0.4471 - val_loss: 0.5550\n","Epoch 25/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 347ms/step - loss: 0.3898\n","Epoch 25: val_loss did not improve from 0.40953\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 380ms/step - loss: 0.3894 - val_loss: 0.6185\n","Epoch 26/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 332ms/step - loss: 0.3814\n","Epoch 26: val_loss did not improve from 0.40953\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 376ms/step - loss: 0.3827 - val_loss: 0.5200\n","Epoch 27/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 294ms/step - loss: 0.4159\n","Epoch 27: val_loss did not improve from 0.40953\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 326ms/step - loss: 0.4166 - val_loss: 0.6928\n","Epoch 28/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 358ms/step - loss: 0.4249\n","Epoch 28: val_loss did not improve from 0.40953\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 393ms/step - loss: 0.4251 - val_loss: 0.6636\n","Epoch 29/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 340ms/step - loss: 0.4538\n","Epoch 29: val_loss did not improve from 0.40953\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 421ms/step - loss: 0.4522 - val_loss: 0.6328\n","Epoch 30/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 291ms/step - loss: 0.4229\n","Epoch 30: val_loss did not improve from 0.40953\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 327ms/step - loss: 0.4214 - val_loss: 0.5653\n","Epoch 31/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 377ms/step - loss: 0.4093\n","Epoch 31: val_loss did not improve from 0.40953\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 412ms/step - loss: 0.4101 - val_loss: 0.5485\n","Epoch 32/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 289ms/step - loss: 0.3817\n","Epoch 32: val_loss improved from 0.40953 to 0.39911, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 414ms/step - loss: 0.3812 - val_loss: 0.3991\n","Epoch 33/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 294ms/step - loss: 0.4238\n","Epoch 33: val_loss did not improve from 0.39911\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 325ms/step - loss: 0.4264 - val_loss: 0.6020\n","Epoch 34/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 362ms/step - loss: 0.4501\n","Epoch 34: val_loss did not improve from 0.39911\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 398ms/step - loss: 0.4491 - val_loss: 0.7696\n","Epoch 35/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 324ms/step - loss: 0.4403\n","Epoch 35: val_loss did not improve from 0.39911\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 404ms/step - loss: 0.4391 - val_loss: 0.9029\n","Epoch 36/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 300ms/step - loss: 0.4202\n","Epoch 36: val_loss did not improve from 0.39911\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 334ms/step - loss: 0.4207 - val_loss: 0.5071\n","Epoch 37/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 294ms/step - loss: 0.3744\n","Epoch 37: val_loss did not improve from 0.39911\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 327ms/step - loss: 0.3754 - val_loss: 0.4885\n","Epoch 38/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 385ms/step - loss: 0.4527\n","Epoch 38: val_loss did not improve from 0.39911\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 421ms/step - loss: 0.4492 - val_loss: 0.5751\n","Epoch 39/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 281ms/step - loss: 0.3451\n","Epoch 39: val_loss did not improve from 0.39911\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 312ms/step - loss: 0.3454 - val_loss: 0.4771\n","Epoch 40/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 354ms/step - loss: 0.3403\n","Epoch 40: val_loss did not improve from 0.39911\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 389ms/step - loss: 0.3411 - val_loss: 0.4792\n","Epoch 41/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 300ms/step - loss: 0.4599\n","Epoch 41: val_loss did not improve from 0.39911\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 380ms/step - loss: 0.4581 - val_loss: 0.4034\n","Epoch 42/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 300ms/step - loss: 0.4310\n","Epoch 42: val_loss did not improve from 0.39911\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 335ms/step - loss: 0.4312 - val_loss: 0.8059\n","Epoch 43/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - loss: 0.3978\n","Epoch 43: val_loss did not improve from 0.39911\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 355ms/step - loss: 0.3958 - val_loss: 0.6152\n","Epoch 44/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 312ms/step - loss: 0.3288\n","Epoch 44: val_loss did not improve from 0.39911\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 393ms/step - loss: 0.3284 - val_loss: 0.6455\n","Epoch 45/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 295ms/step - loss: 0.4388\n","Epoch 45: val_loss did not improve from 0.39911\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 330ms/step - loss: 0.4353 - val_loss: 0.6250\n","Epoch 46/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 293ms/step - loss: 0.3190\n","Epoch 46: val_loss did not improve from 0.39911\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 328ms/step - loss: 0.3205 - val_loss: 0.6446\n","Epoch 47/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 406ms/step - loss: 0.3216\n","Epoch 47: val_loss did not improve from 0.39911\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 441ms/step - loss: 0.3217 - val_loss: 0.4814\n","Epoch 48/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 304ms/step - loss: 0.3397\n","Epoch 48: val_loss did not improve from 0.39911\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 339ms/step - loss: 0.3391 - val_loss: 0.4495\n","Epoch 49/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 355ms/step - loss: 0.3328\n","Epoch 49: val_loss did not improve from 0.39911\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 391ms/step - loss: 0.3344 - val_loss: 0.5112\n","Epoch 50/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 395ms/step - loss: 0.3608\n","Epoch 50: val_loss did not improve from 0.39911\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 431ms/step - loss: 0.3606 - val_loss: 0.7866\n"]}]},{"cell_type":"code","source":["from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n","\n","model.load_weights(\"best_model_warmup.keras\")\n","\n","for layer in base_model.layers:\n","    layer.trainable = True\n","\n","model.compile(optimizer=Adam(learning_rate=0.0001), loss='binary_crossentropy')\n","\n","checkpoint_finetune_path = \"best_model_finetune.keras\"\n","checkpoint_finetune = ModelCheckpoint(\n","    checkpoint_finetune_path,\n","    save_best_only=True,\n","    monitor=\"val_loss\",\n","    mode='min',\n","    verbose=1\n",")\n","early_stopping = EarlyStopping(\n","    monitor='val_loss',\n","    patience=50,\n","    restore_best_weights=True,\n","    mode='min'\n",")\n","\n","print(\"Inicio de Fine-Tuning Training...\\n\")\n","history_finetune = model.fit(\n","    train_data,\n","    validation_data=valid_data,\n","    epochs=200,\n","    callbacks=[checkpoint_finetune, early_stopping],\n","    class_weight=class_weights\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kEOK8le1nAVq","executionInfo":{"status":"ok","timestamp":1732576833009,"user_tz":300,"elapsed":1469436,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"c42cbed6-cc7b-4560-b9e3-c07b8202f600"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Inicio de Fine-Tuning Training...\n","\n","Epoch 1/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4s/step - loss: 1.0467\n","Epoch 1: val_loss improved from inf to 0.65722, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m171s\u001b[0m 5s/step - loss: 1.0404 - val_loss: 0.6572\n","Epoch 2/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 478ms/step - loss: 0.5896\n","Epoch 2: val_loss did not improve from 0.65722\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 517ms/step - loss: 0.5886 - val_loss: 0.8930\n","Epoch 3/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 414ms/step - loss: 0.4869\n","Epoch 3: val_loss did not improve from 0.65722\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 495ms/step - loss: 0.4848 - val_loss: 0.8011\n","Epoch 4/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 417ms/step - loss: 0.4583\n","Epoch 4: val_loss improved from 0.65722 to 0.58011, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 622ms/step - loss: 0.4574 - val_loss: 0.5801\n","Epoch 5/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 405ms/step - loss: 0.3102\n","Epoch 5: val_loss did not improve from 0.58011\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 440ms/step - loss: 0.3121 - val_loss: 0.9230\n","Epoch 6/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 492ms/step - loss: 0.3185\n","Epoch 6: val_loss improved from 0.58011 to 0.56554, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 1s/step - loss: 0.3195 - val_loss: 0.5655\n","Epoch 7/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 411ms/step - loss: 0.2735\n","Epoch 7: val_loss improved from 0.56554 to 0.55656, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 855ms/step - loss: 0.2758 - val_loss: 0.5566\n","Epoch 8/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 438ms/step - loss: 0.3390\n","Epoch 8: val_loss did not improve from 0.55656\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 474ms/step - loss: 0.3383 - val_loss: 0.5809\n","Epoch 9/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 407ms/step - loss: 0.2115\n","Epoch 9: val_loss did not improve from 0.55656\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 487ms/step - loss: 0.2163 - val_loss: 0.6001\n","Epoch 10/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 453ms/step - loss: 0.2056\n","Epoch 10: val_loss did not improve from 0.55656\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 487ms/step - loss: 0.2067 - val_loss: 0.7833\n","Epoch 11/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 404ms/step - loss: 0.1999\n","Epoch 11: val_loss did not improve from 0.55656\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 484ms/step - loss: 0.1989 - val_loss: 0.7357\n","Epoch 12/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 404ms/step - loss: 0.1200\n","Epoch 12: val_loss did not improve from 0.55656\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 438ms/step - loss: 0.1216 - val_loss: 1.0947\n","Epoch 13/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 487ms/step - loss: 0.2293\n","Epoch 13: val_loss did not improve from 0.55656\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 522ms/step - loss: 0.2279 - val_loss: 0.6859\n","Epoch 14/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 496ms/step - loss: 0.1502\n","Epoch 14: val_loss did not improve from 0.55656\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 531ms/step - loss: 0.1504 - val_loss: 0.7624\n","Epoch 15/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - loss: 0.1745\n","Epoch 15: val_loss did not improve from 0.55656\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 456ms/step - loss: 0.1741 - val_loss: 0.7749\n","Epoch 16/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 468ms/step - loss: 0.0790\n","Epoch 16: val_loss did not improve from 0.55656\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 503ms/step - loss: 0.0782 - val_loss: 1.0286\n","Epoch 17/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 496ms/step - loss: 0.1265\n","Epoch 17: val_loss improved from 0.55656 to 0.54545, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 1s/step - loss: 0.1274 - val_loss: 0.5454\n","Epoch 18/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 417ms/step - loss: 0.1409\n","Epoch 18: val_loss did not improve from 0.54545\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 457ms/step - loss: 0.1436 - val_loss: 0.8311\n","Epoch 19/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 415ms/step - loss: 0.1440\n","Epoch 19: val_loss did not improve from 0.54545\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 450ms/step - loss: 0.1445 - val_loss: 0.6688\n","Epoch 20/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 439ms/step - loss: 0.1070\n","Epoch 20: val_loss did not improve from 0.54545\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 473ms/step - loss: 0.1081 - val_loss: 0.7086\n","Epoch 21/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 428ms/step - loss: 0.1159\n","Epoch 21: val_loss did not improve from 0.54545\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 476ms/step - loss: 0.1169 - val_loss: 0.8444\n","Epoch 22/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 409ms/step - loss: 0.1081\n","Epoch 22: val_loss did not improve from 0.54545\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 444ms/step - loss: 0.1096 - val_loss: 0.7907\n","Epoch 23/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 454ms/step - loss: 0.0749\n","Epoch 23: val_loss did not improve from 0.54545\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 490ms/step - loss: 0.0763 - val_loss: 0.7761\n","Epoch 24/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 408ms/step - loss: 0.0930\n","Epoch 24: val_loss did not improve from 0.54545\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 449ms/step - loss: 0.0924 - val_loss: 0.5898\n","Epoch 25/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 445ms/step - loss: 0.0562\n","Epoch 25: val_loss improved from 0.54545 to 0.48679, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 704ms/step - loss: 0.0583 - val_loss: 0.4868\n","Epoch 26/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 425ms/step - loss: 0.1400\n","Epoch 26: val_loss improved from 0.48679 to 0.47630, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 629ms/step - loss: 0.1419 - val_loss: 0.4763\n","Epoch 27/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 432ms/step - loss: 0.0943\n","Epoch 27: val_loss improved from 0.47630 to 0.44682, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 606ms/step - loss: 0.0950 - val_loss: 0.4468\n","Epoch 28/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 409ms/step - loss: 0.0922\n","Epoch 28: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 443ms/step - loss: 0.0921 - val_loss: 0.6479\n","Epoch 29/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 494ms/step - loss: 0.0600\n","Epoch 29: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 530ms/step - loss: 0.0596 - val_loss: 0.4812\n","Epoch 30/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 509ms/step - loss: 0.0526\n","Epoch 30: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 544ms/step - loss: 0.0534 - val_loss: 0.7498\n","Epoch 31/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 404ms/step - loss: 0.0681\n","Epoch 31: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 439ms/step - loss: 0.0677 - val_loss: 0.5737\n","Epoch 32/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 496ms/step - loss: 0.0403\n","Epoch 32: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 531ms/step - loss: 0.0406 - val_loss: 0.6853\n","Epoch 33/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 423ms/step - loss: 0.0258\n","Epoch 33: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 466ms/step - loss: 0.0260 - val_loss: 0.6183\n","Epoch 34/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 418ms/step - loss: 0.0758\n","Epoch 34: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 452ms/step - loss: 0.0748 - val_loss: 0.6896\n","Epoch 35/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 407ms/step - loss: 0.0228\n","Epoch 35: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 443ms/step - loss: 0.0229 - val_loss: 0.6407\n","Epoch 36/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 468ms/step - loss: 0.0839\n","Epoch 36: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 503ms/step - loss: 0.0826 - val_loss: 1.7645\n","Epoch 37/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 417ms/step - loss: 0.0443\n","Epoch 37: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 497ms/step - loss: 0.0441 - val_loss: 0.8883\n","Epoch 38/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 416ms/step - loss: 0.1440\n","Epoch 38: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 458ms/step - loss: 0.1432 - val_loss: 2.3129\n","Epoch 39/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 413ms/step - loss: 0.2113\n","Epoch 39: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 451ms/step - loss: 0.2095 - val_loss: 1.2222\n","Epoch 40/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 509ms/step - loss: 0.1833\n","Epoch 40: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 543ms/step - loss: 0.1817 - val_loss: 0.8711\n","Epoch 41/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 411ms/step - loss: 0.0550\n","Epoch 41: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 446ms/step - loss: 0.0559 - val_loss: 1.0061\n","Epoch 42/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 492ms/step - loss: 0.0519\n","Epoch 42: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 527ms/step - loss: 0.0525 - val_loss: 0.5124\n","Epoch 43/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 484ms/step - loss: 0.0460\n","Epoch 43: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 519ms/step - loss: 0.0467 - val_loss: 0.7268\n","Epoch 44/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 406ms/step - loss: 0.0426\n","Epoch 44: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 442ms/step - loss: 0.0440 - val_loss: 0.8219\n","Epoch 45/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 405ms/step - loss: 0.0718\n","Epoch 45: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 440ms/step - loss: 0.0724 - val_loss: 0.7899\n","Epoch 46/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 497ms/step - loss: 0.0384\n","Epoch 46: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 532ms/step - loss: 0.0379 - val_loss: 1.0687\n","Epoch 47/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 418ms/step - loss: 0.0373\n","Epoch 47: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 453ms/step - loss: 0.0379 - val_loss: 0.8803\n","Epoch 48/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 499ms/step - loss: 0.0408\n","Epoch 48: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 535ms/step - loss: 0.0405 - val_loss: 0.8720\n","Epoch 49/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - loss: 0.0120\n","Epoch 49: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 447ms/step - loss: 0.0124 - val_loss: 0.6754\n","Epoch 50/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 411ms/step - loss: 0.0213\n","Epoch 50: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 444ms/step - loss: 0.0221 - val_loss: 0.9481\n","Epoch 51/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 470ms/step - loss: 0.0248\n","Epoch 51: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 504ms/step - loss: 0.0251 - val_loss: 1.0812\n","Epoch 52/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 404ms/step - loss: 0.0564\n","Epoch 52: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 439ms/step - loss: 0.0553 - val_loss: 0.7163\n","Epoch 53/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 442ms/step - loss: 0.0167\n","Epoch 53: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 477ms/step - loss: 0.0191 - val_loss: 0.7917\n","Epoch 54/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 522ms/step - loss: 0.0140\n","Epoch 54: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 557ms/step - loss: 0.0146 - val_loss: 0.7339\n","Epoch 55/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 503ms/step - loss: 0.0909\n","Epoch 55: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 538ms/step - loss: 0.0897 - val_loss: 1.0570\n","Epoch 56/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 457ms/step - loss: 0.0447\n","Epoch 56: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 492ms/step - loss: 0.0450 - val_loss: 1.1622\n","Epoch 57/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - loss: 0.0805\n","Epoch 57: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 455ms/step - loss: 0.0817 - val_loss: 0.7645\n","Epoch 58/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 453ms/step - loss: 0.0698\n","Epoch 58: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 488ms/step - loss: 0.0697 - val_loss: 0.6974\n","Epoch 59/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 440ms/step - loss: 0.0315\n","Epoch 59: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 486ms/step - loss: 0.0311 - val_loss: 0.7011\n","Epoch 60/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 427ms/step - loss: 0.0272\n","Epoch 60: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 463ms/step - loss: 0.0281 - val_loss: 1.0152\n","Epoch 61/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 458ms/step - loss: 0.0260\n","Epoch 61: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 495ms/step - loss: 0.0265 - val_loss: 0.9742\n","Epoch 62/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 410ms/step - loss: 0.0101\n","Epoch 62: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 445ms/step - loss: 0.0103 - val_loss: 1.2056\n","Epoch 63/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 446ms/step - loss: 0.0425\n","Epoch 63: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 481ms/step - loss: 0.0418 - val_loss: 1.2365\n","Epoch 64/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 433ms/step - loss: 0.0127\n","Epoch 64: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 514ms/step - loss: 0.0124 - val_loss: 1.0947\n","Epoch 65/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 416ms/step - loss: 0.0152\n","Epoch 65: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 461ms/step - loss: 0.0151 - val_loss: 0.7635\n","Epoch 66/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 421ms/step - loss: 0.0263\n","Epoch 66: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 457ms/step - loss: 0.0262 - val_loss: 1.1733\n","Epoch 67/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 497ms/step - loss: 0.0827\n","Epoch 67: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 532ms/step - loss: 0.0829 - val_loss: 1.4842\n","Epoch 68/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 413ms/step - loss: 0.0697\n","Epoch 68: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 451ms/step - loss: 0.0706 - val_loss: 1.4080\n","Epoch 69/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 507ms/step - loss: 0.0167\n","Epoch 69: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 542ms/step - loss: 0.0169 - val_loss: 1.4168\n","Epoch 70/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 426ms/step - loss: 0.0604\n","Epoch 70: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 472ms/step - loss: 0.0594 - val_loss: 1.5272\n","Epoch 71/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 463ms/step - loss: 0.0383\n","Epoch 71: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 499ms/step - loss: 0.0390 - val_loss: 1.3236\n","Epoch 72/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 517ms/step - loss: 0.1420\n","Epoch 72: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 554ms/step - loss: 0.1403 - val_loss: 0.6132\n","Epoch 73/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 515ms/step - loss: 0.0649\n","Epoch 73: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 555ms/step - loss: 0.0649 - val_loss: 0.6480\n","Epoch 74/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 465ms/step - loss: 0.0447\n","Epoch 74: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 507ms/step - loss: 0.0450 - val_loss: 0.6361\n","Epoch 75/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 417ms/step - loss: 0.0652\n","Epoch 75: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 498ms/step - loss: 0.0650 - val_loss: 0.8913\n","Epoch 76/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 448ms/step - loss: 0.0330\n","Epoch 76: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 485ms/step - loss: 0.0336 - val_loss: 0.6343\n","Epoch 77/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 531ms/step - loss: 0.0326\n","Epoch 77: val_loss did not improve from 0.44682\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 567ms/step - loss: 0.0324 - val_loss: 0.8046\n"]}]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.metrics import precision_score, recall_score, f1_score, classification_report, roc_auc_score\n","import matplotlib.pyplot as plt"],"metadata":{"id":"IObWI_lLEOCC","executionInfo":{"status":"ok","timestamp":1732576869709,"user_tz":300,"elapsed":874,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["predictions_test = model.predict(test_data)\n","y_test = test_data.classes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ua6AjMkQEQV9","executionInfo":{"status":"ok","timestamp":1732576897971,"user_tz":300,"elapsed":26696,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"f3f768d5-d008-4009-ecfd-2ff10fe0f102"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 6s/step\n"]}]},{"cell_type":"code","source":["thresholds = np.arange(0.1, 1.0, 0.1)\n","best_threshold = 0.5\n","best_f1 = 0\n","\n","for threshold in thresholds:\n","    predicted_classes_test = (predictions_test >= threshold).astype(int)\n","    f1 = f1_score(y_test, predicted_classes_test)\n","    precision = precision_score(y_test, predicted_classes_test)\n","    recall = recall_score(y_test, predicted_classes_test)\n","\n","    print(f'Threshold: {threshold:.2f}')\n","    print(f'Precision: {precision:.4f}, Recall: {recall:.4f}, F1 Score: {f1:.4f}\\n')\n","\n","    # Guardar el mejor threshold basado en F1-score\n","    if f1 > best_f1:\n","        best_f1 = f1\n","        best_threshold = threshold\n","\n","print(f'Mejor threshold: {best_threshold} con F1 Score: {best_f1}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nucb7Rx9EThI","executionInfo":{"status":"ok","timestamp":1732576901891,"user_tz":300,"elapsed":1106,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"51861950-6b26-4893-fbe2-cc10a92d34a0"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Threshold: 0.10\n","Precision: 0.0833, Recall: 0.1176, F1 Score: 0.0976\n","\n","Threshold: 0.20\n","Precision: 0.0952, Recall: 0.1176, F1 Score: 0.1053\n","\n","Threshold: 0.30\n","Precision: 0.0526, Recall: 0.0588, F1 Score: 0.0556\n","\n","Threshold: 0.40\n","Precision: 0.0625, Recall: 0.0588, F1 Score: 0.0606\n","\n","Threshold: 0.50\n","Precision: 0.0714, Recall: 0.0588, F1 Score: 0.0645\n","\n","Threshold: 0.60\n","Precision: 0.0769, Recall: 0.0588, F1 Score: 0.0667\n","\n","Threshold: 0.70\n","Precision: 0.0833, Recall: 0.0588, F1 Score: 0.0690\n","\n","Threshold: 0.80\n","Precision: 0.1250, Recall: 0.0588, F1 Score: 0.0800\n","\n","Threshold: 0.90\n","Precision: 0.0000, Recall: 0.0000, F1 Score: 0.0000\n","\n","Mejor threshold: 0.2 con F1 Score: 0.10526315789473684\n"]}]},{"cell_type":"code","source":["precisions = []\n","recalls = []\n","f1_scores = []\n","\n","for threshold in thresholds:\n","    predicted_classes_test = (predictions_test >= threshold).astype(int)\n","    precisions.append(precision_score(y_test, predicted_classes_test))\n","    recalls.append(recall_score(y_test, predicted_classes_test))\n","    f1_scores.append(f1_score(y_test, predicted_classes_test))\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(thresholds, precisions, label='Precision')\n","plt.plot(thresholds, recalls, label='Recall')\n","plt.plot(thresholds, f1_scores, label='F1 Score')\n","plt.xlabel('Threshold')\n","plt.ylabel('Metric Value')\n","plt.title('Metrics vs. Threshold')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"sS0fjNXQEbjj","executionInfo":{"status":"ok","timestamp":1732577198721,"user_tz":300,"elapsed":1838,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"65389974-bb29-4cda-9fbe-398a91e90200"},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["predicted_classes_test = (predictions_test >= best_threshold).astype(int)\n","\n","# Imprimir el reporte de clasificación con el mejor threshold\n","print(\"Test set classification report with custom threshold:\")\n","print(classification_report(y_test, predicted_classes_test, target_names=['Clase 0', 'Clase 1']))\n","\n","# Calcular la precisión y el recall con el mejor threshold\n","precision = precision_score(y_test, predicted_classes_test)\n","recall = recall_score(y_test, predicted_classes_test)\n","\n","print(\"Precision (Test Set, Class 1) with custom threshold:\", precision)\n","print(\"Recall (Test Set, Class 1) with custom threshold:\", recall)\n","\n","# AUC Score no se afecta por el threshold, pero se puede recalcular para referencia\n","auc_score_test = roc_auc_score(y_test, predictions_test)\n","print(\"Test set AUC Score:\", auc_score_test)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D7f5zXLVEhF5","executionInfo":{"status":"ok","timestamp":1732577202537,"user_tz":300,"elapsed":1007,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"7f087862-8d88-404d-ae44-7ff1cbb4041a"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Test set classification report with custom threshold:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.76      0.72      0.74        67\n","     Clase 1       0.10      0.12      0.11        17\n","\n","    accuracy                           0.60        84\n","   macro avg       0.43      0.42      0.42        84\n","weighted avg       0.63      0.60      0.61        84\n","\n","Precision (Test Set, Class 1) with custom threshold: 0.09523809523809523\n","Recall (Test Set, Class 1) with custom threshold: 0.11764705882352941\n","Test set AUC Score: 0.38718173836698855\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import roc_curve, auc\n","import matplotlib.pyplot as plt\n","\n","# Calcular la curva ROC y el AUC\n","fpr, tpr, _ = roc_curve(y_test, predictions_test)\n","roc_auc = auc(fpr, tpr)\n","\n","# Graficar la curva ROC\n","plt.figure(figsize=(10, 6))\n","plt.plot(fpr, tpr, color='blue', label=f'ROC Curve (AUC = {roc_auc:.4f})')\n","plt.plot([0, 1], [0, 1], color='gray', linestyle='--')  # Línea de referencia (clasificador aleatorio)\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic (ROC) Curve')\n","plt.legend(loc='lower right')\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"cKRdyiAGTxYv","executionInfo":{"status":"ok","timestamp":1732577212530,"user_tz":300,"elapsed":1181,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"8faf8228-3554-473a-c415-716123efde58"},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA04AAAIjCAYAAAA0vUuxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAACVgUlEQVR4nOzdd3xV9eHG8c+9N3sRIAmBEPbee4VNSEjcE8SBaHFU1Eq1ilaRtpZaq1KrFeuAunFQixrCCCBT9hBkyN4hEEhC5k3u9/cH5f6ICZCLCSfjeb9eeWnOPefcJzffXPLknPM9NmOMQURERERERC7IbnUAERERERGRyk7FSURERERE5BJUnERERERERC5BxUlEREREROQSVJxEREREREQuQcVJRERERETkElScRERERERELkHFSURERERE5BJUnERERERERC5BxUlEKq0mTZpw9913Wx2jxhk8eDCDBw+2OsYlPf/889hsNk6cOGF1lErHZrPx/PPPl8u+9u3bh81mY8aMGeWyP4DVq1fj4+PD/v37y22f5W3UqFHceuutVscQkUpExUmkhpoxYwY2m8394eXlRVRUFHfffTeHDx+2Ol6llp2dzR//+Ec6depEQEAAtWrVYsCAAbz//vsYY6yOVyY//vgjzz//PPv27bM6SglFRUVMnz6dwYMHU6dOHXx9fWnSpAljx45l7dq1VscrFx9//DFTp061OkYxVzLTM888w2233Ubjxo3dywYPHlzsPcnf359OnToxdepUXC5Xqfs5efIkTzzxBK1bt8bPz486deoQHx/PN998c8HnzszMZPLkyXTu3JmgoCD8/f3p0KEDTz75JEeOHHGv9+STT/Lll1+yadOmMn9dNWHsitRkNlNV/pUXkXI1Y8YMxo4dyx/+8AeaNm1KXl4e33//PTNmzKBJkyZs2bIFPz8/SzPm5+djt9vx9va2NMf5UlNTGTZsGNu2bWPUqFEMGjSIvLw8vvzyS5YsWcLIkSP56KOPcDgcVke9qC+++IJbbrmFRYsWlTi6VFBQAICPj88Vz5Wbm8uNN95IcnIyAwcO5JprrqFOnTrs27ePzz77jJ07d3LgwAEaNmzI888/z+TJk0lLSyMsLOyKZ/0lrr76arZs2VJhxTUvLw8vLy+8vLx+cSZjDPn5+Xh7e5fLuN64cSNdu3ZlxYoV9O3b17188ODB7N69mylTpgBw4sQJPv74Y9asWcPTTz/NCy+8UGw/O3bsYNiwYaSlpTF27Fh69OjB6dOn+eijj9i4cSOPP/44L730UrFt9uzZQ2xsLAcOHOCWW26hf//++Pj4sHnzZj755BPq1KnDzp073ev37t2b1q1b8/7771/y6/Jk7IpIFWVEpEaaPn26AcyaNWuKLX/yyScNYGbOnGlRMmvl5uaaoqKiCz4eHx9v7Ha7+e9//1visccff9wA5i9/+UtFRizVmTNnPFr/888/N4BZtGhRxQS6TA899JABzKuvvlriscLCQvPSSy+ZgwcPGmOMmTRpkgFMWlpaheVxuVwmJyen3Pd71VVXmcaNG5frPouKikxubu5lb18RmUrzyCOPmEaNGhmXy1Vs+aBBg0z79u2LLcvNzTWNGzc2wcHBprCw0L28oKDAdOjQwQQEBJjvv/++2DaFhYVm5MiRBjCffvqpe7nT6TSdO3c2AQEBZunSpSVyZWRkmKeffrrYsr/97W8mMDDQZGVlXfLr8mTs/hK/9PssIpdPxUmkhrpQcfrmm28MYP785z8XW75t2zZz0003mdq1axtfX1/TvXv3UsvDqVOnzG9+8xvTuHFj4+PjY6Kiosydd95Z7JfbvLw889xzz5nmzZsbHx8f07BhQ/PEE0+YvLy8Yvtq3LixGTNmjDHGmDVr1hjAzJgxo8RzJicnG8B8/fXX7mWHDh0yY8eONREREcbHx8e0a9fOvPvuu8W2W7RokQHMJ598Yp555hnToEEDY7PZzKlTp0p9zVauXGkAc88995T6uNPpNC1btjS1a9d2/7K9d+9eA5iXXnrJvPLKK6ZRo0bGz8/PDBw40Pzwww8l9lGW1/nc927x4sXmwQcfNOHh4SY0NNQYY8y+ffvMgw8+aFq1amX8/PxMnTp1zM0332z27t1bYvuff5wrUYMGDTKDBg0q8TrNnDnT/OlPfzJRUVHG19fXDB061Pz0008lvobXX3/dNG3a1Pj5+ZmePXuaJUuWlNhnaQ4ePGi8vLzM8OHDL7reOeeK008//WTGjBljatWqZUJCQszdd99tsrOzi6373nvvmSFDhpjw8HDj4+Nj2rZta/75z3+W2Gfjxo3NVVddZZKTk0337t2Nr6+v+xfhsu7DGGOSkpLMwIEDTVBQkAkODjY9evQwH330kTHm7Ov789f+/MJS1p8PwDz00EPmww8/NO3atTNeXl7mP//5j/uxSZMmudfNzMw0jz76qPvnMjw83MTGxpp169ZdMtO5MTx9+vRiz79t2zZzyy23mLCwMOPn52datWpVoniUplGjRubuu+8usby04mSMMTfffLMBzJEjR9zLPvnkEwOYP/zhD6U+x+nTp01oaKhp06aNe9mnn35qAPPCCy9cMuM5mzZtMoCZNWvWRdfzdOyOGTOm1JJ6bkyfr7Tv82effWZq165d6uuYkZFhfH19zW9/+1v3srKOKRG5uLIfwxeRGuHcaTq1a9d2L9u6dSsxMTFERUXx1FNPERgYyGeffcb111/Pl19+yQ033ADAmTNnGDBgANu2beOee+6hW7dunDhxgtmzZ3Po0CHCwsJwuVxce+21LFu2jPvuu4+2bdvyww8/8Oqrr7Jz506++uqrUnP16NGDZs2a8dlnnzFmzJhij82cOZPatWsTHx8PnD2drk+fPthsNsaPH094eDhz5szh3nvvJTMzk9/85jfFtv/jH/+Ij48Pjz/+OPn5+Rc8Re3rr78G4K677ir1cS8vL0aPHs3kyZNZvnw5sbGx7sfef/99srKyeOihh8jLy+Pvf/87Q4cO5YcffqBevXoevc7n/PrXvyY8PJznnnuO7OxsANasWcOKFSsYNWoUDRs2ZN++fbz55psMHjyYH3/8kYCAAAYOHMgjjzzCa6+9xtNPP03btm0B3P+9kL/85S/Y7XYef/xxMjIy+Otf/8rtt9/OqlWr3Ou8+eabjB8/ngEDBvDYY4+xb98+rr/+emrXrn3JU5TmzJlDYWEhd95550XX+7lbb72Vpk2bMmXKFNavX88777xDREQEL774YrFc7du359prr8XLy4uvv/6aX//617hcLh566KFi+9uxYwe33XYb999/P+PGjaN169Ye7WPGjBncc889tG/fnokTJxIaGsqGDRtITk5m9OjRPPPMM2RkZHDo0CFeffVVAIKCggA8/vlYuHAhn332GePHjycsLIwmTZqU+ho98MADfPHFF4wfP5527dpx8uRJli1bxrZt2+jWrdtFM5Vm8+bNDBgwAG9vb+677z6aNGnC7t27+frrr0ucUne+w4cPc+DAAbp163bBdX7u3OQUoaGh7mWX+lmsVasW1113Hf/+97/ZtWsXLVq0YPbs2QAeja927drh7+/P8uXLS/z8ne9yx25Z/fz73LJlS2644QZmzZrFW2+9Vew966uvviI/P59Ro0YBno8pEbkIq5ubiFjj3FGHBQsWmLS0NHPw4EHzxRdfmPDwcOPr61vslJJhw4aZjh07FvvrpMvlMv369TMtW7Z0L3vuuecu+NfZc6flfPDBB8Zut5c4VWbatGkGMMuXL3cvO/+IkzHGTJw40Xh7e5v09HT3svz8fBMaGlrsKNC9995r6tevb06cOFHsOUaNGmVq1arlPhp07khKs2bNynQ61vXXX2+ACx6RMsaYWbNmGcC89tprxpj//2u9v7+/OXTokHu9VatWGcA89thj7mVlfZ3Pfe/69+9f7PQlY0ypX8e5I2Xvv/++e9nFTtW70BGntm3bmvz8fPfyv//97wZwHznLz883devWNT179jROp9O93owZMwxwySNOjz32mAHMhg0bLrreOef+Ov/zI4A33HCDqVu3brFlpb0u8fHxplmzZsWWNW7c2AAmOTm5xPpl2cfp06dNcHCw6d27d4nTqc4/Ne1Cp8V58vMBGLvdbrZu3VpiP/zsiFOtWrXMQw89VGK9810oU2lHnAYOHGiCg4PN/v37L/g1lmbBggUljg6fM2jQINOmTRuTlpZm0tLSzPbt280TTzxhAHPVVVcVW7dLly6mVq1aF32uV155xQBm9uzZxhhjunbtesltStOqVSuTkJBw0XU8HbueHnEq7fs8d+7cUl/LxMTEYmPSkzElIhenWfVEarjY2FjCw8OJjo7m5ptvJjAwkNmzZ7uPDqSnp7Nw4UJuvfVWsrKyOHHiBCdOnODkyZPEx8fz008/uWfh+/LLL+ncuXOpf5m12WwAfP7557Rt25Y2bdq493XixAmGDh0KwKJFiy6YdeTIkTidTmbNmuVeNm/ePE6fPs3IkSOBsxeyf/nll1xzzTUYY4o9R3x8PBkZGaxfv77YfseMGYO/v/8lX6usrCwAgoODL7jOuccyMzOLLb/++uuJiopyf96rVy969+5NUlIS4NnrfM64ceNKXKx//tfhdDo5efIkLVq0IDQ0tMTX7amxY8cW+8v2gAEDgLMX3AOsXbuWkydPMm7cuGKTEtx+++3FjmBeyLnX7GKvb2keeOCBYp8PGDCAkydPFvsenP+6ZGRkcOLECQYNGsSePXvIyMgotn3Tpk3dRy/PV5Z9zJ8/n6ysLJ566qkSk6uc+xm4GE9/PgYNGkS7du0uud/Q0FBWrVpVbNa4y5WWlsaSJUu45557aNSoUbHHLvU1njx5EuCC42H79u2Eh4cTHh5OmzZteOmll7j22mtLTIWelZV1yXHy85/FzMxMj8fWuayXmvL+csduWZX2fR46dChhYWHMnDnTvezUqVPMnz/f/X4Iv+w9V0SK06l6IjXcG2+8QatWrcjIyOC9995jyZIl+Pr6uh/ftWsXxhieffZZnn322VL3cfz4caKioti9ezc33XTTRZ/vp59+Ytu2bYSHh19wXxfSuXNn2rRpw8yZM7n33nuBs6fphYWFuX8JSEtL4/Tp0/zrX//iX//6V5meo2nTphfNfM65X4qysrKKnTZ0vguVq5YtW5ZYt1WrVnz22WeAZ6/zxXLn5uYyZcoUpk+fzuHDh4tNj/7zguCpn/+SfO6X31OnTgG478nTokWLYut5eXld8BSy84WEhAD//xqWR65z+1y+fDmTJk1i5cqV5OTkFFs/IyODWrVquT+/0Hgoyz52794NQIcOHTz6Gs7x9OejrGP3r3/9K2PGjCE6Opru3buTmJjIXXfdRbNmzTzOeK4oX+7XCFxw2v4mTZrw9ttv43K52L17Ny+88AJpaWklSmhwcPAly8zPfxZDQkLc2T3NeqlCeLljt6xK+z57eXlx00038fHHH5Ofn4+vry+zZs3C6XQWK06/5D1XRIpTcRKp4Xr16kWPHj2As0dF+vfvz+jRo9mxYwdBQUHu+6c8/vjjpf4VHkr+onwxLpeLjh078sorr5T6eHR09EW3HzlyJC+88AInTpwgODiY2bNnc9ttt7mPcJzLe8cdd5S4FuqcTp06Ffu8LEeb4Ow1QF999RWbN29m4MCBpa6zefNmgDIdBTjf5bzOpeV++OGHmT59Or/5zW/o27cvtWrVwmazMWrUqAveC6esLjQV9YV+CfZUmzZtAPjhhx/o0qVLmbe7VK7du3czbNgw2rRpwyuvvEJ0dDQ+Pj4kJSXx6quvlnhdSntdPd3H5fL056OsY/fWW29lwIAB/Oc//2HevHm89NJLvPjii8yaNYuEhIRfnLus6tatC/x/2f65wMDAYtcGxsTE0K1bN55++mlee+019/K2bduyceNGDhw4UKI4n/Pzn8U2bdqwYcMGDh48eMn3mfOdOnWq1D98nM/TsXuhIlZUVFTq8gt9n0eNGsVbb73FnDlzuP766/nss89o06YNnTt3dq/zS99zReT/qTiJiJvD4WDKlCkMGTKE119/naeeesr9F2lvb+9iv9CUpnnz5mzZsuWS62zatIlhw4aV6dSlnxs5ciSTJ0/myy+/pF69emRmZrovggYIDw8nODiYoqKiS+b11NVXX82UKVN4//33Sy1ORUVFfPzxx9SuXZuYmJhij/30008l1t+5c6f7SIwnr/PFfPHFF4wZM4aXX37ZvSwvL4/Tp08XW+9yXvtLOXcz0127djFkyBD38sLCQvbt21eisP5cQkICDoeDDz/8sFwvsv/666/Jz89n9uzZxX7J9uQUpbLuo3nz5gBs2bLlon9QuNDr/0t/Pi6mfv36/PrXv+bXv/41x48fp1u3brzwwgvu4lTW5zs3Vi/1s16acwVj7969ZVq/U6dO3HHHHbz11ls8/vjj7tf+6quv5pNPPuH999/n97//fYntMjMz+e9//0ubNm3c34drrrmGTz75hA8//JCJEyeW6fkLCws5ePAg11577UXX83Ts1q5du8TPJPz/UduyGjhwIPXr12fmzJn079+fhQsX8swzzxRbpyLHlEhNo2ucRKSYwYMH06tXL6ZOnUpeXh4REREMHjyYt956i6NHj5ZYPy0tzf3/N910E5s2beI///lPifXO/fX/1ltv5fDhw7z99tsl1snNzXXPDnchbdu2pWPHjsycOZOZM2dSv379YiXG4XBw00038eWXX5b6i935eT3Vr18/YmNjmT59Ot98802Jx5955hl27tzJ7373uxJ/If7qq6+KXaO0evVqVq1a5f6l1ZPX+WIcDkeJI0D/+Mc/SvwlOzAwEKDUX94uV48ePahbty5vv/02hYWF7uUfffTRBY8wnC86Oppx48Yxb948/vGPf5R43OVy8fLLL3Po0CGPcp07IvXz0xanT59e7vuIi4sjODiYKVOmkJeXV+yx87cNDAws9dTJX/rzUZqioqISzxUREUGDBg3Iz8+/ZKafCw8PZ+DAgbz33nscOHCg2GOXOvoYFRVFdHQ0a9euLXP+3/3udzidzmJHTG6++WbatWvHX/7ylxL7crlcPPjgg5w6dYpJkyYV26Zjx4688MILrFy5ssTzZGVllSgdP/74I3l5efTr1++iGT0du82bNycjI8N9VAzg6NGjpb53Xozdbufmm2/m66+/5oMPPqCwsLDYaXpQMWNKpKbSEScRKeGJJ57glltuYcaMGTzwwAO88cYb9O/fn44dOzJu3DiaNWtGamoqK1eu5NChQ2zatMm93RdffMEtt9zCPffcQ/fu3UlPT2f27NlMmzaNzp07c+edd/LZZ5/xwAMPsGjRImJiYigqKmL79u189tlnzJ07133q4IWMHDmS5557Dj8/P+69917s9uJ/A/rLX/7CokWL6N27N+PGjaNdu3akp6ezfv16FixYQHp6+mW/Nu+//z7Dhg3juuuuY/To0QwYMID8/HxmzZrF4sWLGTlyJE888USJ7Vq0aEH//v158MEHyc/PZ+rUqdStW5ff/e537nXK+jpfzNVXX80HH3xArVq1aNeuHStXrmTBggXuU6TO6dKlCw6HgxdffJGMjAx8fX0ZOnQoERERl/3a+Pj48Pzzz/Pwww8zdOhQbr31Vvbt28eMGTNo3rx5mf7a/fLLL7N7924eeeQRZs2axdVXX03t2rU5cOAAn3/+Odu3by92hLEs4uLi8PHx4ZprruH+++/nzJkzvP3220RERJRaUn/JPkJCQnj11Vf51a9+Rc+ePRk9ejS1a9dm06ZN5OTk8O9//xuA7t27M3PmTCZMmEDPnj0JCgrimmuuKZefj5/LysqiYcOG3HzzzXTu3JmgoCAWLFjAmjVrih2ZvFCm0rz22mv079+fbt26cd9999G0aVP27dvHt99+y8aNGy+a57rrruM///lPma4dgrOn2iUmJvLOO+/w7LPPUrduXXx8fPjiiy8YNmwY/fv3Z+zYsfTo0YPTp0/z8ccfs379en77298WGyve3t7MmjWL2NhYBg4cyK233kpMTAze3t5s3brVfbT4/OnU58+fT0BAAMOHD79kTk/G7qhRo3jyySe54YYbeOSRR8jJyeHNN9+kVatWHk/iMnLkSP7xj38wadIkOnbsWOK2AhUxpkRqrCs/kZ+IVAYXugGuMWfvTN+8eXPTvHlz93TXu3fvNnfddZeJjIw03t7eJioqylx99dXmiy++KLbtyZMnzfjx401UVJT7RotjxowpNjV4QUGBefHFF0379u2Nr6+vqV27tunevbuZPHmyycjIcK/38+nIz/npp5/cN+lctmxZqV9famqqeeihh0x0dLTx9vY2kZGRZtiwYeZf//qXe51z02x//vnnHr12WVlZ5vnnnzft27c3/v7+Jjg42MTExJgZM2aUmI75/BvgvvzyyyY6Otr4+vqaAQMGmE2bNpXYd1le54t9706dOmXGjh1rwsLCTFBQkImPjzfbt28v9bV8++23TbNmzYzD4SjTDXB//jpd6Maor732mmncuLHx9fU1vXr1MsuXLzfdu3c3I0aMKMOra0xhYaF55513zIABA0ytWrWMt7e3ady4sRk7dmyx6Z7PTd18/s2Vz399zr/p7+zZs02nTp2Mn5+fadKkiXnxxRfNe++9V2K9czfALU1Z93Fu3X79+hl/f38TEhJievXqZT755BP342fOnDGjR482oaGhJW6AW9afD/53Y9TScN505Pn5+eaJJ54wnTt3NsHBwSYwMNB07ty5xM17L5TpQt/nLVu2mBtuuMGEhoYaPz8/07p1a/Pss8+Wmud869evN0CJ6bEvdANcY4xZvHhxiSnWjTHm+PHjZsKECaZFixbG19fXhIaGmtjYWPcU5KU5deqUee6550zHjh1NQECA8fPzMx06dDATJ040R48eLbZu7969zR133HHJr+mcso5dY4yZN2+e6dChg/Hx8TGtW7c2H3744UVvgHshLpfLREdHG8D86U9/KnWdso4pEbk4mzHldFWviIiUsG/fPpo2bcpLL73E448/bnUcS7hcLsLDw7nxxhtLPV1Iap5hw4bRoEEDPvjgA6ujXNDGjRvp1q0b69ev92iyEhGpvnSNk4iIlJu8vLwS17m8//77pKenM3jwYGtCSaXz5z//mZkzZ3o8GcKV9Je//IWbb75ZpUlE3HSNk4iIlJvvv/+exx57jFtuuYW6deuyfv163n33XTp06MAtt9xidTypJHr37k1BQYHVMS7q008/tTqCiFQyKk4iIlJumjRpQnR0NK+99hrp6enUqVOHu+66i7/85S/4+PhYHU9EROSy6RonERERERGRS9A1TiIiIiIiIpeg4iQiIiIiInIJNe4aJ5fLxZEjRwgODi7TjfdERERERKR6MsaQlZVFgwYNsNsvfkypxhWnI0eOEB0dbXUMERERERGpJA4ePEjDhg0vuk6NK07BwcHA2RcnJCTE4jTgdDqZN28ecXFxeHt7Wx1HKjmNF/GUxox4SmNGPKUxI56qTGMmMzOT6Ohod0e4mBpXnM6dnhcSElJpilNAQAAhISGWDxyp/DRexFMaM+IpjRnxlMaMeKoyjpmyXMKjySFEREREREQuQcVJRERERETkElScRERERERELkHFSURERERE5BJUnERERERERC5BxUlEREREROQSVJxEREREREQuQcVJRERERETkElScRERERERELkHFSURERERE5BJUnERERERERC5BxUlEREREROQSVJxEREREREQuQcVJRERERETkEiwtTkuWLOGaa66hQYMG2Gw2vvrqq0tus3jxYrp164avry8tWrRgxowZFZ5TRERERERqNkuLU3Z2Np07d+aNN94o0/p79+7lqquuYsiQIWzcuJHf/OY3/OpXv2Lu3LkVnFRERERERGoyLyufPCEhgYSEhDKvP23aNJo2bcrLL78MQNu2bVm2bBmvvvoq8fHxFRVTRERERETKgTGQkeEkL8+BMVan8YylxclTK1euJDY2ttiy+Ph4fvOb31xwm/z8fPLz892fZ2ZmAuB0OnE6nRWS0xPnMlSGLFL5abyIpzRmxFMaM+IpjRkpq7y8PFJSlrBo0W7efPNBDh92EhpqbSZPxm2VKk7Hjh2jXr16xZbVq1ePzMxMcnNz8ff3L7HNlClTmDx5conl8+bNIyAgoMKyemr+/PlWR5AqRONFPKUxI57SmBFPaczIxRQVFbF9+3acTid16kDr1ttZuHA/fn5FlubKyckp87pVqjhdjokTJzJhwgT355mZmURHRxMXF0dISIiFyc5yOp3Mnz+f4cOH4+3tbXUcqeQ0XsRTGjPiKY0Z8ZTGjJSVn58fu3bt4e9/T2TPnmYMHdqc0FBrx8y5s9HKokoVp8jISFJTU4stS01NJSQkpNSjTQC+vr74+vqWWO7t7V2pfrgrWx6p3DRexFMaM+IpjRnxlMaMnC83N5eFCxfSo0cP9xljsbGx9O/v4NFHHUDlGDOePH+VKk59+/YlKSmp2LL58+fTt29fixKJiIiIiMg5LpeLDRs2kJKSQm5uLmlpaYwZMwabzYaPjw9V+VI4S4vTmTNn2LVrl/vzvXv3snHjRurUqUOjRo2YOHEihw8f5v333wfggQce4PXXX+d3v/sd99xzDwsXLuSzzz7j22+/tepLEBERERER4PDhwyQlJXHkyBEAIiIiGDx4MDabzeJk5cPS4rR27VqGDBni/vzctUhjxoxhxowZHD16lAMHDrgfb9q0Kd9++y2PPfYYf//732nYsCHvvPOOpiIXEREREbFIdnY2KSkpbNiwATh7qczgwYPp2bMnDofD4nTlx9LiNHjwYMxFJnCfMWNGqduc+6aIiIiIiIi1tm7d6v79vHPnzsTGxhIUFGRxqvJXpa5xEhERERER6xUUFODj4wNAjx49OHToED169KBRo0YWJ6s4Kk4iIiIiIlImZ86cYcGCBRw8eJAHH3wQLy8v7HY7N954o9XRKpyKk4iIiIiIXJTL5WL16tUsXryY/Px8APbs2UOrVq0sTnblqDiJiIiIiMgF7du3jzlz5nD8+HEAGjRoQGJiIlFRURYnu7JUnEREREREpITCwkJmz57NDz/8AIC/vz/Dhg2ja9eu2O12i9NdeSpOIiIiIiJSgsPhIDc3F4Du3bszdOhQAgICLE5lHRUnEREREREBzl63FBkZSUBAADabjYSEBPLy8mjQoIHV0Syn4iQiIiIiUsNlZGQwb948fvzxR7p168Y111wDQJ06dSxOVnmoOImIiIiI1FCFhYWsXLmSpUuX4nQ6sdlseHt7Y4zBZrNZHa9SUXESEREREamBdu3axZw5c0hPTwegUaNGJCQkEBkZaXGyyknFSURERESkhlm7di3ffvstAEFBQQwfPpyOHTvqKNNFqDiJiIiIiNQw7du357vvvqNDhw4MHjwYX19fqyNVeipOIiIiIiLV3I4dO9ixYwfXXHMNNpsNf39/Hn74YXx8fKyOVmWoOImIiIiIVFPp6ekkJyfz008/AdCqVSvatGkDoNLkIRUnEREREZFqxul0snTpUlasWEFRURF2u52+ffvSrFkzq6NVWSpOIiIiIiLVhDGG7du3M3fuXDIyMgBo1qwZCQkJhIWFXcb+ICen/PJlZ5ffvq40FScRERERkWrC5XKRkpJCRkYGtWrVIj4+njZt2lzWbHnGQP/+sGJFBQStglScRERERESqsIKCAhwOh/sjMTGRffv2MWDAALy9vS97vzk5FVea2rY9SUBASMXsvIKoOImIiIiIVEHGGLZu3cq8efPo06cP/fr1A86emlfe1zKlpkJgYPnsy+l0snjxMmy2xPLZ4RWi4iQiIiIiUsUcP36cOXPmsG/fPgA2b95M3759K+wGtoGB5VmcoCreZ1fFSURERESkisjPz2fx4sWsXr0al8uFl5cX/fv3JyYmpsJKk5yl4iQiIiIiUgXs2bOH//znP5w5cwaANm3aEB8fT2hoqLXBaggVJxERERGRKiA4OJicnBzq1KlDQkICLVq0sDpSjaLiJCIiIiJSCeXl5bFnzx7atWsHQHh4OHfccQfR0dF4eenX+CtNr7iIiIiISCVijGHjxo0sWLCA3Nxc7rvvPiIjIwFo2rSpxelqLhUnEREREZFK4siRI8yZM4dDhw4BEBYWRmFhocWpBFScREREREQsl5ubS0pKCuvWrQPAx8eHQYMG0bt3bxwOh8XpBFScREREREQs5XK5eOedd0hPTwegY8eODB8+nODgYIuTyflUnERERERELGS32+nduzfr1q0jISGBJk2aWB1JSqHiJCIiIiJyBWVnZ5OSkkKbNm1o1aoVAD169KBHjx7Y7XaL08mFqDiJiIiIiFwBLpeLtWvXsmjRIvLy8ti3bx8tWrTAbrerMFUBKk4iIiIiIhXswIEDzJkzh2PHjgEQGRlJYmKiClMVouIkIiIiIlJBzpw5w4IFC9i0aRMAfn5+DB06lO7du6s0VTEqTiIiIiIiFeTIkSPu0tS1a1eGDRtGYGCgxankcqg4iYiIiIiUo+zsbHc5atWqFTExMbRt25aoqCiLk8kvoeIkIiIiIlIOsrKymDdvHrt27WL8+PHu8hQbG2txMikPKk4iIiIiIr9AUVER33//PUuWLKGgoACA3bt306lTJ4uTSXlScRIRERERuUx79uxhzpw5nDhxAoCGDRuSmJhI/fr1LU4m5U3FSURERETEQ8YYZs2axZYtWwAICAhg+PDhdO7cGZvNZnE6qQgqTiIiIiIiHrLZbAQEBGCz2ejZsydDhgzBz8/P6lhSgVScRERERETKYNeuXdSqVYvw8HAAhgwZQteuXYmMjPR4X8ZATk55Jyxf2dlWJ6hcVJxERERERC7i1KlTzJ07lx07dtCkSRPuuusubDYbfn5+l12a+veHFSsqIKxUGBUnEREREZFSOJ1Oli9fzvLlyyksLMRut1O/fn1cLhcOh+Oy95uTU7VKU0wMBARYncJ6Kk4iIiIiIucxxrBz506Sk5M5ffo0AE2aNCExMdF9ml55SU2F/93uqdIKCADNd6HiJCIiIiJSzLZt2/j8888BCA4OJj4+nnbt2lXIbHmBgZW/OMlZKk4iIiIiIudp3bo1kZGRNG/enIEDB+Lj42N1JKkEVJxEREREpMYyxrB9+3bWrl3L6NGjcTgcOBwOxo0bh91utzqeVCIqTiIiIiJSI504cYI5c+awZ88eANauXUvv3r0BVJqkBBUnEREREalRCgoKWLJkCStXrnTPkBcTE0O3bt2sjiaVmIqTiIiIiNQIxhi2bt3KvHnzyMrKAqBly5aMGDGCOnXqWJxOKjsVJxERERGpMTZs2EBWVha1a9dmxIgRtGrVyupIUkWoOImIiIhItZWfn48xBj8/P2w2GwkJCWzdupWYmBi8vPSrsJSdrnoTERERkWrHGMPmzZt5/fXXWbBggXt5WFgYgwYNUmkSj2nEiIiIiEi1cuzYMebMmcOBAwcA2LdvH06nE29vb4uTSVWm4iQiIiIi1UJeXh4LFy5k7dq1GGPw9vZmwIAB9O3bV0eY5BfTCBIRERGRKu/AgQPMnDmTnJwcANq3b8/w4cOpVauWxcmkulBxEhEREZEqLywsDGMMYWFhJCQk0KxZM6sjSTWj4iQiIiIiVU5OTg4//PADvXr1wmazERAQwF133UV4eDgOh8PqeFINqTiJiIiISJXhcrnYsGEDKSkp5ObmUqtWLdq0aQNAZGSkxemkOlNxEhEREZEq4dChQ8yZM4cjR44AEBERQWBgoMWppKZQcRIRERGRSi07O5uUlBQ2bNgAgK+vL0OGDKFnz57Y7botqVwZKk4iIiIiUql98sknHD58GIDOnTsTGxtLUFCQxamkplFxEhEREZFKxxiDzWYDYPDgwaSkpJCYmEh0dLTFyaSmUnESERERkUrjzJkzLFiwgMjISPr06QNAixYtaN68ubtIiVhBxUlERERELOdyuVi9ejWLFy8mPz+fHTt20K1bN3x8fABUmsRyKk4iIiIiYgljICcHDh7cR0rKHE6cOA5AvXoNiI1NxOn0wem0OGQFyM62OoFcDhUnEREREbnijIGhQ7OoW3ceHTtuASAnx58FC4axYUNXjNFseVK5qDiJiIiIyBWXkwM//pjLAw9sxRhYu7YHCxcOJTfX3+poV0xMDAQEWJ1CykrFSURERESumJMnT1K3bl0Ajh+PYM6cBKZPb8gTT9S3ONmVFxAAunSr6lBxEhEREZEKl5GRwdy5c9m+fTv3338/QUH1AFizpidNmkBgoLX5RC5FxUlEREREKkxhYSErV65k6dKlOJ1ObDYbBw4coF27elZHE/GIipOIiIiIVIiffvqJ5ORk0tPTAWjUqBGJiYnUq1dPM8tJlaPiJCIiIiLl7quvvmLTpk0ABAUFMXz4cDp27Kj7MUmVZfk8j2+88QZNmjTBz8+P3r17s3r16ouuP3XqVFq3bo2/vz/R0dE89thj5OXlXaG0IiIiIlIWkZGR2O12+vbty/jx4+nUqZNKk1Rplh5xmjlzJhMmTGDatGn07t2bqVOnEh8fz44dO4iIiCix/scff8xTTz3Fe++9R79+/di5cyd33303NpuNV155xYKvQERERESMMezcuZOAgACaNm0KQK9evWjRogVhYWEWpxMpH5YecXrllVcYN24cY8eOpV27dkybNo2AgADee++9UtdfsWIFMTExjB49miZNmhAXF8dtt912yaNUIiIiIlIx0tPT2bNnD1988QXffPMNhYWFANjtdpUmqVYsO+JUUFDAunXrmDhxonuZ3W4nNjaWlStXlrpNv379+PDDD1m9ejW9evViz549JCUlceedd17wefLz88nPz3d/npmZCYDT6cTpdJbTV3P5zmWoDFmk8tN4EU9pzIinNGakrJxOJ8uXL2fVqlUUFRVht9tp3bo1BQUFGGPKsD2At3tfGnI1R2V6n/Ekg2XF6cSJExQVFVGvXvGpKOvVq8f27dtL3Wb06NGcOHGC/v37Y4yhsLCQBx54gKeffvqCzzNlyhQmT55cYvm8efMIqES3ap4/f77VEaQK0XgRT2nMiKc0ZuRCjDFkZGRw+PBh9y+dwcHBREVFkZubW+axk5fnAK4GYO7cufj5FVVUZKmkKsP7TE5OTpnXrVKz6i1evJg///nP/POf/6R3797s2rWLRx99lD/+8Y88++yzpW4zceJEJkyY4P48MzOT6Oho4uLiCAkJuVLRL8jpdDJ//nyGDx+Ot7e31XGkktN4EU9pzIinNGbkUg4ePMgHH3wAQK1atRg8eDD79u0jLi7OozFz/nTk8fHxugFuDVKZ3mfOnY1WFpYVp7CwMBwOB6mpqcWWp6amEhkZWeo2zz77LHfeeSe/+tWvAOjYsSPZ2dncd999PPPMM9jtJS/Z8vX1xdfXt8Ryb29vy79R56tseaRy03gRT2nMiKc0ZuR8xhj3jHhNmzalTZs2RERE0L9/fwD279/v8Zg5f9Wz25ZrZKkCKsP7jCfPb9nkED4+PnTv3p2UlBT3MpfLRUpKCn379i11m5ycnBLlyOFwAJTpXFoRERERKTtjDFu2bGHatGnuU5psNhu33norQ4YMsfyXXpErydJT9SZMmMCYMWPo0aMHvXr1YurUqWRnZzN27FgA7rrrLqKiopgyZQoA11xzDa+88gpdu3Z1n6r37LPPcs0117gLlIiIiIj8csePH2fOnDns27cPODu7cWxsLIDuxyQ1kqXFaeTIkaSlpfHcc89x7NgxunTpQnJysnvCiAMHDhQ7wvT73/8em83G73//ew4fPkx4eDjXXHMNL7zwglVfgoiIiEi1kp+fz+LFi1m1ahXGGLy8vOjfvz8xMTFWRxOxlOWTQ4wfP57x48eX+tjixYuLfe7l5cWkSZOYNGnSFUgmIiIiUrNs3ryZefPmkf2/mRvatGlDfHw8oaGh1gYTqQQsL04iIiIiUjkcPHiQ7Oxs6tSpQ0JCAi1atLA6kkiloeIkIiIiUkPl5eWRn59PrVq1ABg6dCi1a9emV69eeHnp10SR8+knQkRERKSGMcawceNGFixYQGRkJHfccQc2mw1/f3/69etndTyRSknFSURERKQGOXLkCHPmzOHQoUPA2RuA5uTkEKg70IpclIqTiIiISA2Qk5PDwoULWbduHXD2npqDBg2id+/euq2LSBmoOImIiIhUc8eOHeP9998nNzcXgI4dOzJ8+HCCg4MtTiZSdag4iYiIiFRz4eHhBAQEEBwcTGJiIo0bN7Y6kkiVo+IkIiIiUs1kZ2fz/fffM3jwYBwOBw6HgzvuuIOQkBDsdrvV8USqJBUnERERkWrC5XKxdu1aFi1aRF5eXrFZ8nQTW5FfRsVJREREpBo4cOAASUlJpKamAhAZGUl0dLTFqUSqDxUnERERkSrszJkzzJ8/n82bNwPg5+fH0KFD6d69u07LEylHKk4iIiIiVdg333zDjh07AOjWrRtDhw7VPZlEKoCKk4iIiEgVY4zBZrMBMGzYMHJycoiPjycqKsriZCLVl4qTiIiISBWRmZnJ/Pnz8ff3JzExETg71fg999xjcTKR6k/FSURERKSSKyoq4vvvv2fJkiUUFBRgt9sZMGCAbmArcgWpOImIiIhUYrt372bOnDmcPHkSgIYNG5KYmKjSJHKFqTiJiIiIVEJZWVnMmTOHbdu2ARAYGEhsbCydO3d2X98kIleOipOIiIhIJWS329m7dy82m41evXoxePBg/Pz8rI4lUmOpOImIiIhUEocPH3bPjBcYGMh1111H7dq1qVevnsXJRETFSURERMRip06dYu7cuezYsYNRo0bRunVrANq0aWNxMhE5R8VJRERExCJOp5Ply5ezfPlyCgsLsdvt7kkgRKRyUXESERERucKMMezcuZPk5GROnz4NQNOmTUlISCA8PNzacCJSKhUnERERkSssKSmJtWvXAhASEkJcXBzt2rXTbHkilZiKk4iIiMgV1rJlS9avX0/fvn0ZOHAgPj4+VkcSkUtQcRIRERGpQMYYtm3bhtPppHPnzgC0atWKRx99lJCQEIvTiUhZqTiJiIiIVJATJ04wZ84c9uzZg6+vLy1atCAwMBBApUmkilFxEhERESln+fn5LFmyhO+//x6Xy4XD4aB37946JU+kClNxEhERESknxhi2bt3KvHnzyMrKAs6elhcfH0+dOnUsTiciv4SKk4iIiEg5SU9PZ9asWRhjqF27NiNGjKBVq1ZWxxKRcqDiJCIiIvILFBUV4XA4AKhbty59+/bFx8eHmJgYvLz0q5ZIdaGfZhEREanRjIGcnMvZzvDjj5tZtmwhN910O2FhEQD06zccgPz8sx/VndMJeXkOsrPB27vs22VnV1wmkYqg4iQiIiI1ljHQvz+sWOHZdpGRx0hMTKJRo4MAPProSv773+sqIGFV4A1cbXUIkQqn4iQiIiI1Vk6OZ6XJzy+XoUMX0aPHWux2Q0GBN0uWDGTlyj4VF7Kai4mBgACrU4hcmoqTiIiICJCaCv+7xVKpfvxxM4sWzSU39+x5fa1bt2fQoOE8/XStK5SwcnI6ncydO5f4+Hi8PTlX738CAsBmq4BgIuVMxUlERESEs6XpYsWpsDCb3NwcwsLCSEhIoFmzZlcuXCXmdIKfXxGBgZ5d4yRS1ag4iYiIiJQiJyeHrKws6tWrB0CvXr3w8fGhS5cu7ln0RKTmUHESEREROY/L5WL9+vUsXLiQgIAAHnzwQRwOBw6Hg+7du1sdT0QsouIkIiIi8j+HDh0iKSmJo0ePAhAcHExWVhahoaHWBhMRy6k4iYiISI0XEJBNcvICtmzZCICvry9DhgyhZ8+e2O12a8OJSKWg4iQiIiI1Wmjoae6//y22bMkDoEuXLgwbNoygoCCLk4lIZaLiJCIiIjXa6dO1OHw4in79srn66kSio6OtjiQilZCOPYuIiEiNcubMGb755htycnL+t8TGl1/eyB13jFNpEpEL0hEnERERqRGKiopYvXo1ixcvpqCgAIAhQ64GIDc3AF3KJCIXo+IkIiIi1d6+fftISkoiLS0NgAYNGtC1a1eLU4lIVaLiJCIiItVWZmYm8+fPZ8uWLQD4+/sTGxtL165dsdlsZGdbHFBEqgwVJxEREam2li1bxpYtW7DZbHTv3p2hQ4fi7+9vdSwRqYJUnERERKRaKSwsxMvr7K84gwcP5vTp0wwZMoT69etbnExEqjIVJxEREakWMjIymDt3LgUFBdx+++3YbDYCAgIYPXq01dFEpBpQcRIREZEqrbCwkBUrVrB06VIKCwux2WwcP36cevXqWR1NRKoRFScRERGpsn766SeSk5NJT08HoHHjxiQkJKg0iUi5U3ESERGRKicnJ4fZs2ezY8cOAIKCgoiLi6NDhw7YbDaL04lIdaTiJCIiIlWOj48PaWlp2O12evfuzaBBg/D19bU6lohUYypOIiIiUukZY9i9ezdNmzbF4XDg5eXFDTfcgK+vL+Hh4VbHE5EaQMVJREREKrWTJ0+SnJzMrl27iI+Pp0+fPgA0bNjQ4mQiUpOoOImIiEilVFBQwNKlS1m5ciVFRUXY7XacTqfVsUSkhlJxEhERkUrFGMO2bduYO3cumZmZADRv3pyEhATq1KlLdnb5PVd57ktEqjcVJxEREalUUlJSWL58OQC1atVixIgRtG7dGrDRvz+sWGFtPhGpmVScREREpFLp1KkTq1evpm/fvvTv3x9vb2/g7NGhiipNMTEQEFAx+xaR6uEXFae8vDz8/PzKK4uIiIjUMMYYtm7dSnp6OgMHDgQgIiKCCRMmXPR3jNRUCAwsvxwBAaDbP4nIxXhcnFwuFy+88ALTpk0jNTWVnTt30qxZM5599lmaNGnCvffeWxE5RUREpJo5fvw4c+bMYd++fdhsNtq0aUNERATAJf8wGxhYvsVJRORS7J5u8Kc//YkZM2bw17/+FR8fH/fyDh068M4775RrOBEREal+8vLySE5OZtq0aezbtw8vLy8GDx5MnTp1rI4mInJBHh9xev/99/nXv/7FsGHDeOCBB9zLO3fuzPbt28s1nIiIiFQfxhg2b97M/Pnzyf7fdHZt2rQhPj6e0NBQa8OJiFyCx8Xp8OHDtGjRosRyl8uleyuIiIjIBeXm5jJnzhzy8/OpW7cuI0aMKPV3ChGRysjj4tSuXTuWLl1K48aNiy3/4osv6Nq1a7kFExERkaqvoKDAfWp/QEAAsbGx5OXl0adPH7y8NLmviFQdHr9jPffcc4wZM4bDhw/jcrmYNWsWO3bs4P333+ebb76piIwiIiJSxRhj2LBhAykpKVx//fW0bNkSgB49elicTETk8ng8OcR1113H119/zYIFCwgMDOS5555j27ZtfP311wwfPrwiMoqIiEgVcuTIEd59912+/vprcnJyWLt2rdWRRER+scs6Rj5gwADmz59f3llERESkCsvJySElJYX169cD4OPjw6BBg+jdu7fFyUREfjmPi1OzZs1Ys2YNdevWLbb89OnTdOvWjT179pRbOBEREakatmzZQlJSErm5uQB07NiR4cOHExwcbHEyEZHy4XFx2rdvH0VFRSWW5+fnc/jw4XIJJSIiIlWLt7c3ubm5REREkJiYWGISKRGRqq7MxWn27Nnu/587dy61atVyf15UVERKSgpNmjQp13AiIiJSOWVnZ3P8+HGaNm0KQKtWrbj11ltp3bo1drvHl1CLiFR6ZS5O119/PQA2m40xY8YUe8zb25smTZrw8ssvl2s4ERERqVxcLhdr165l0aJFADz88MMEBARgs9lo27atxelERCpOmYuTy+UCoGnTpqxZs4awsLAKCyUiIiKVz4EDB0hKSiI1NRWAyMhIcnJyCAgIsDiZiEjF8/gap71791ZEDhEREamksrKyWLBgAZs3bwbAz8+PYcOG0a1bN52WJyI1xmVNR56dnc13333HgQMHKCgoKPbYI4884tG+3njjDV566SWOHTtG586d+cc//kGvXr0uuP7p06d55plnmDVrFunp6TRu3JipU6eSmJh4OV+KiIiIXEReXh7//Oc/ycvLA6Bbt24MGzZMR5lEpMbxuDht2LCBxMREcnJyyM7Opk6dOpw4cYKAgAAiIiI8Kk4zZ85kwoQJTJs2jd69ezN16lTi4+PZsWMHERERJdYvKChg+PDhRERE8MUXXxAVFcX+/fsJDQ319MsQERGRMvDz86NDhw4cPXqUhIQEoqKirI4kImIJj4vTY489xjXXXMO0adOoVasW33//Pd7e3txxxx08+uijHu3rlVdeYdy4cYwdOxaAadOm8e233/Lee+/x1FNPlVj/vffeIz09nRUrVuDt7Q2gmfxERETKUWZmJvv37+fEiRPUr18fgLi4OLy8vLDZbBanExGxjsfFaePGjbz11lvY7XYcDgf5+fk0a9aMv/71r4wZM4Ybb7yxTPspKChg3bp1TJw40b3MbrcTGxvLypUrS91m9uzZ9O3bl4ceeoj//ve/hIeHM3r0aJ588kkcDkep2+Tn55Ofn+/+PDMzEwCn04nT6Szrl11hzmWoDFmk8tN4EU9pzEhZFRUVsXr1apYtW4bT6WTevHmMHj3a/XhhYaGF6c46O4y9//f/TjSsKwe9z4inKtOY8SSDx8XJ29vbfSFoREQEBw4coG3bttSqVYuDBw+WeT8nTpygqKiIevXqFVter149tm/fXuo2e/bsYeHChdx+++0kJSWxa9cufv3rX+N0Opk0aVKp20yZMoXJkyeXWD5v3rxKdX72/PnzrY4gVYjGi3hKY0YuJisri0OHDrn/0BgYGIiPjw9JSUkWJysuL88BXA2cvaekn1+RtYGkGL3PiKcqw5jJyckp87oeF6euXbuyZs0aWrZsyaBBg3juuec4ceIEH3zwAR06dPB0dx5xuVxERETwr3/9C4fDQffu3Tl8+DAvvfTSBYvTxIkTmTBhgvvzzMxMoqOjiYuLIyQkpELzloXT6WT+/PkMHz7cffqhyIVovIinNGbkYjIyMliwYAG7d+8GICAggEGDBnHkyBHi4uIq3ZjJzv7//4+Pjycw0Los8v/0PiOeqkxj5tzZaGXhcXH685//TFZWFgAvvPACd911Fw8++CAtW7bk3XffLfN+wsLCcDgc7ntBnJOamkpkZGSp29SvXx9vb+9ip+W1bduWY8eOUVBQgI+PT4ltfH198fX1LbHc29vb8m/U+SpbHqncNF7EUxozUpqdO3eyY8cObDYbvXr1YvDgwTgcDo4ePVopx8z5cc7msy6LlFQZx4xUbpVhzHjy/B4Xpx49erj/PyIiguTkZE93AYCPjw/du3cnJSWF66+/Hjh7RCklJYXx48eXuk1MTAwff/wxLpfLfbrgzp07qV+/fqmlSURERIrLy8vDz88PgN69e5OWlkafPn3cp86X5zUHxoAHZ8Fc0vlHnERErrRyu2vd+vXrufrqqz3aZsKECbz99tv8+9//Ztu2bTz44INkZ2e7Z9m76667ik0e8eCDD5Kens6jjz7Kzp07+fbbb/nzn//MQw89VF5fhoiISLV06tQpPv30U959912Kis5eG+RwOLjuuutKXG9cHoyB/v0hKKj8PiogpohImXl0xGnu3LnMnz8fHx8ffvWrX9GsWTO2b9/OU089xddff018fLxHTz5y5EjS0tJ47rnnOHbsGF26dCE5Odn9Bn7gwIFidySPjo5m7ty5PPbYY3Tq1ImoqCgeffRRnnzySY+eV0REpKZwOp0sX76cZcuWUVRUhN1u5+DBgxV+O4+cHFixomL2HRMDlWh+JxGpIcpcnN59913GjRtHnTp1OHXqFO+88w6vvPIKDz/8MCNHjmTLli20bdvW4wDjx4+/4Kl5ixcvLrGsb9++fP/99x4/j4iISE1ijGHHjh3MnTuX06dPA9C0aVMSEhIIDw+/ollSUynXiRwCAkC3lBKRK63Mxenvf/87L774Ik888QRffvklt9xyC//85z/54YcfaNiwYUVmFBEREQ8UFBTw+eefs2vXLgBCQkKIi4ujXbt2ltzENjCwfIuTiIgVylycdu/ezS233ALAjTfeiJeXFy+99JJKk4iISCXj7e3tPi2vX79+DBgwQJMoiYj8QmUuTrm5ue4bxtpsNnx9falfv36FBRMREZGyMcawbds2mjZtir+/PzabjauvvhpjDHXr1rU6nohIteDR5BDvvPMOQUFBABQWFjJjxgzCwsKKrfPII4+UXzoRERG5qLS0NJKTk9mzZw89e/YkMTERgDp16licTESkeilzcWrUqBFvv/22+/PIyEg++OCDYuvYbDYVJxERkSsgPz+fJUuW8P333+NyuXA4HATqQiIRkQpT5uK0b9++CowhIiIiZWGMYcuWLcyfP5+srCwAWrVqRXx8vI4yiYhUII9O1RMRERFrrVixggULFgBQu3ZtRowYQatWrSxOJSJS/ak4iYiIVCFdunRh1apVdO/enZiYGLy89E+5iMiVoHdbERGRSsoYw+bNm9m3bx/XXXcdAIGBgTzyyCMqTCIiV5jedUVERCqhY8eOkZSUxMGDBwFo3749LVq0AFBpEhGxgN55RUREKpHc3FwWLVrE2rVrMcbg7e3NwIEDadq0qdXRRERqtMsqTrt372b69Ons3r2bv//970RERDBnzhwaNWpE+/btyzujiIhItWeMYcOGDaSkpJCTkwOcPcoUFxdHSEiIxelERMTu6QbfffcdHTt2ZNWqVcyaNYszZ84AsGnTJiZNmlTuAUVERGqCoqIili1bRk5ODuHh4dx1113cfPPNKk0iIpWEx0ecnnrqKf70pz8xYcIEgoOD3cuHDh3K66+/Xq7hREREqrOcnBz8/Pyw2+14eXmRmJhIWloavXr1wuFwWB1PRETO4/ERpx9++IEbbrihxPKIiAhOnDhRLqFERESqM5fLxdq1a3n99ddZs2aNe3mLFi3o27evSpOISCXkcXEKDQ3l6NGjJZZv2LCBqKiocgklIiJSXR06dIh33nmHb7/9ltzcXLZt24YxxupYIiJyCR6fqjdq1CiefPJJPv/8c2w2Gy6Xi+XLl/P4449z1113VURGERGRKi87O5sFCxawceNGAHx9fRkyZAg9e/bEZrNZG05ERC7J4+L05z//mYceeojo6GiKiopo164dRUVFjB49mt///vcVkVFERKRK27ZtG//973/Jz88HoEuXLgwbNoygoCCLk4mISFl5XJx8fHx4++23efbZZ9myZQtnzpyha9eutGzZsiLyiYiIVHl16tShoKCA+vXrk5CQQHR0tNWRRETEQx4Xp2XLltG/f38aNWpEo0aNKiKTiIhIlZaVlcW+ffvo2LEjAPXq1ePuu++mYcOG2O0eX14sIiKVgMfFaejQoURFRXHbbbdxxx130K5du4rIJSIiUuUUFRWxevVqFi9ejNPppF69ekRERABUqz82GgP/u0fvBWVnX5ksIiJXisd/9jpy5Ai//e1v+e677+jQoQNdunThpZde4tChQxWRT0REpErYt28fb731FvPmzaOgoIAGDRpUy9nyjIH+/SEo6OIf9epZnVREpHx5XJzCwsIYP348y5cvZ/fu3dxyyy38+9//pkmTJgwdOrQiMoqIiFRamZmZfPnll/z73/8mLS2NgIAArrnmGu69917qVcP2kJMDK1aUff2YGAgIqLg8IiJXisen6p2vadOmPPXUU3Tu3Jlnn32W7777rrxyiYiIVHpFRUW88847ZGVlYbPZ6NGjB0OGDMHf39/qaFdEaioEBl58nYAA0GzrIlIdXHZxWr58OR999BFffPEFeXl5XHfddUyZMqU8s4mIiFRqDoeDvn37sm3bNhISEqhfv77Vka6owMBLFycRkerC4+I0ceJEPv30U44cOcLw4cP5+9//znXXXUeAjsOLiEg1l5GRwdy5c+nWrRstWrQAoHfv3vTp00c3sRURqeY8Lk5LlizhiSee4NZbbyUsLKwiMomIiFQqhYWFrFixgqVLl1JYWMiJEydo3rw5NptN04uLiNQQHhen5cuXV0QOERGRSumnn35izpw5nDp1CoDGjRuTkJCgI0wiIjVMmYrT7NmzSUhIwNvbm9mzZ1903WuvvbZcgomIiFjp1KlTJCcns3PnTgCCgoKIi4ujQ4cOKk0iIjVQmYrT9ddfz7Fjx4iIiOD666+/4Ho2m42ioqLyyiYiImKZY8eOsXPnTux2O3369GHgwIH4+vpaHUtERCxSpuLkcrlK/X8REZHqwhhDZmYmtWrVAqBNmzYMGDCAjh07Eh4ebnE6ERGxmsdXtL7//vvk5+eXWF5QUMD7779fLqFERESupJMnT/Lxxx/z1ltvkZOTA5w9i2Lo0KEqTSIiAlxGcRo7diwZGRkllmdlZTF27NhyCSUiInIlFBQUkJKSwptvvsmuXbvIz8/nwIEDVscSEZFKyONZ9YwxpV4Ue+jQIffpDSIiIpWZMYYff/yRefPmkZmZCUCLFi0YMWIEdevWtTidiIhURmUuTl27dsVms2Gz2Rg2bBheXv+/aVFREXv37mXEiBEVElJERKS8uFwuPv74Y3bv3g1AaGgo8fHxtG7dWrPliYjIBZW5OJ2bTW/jxo3Ex8cTFBTkfszHx4cmTZpw0003lXtAERGR8mS32wkNDcXhcNC/f39iYmLw9va2OpaIiFRyZS5OkyZNAqBJkyaMHDkSPz+/CgslIiJSXowxbNmyhQYNGrhPwxs6dCgxMTHUrl3b4nQiIlJVeHyN05gxYyoih4iISLk7fvw4SUlJ7N+/n+bNm3P77bdjs9kICAggICDA6ngiIlKFlKk41alTh507dxIWFkbt2rUveg54enp6uYUTERG5HHl5eSxevJjVq1djjMHLy4tGjRpdcIIjERGRSylTcXr11VcJDg52/7/+0RERkcrIGMPmzZuZP38+2dnZALRt25a4uDhCQ0OtDSciIlVamYrT+afn3X333RWVRURE5BfZtGkT//3vfwGoW7cuCQkJNG/e3OJUIiJSHXh8jdP69evx9vamY8eOAPz3v/9l+vTptGvXjueffx4fH59yDykiInIh559+16FDB1avXk27du3o27cvDofD4nQiIlJd2D3d4P7772fnzp0A7Nmzh5EjRxIQEMDnn3/O7373u3IPKCIiUhpjDOvXr+f999+nqKgIAC8vL8aNG0f//v1VmkREpFx5XJx27txJly5dAPj8888ZNGgQH3/8MTNmzODLL78s73wiIiIlHDlyhHfffZevv/6affv2sWnTJvdjug5XREQqgsen6hljcLlcACxYsICrr74agOjoaE6cOFG+6URERM6Tk5NDSkoK69evB87egH3w4MF07tzZ4mQiIlLdeVycevTowZ/+9CdiY2P57rvvePPNNwHYu3cv9erVK/eAIiIixhjWrVvHwoULyc3NBaBTp07Exsa6Z32V0hkDOTllX9/phLw8B9nZ4O1d8vH/TVYoIlLjeFycpk6dyu23385XX33FM888Q4sWLQD44osv6NevX7kHFBERAdiyZQu5ubnUq1ePhIQEGjdubHWkSs8Y6N8fVqzwZCtv4OoKSiQiUnV5XJw6derEDz/8UGL5Sy+9pAtxRUSk3GRnZ+NwOPDz88Nms5GYmMjevXvp2bMndrvHl+jWSDk5npamsouJgYCAitm3iEhl5HFxOmfdunVs27YNgHbt2tGtW7dyCyUiIjWXy+VizZo1LFq0iM6dO5OQkABAREQEERERFqerulJTITDw0us5nU7mzp1LfHw83qWdq/c/AQGgeThEpCbxuDgdP36ckSNH8t1337nvwn769GmGDBnCp59+Snh4eHlnFBGRGmL//v3MmTOH1NRUAA4fPkxRUZHOaCgHgYFlLU7g51dEYGDp1ziJiNRUHp/r8PDDD3PmzBm2bt1Keno66enpbNmyhczMTB555JGKyCgiItVcVlYW//nPf5gxYwapqan4+flx1VVXcc8996g0iYhIpeDxEafk5GQWLFhA27Zt3cvatWvHG2+8QVxcXLmGExGR6m/Xrl18/vnnFBQUANCtWzeGDRtGgC6gERGRSsTj4uRyuUo959nb29t9fycREZGyioyMxGazERUVRUJCAlFRUVZHEhERKcHjU/WGDh3Ko48+ypEjR9zLDh8+zGOPPcawYcPKNZyIiFQ/mZmZrDhvqregoCDuvfde7r33XpUmERGptDw+4vT6669z7bXX0qRJE6KjowE4ePAgHTp04MMPPyz3gCIiUj0UFRWxcuVKlixZgtPpJDw8nJYtWwJoYiEREan0PC5O0dHRrF+/npSUFPd05G3btiU2Nrbcw4mISPWwe/du5syZw8mTJ4Gz/5aEhIRYnEpERKTsPCpOM2fOZPbs2RQUFDBs2DAefvjhisolIiLVwOnTp5k3b577D22BgYEMHz6cTp06YdNNgEREpAopc3F68803eeihh2jZsiX+/v7MmjWL3bt389JLL1VkPhERqaKMMXz88cekpaVhs9no1asXgwcPxs/Pz+poIiIiHivz5BCvv/46kyZNYseOHWzcuJF///vf/POf/6zIbCIiUgUZYwCw2WwMGzaMxo0bc//99zNixAiVJhERqbLKXJz27NnDmDFj3J+PHj2awsJCjh49WiHBRESkajl16hSffPIJa9eudS9r1aoVY8aMoV69ehYmExER+eXKfKpefn4+gYGB7s/tdjs+Pj7k5uZWSDAREakanE4ny5YtY/ny5RQVFXH48GG6du2Kl5eXrmMSEZFqw6PJIZ599tlid3IvKCjghRdeoFatWu5lr7zySvmlExGRSssYw44dO5g7dy6nT58GoFmzZiQkJODl5fGkrSIiIpVamf9lGzhwIDt27Ci2rF+/fuzZs8f9uf6yKCJSM6SnpzNnzhx27doFQEhICPHx8bRt21b/FoiISLVU5uK0ePHiCowhIiJVSX5+Prt378bhcNC3b18GDBiAj4+P1bFEREQqjM6lEBGRSzLGcPz4cfckD/Xr1ycxMZGmTZtSt25di9OJiIhUPBUnERG5qLS0NObMmcP+/ft54IEHCA8PB6BHjx4WJxMREblyVJxERKRU+fn5fPfdd6xatQqXy4XD4eDo0aPu4iQiIlKTqDiJiEgxxhi2bNnCvHnzOHPmDACtW7cmPj6e2rVrW5xORETEGipOIiLiZozh008/ZefOnQDUrl2bhIQEWrZsaXEyERERa9kvZ6OlS5dyxx130LdvXw4fPgzABx98wLJly8o1nIiIXFk2m41GjRrh5eXFkCFD+PWvf63SJCIiwmUUpy+//JL4+Hj8/f3ZsGED+fn5AGRkZPDnP/+53AOKiEjFMcawadMm9u3b517Wp08fxo8fz8CBA3Uj20rKGMjOLtuHiIiUD4+L05/+9CemTZvG22+/jbe3t3t5TEwM69evL9dwIiJScY4dO8b06dP56quv+PbbbykqKgLA4XBQq1Yti9PJhRgD/ftDUNClP/43e7yIiJQDj/+UuGPHDgYOHFhiea1atTh9+nR5ZBIRkQqUm5vLwoULWbduHcYYvL296dKli9WxpIxycmDFCs+2iYmBgICKySMiUlN4fMQpMjKSXbt2lVi+bNky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afzrX/+isLAQm81G7969GTRoEH5+flZHkyvAGMjJsea5s7OteV4REbGOipOIVFlhYWE0bNgQYwyJiYlERERYHUmuEGOgf39YscLqJCIiUlOoOIlIlZGens53331HQkICfn5+2Gw2Ro4cia+vr07Lq2FycipHaYqJAd0OTESkZlBxEpFKz+l0smzZMpYvX05RURH+/v6MGDECQKflCampEBhozXMHBIA6u4hIzaDiJCKVljGGHTt2kJycTEZGBgDNmjWjR48eFieTyiQw0LriJCIiNYeKk4hUSidPniQ5OZldu3YBEBISQnx8PG3bttVpeSIiInLFqTiJSKW0bNkydu3ahcPhoF+/fvTv3x8fHx+rY4mIiEgNpeIkIpWCMQan0+kuR8OGDaOgoIChQ4dSt25di9OJiIhITafiJCKWS0tLY86cOfj4+DBq1CgAgoKCuOWWWyxOJiIiInKWipOIWCY/P5/vvvuOVatW4XK5cDgcpKenU6dOHaujiYiIiBSj4iQiV5wxhi1btjBv3jzOnDkDQOvWrYmPj6d27doWpxMREREpScVJRK6ozMxMZs2axf79+wGoXbs2CQkJtGzZ0uJkIiIiIhem4iQiV5S/vz8ZGRl4eXkxYMAA+vXrh5eX3opERESkctNvKyJSoYwxbNu2jTZt2mC32/H29uamm24iKCiI0NBQq+OJiIiIlImKk4hUmKNHj5KUlMShQ4dISEigV69eADRs2NDiZCIiIiKeUXESkXKXm5vLwoULWbduHcYYvL29rY4kIiIi8ouoOIlIuTHGsH79elJSUsjNzQWgffv2xMXFERISYnE6ERERkcun4iQi5ebbb79l3bp1AISHh5OQkEDTpk0tTiUiIiLyy6k4iUi56dGjB1u3bmXgwIH06tULh8NhdSQRERGRcqHiJCKXxeVysW7dOnJzcxk4cCAAkZGRPPbYY/j4+FicTkRERKR8qTiJiMcOHjxIUlISx44dw263065dO8LCwgBUmkRERKRaUnESkTI7c+YMCxYsYNOmTQD4+voydOhQ6tSpY3EyERERkYql4iQil+RyuVizZg2LFi0iPz8fgC5duhAbG0tgYKDF6UREREQqnoqTiFxSdnY2CxcupKCggPr165OYmKib2IqIiEiNouIkIqXKy8vDz88PgODgYIYPHw5At27dsNvtVkYTERERueJUnESk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j6+QmwwGBIDNVu67FRERqXRUnETK2f79+0lKSuL48eMAdO7cmSZNmgCoNIlHAgPLoziBn18RgYHle42TiIhITaPiJFJOsrKymD9/Pj/88AMA/v7+DB06VNcxiYiIiFQDKk4iv1BRURGrVq3iu+++o6CgAIDu3bszdOhQAnTxh4iIiEi1oOIk8gu5XC5Wr15NQUEBUVFRJCYm0qBBA6tjiYiIiEg5UnESuQyZmZkEBQVht9vx9vbmqquu4syZM3Tp0gWbrpQXERERqXZUnEQ8UFhYyPfff8+SJUuIi4ujR48eALRs2dLiZCIiIiJSkVScRMpo165dJCcnc/LkSffn54qTiIiIiFRvKk4il3D69Gnmzp3L9u3bAQgMDGT48OF06tTJ4mQiIiIicqWoOIlcxKZNm/jmm28oLCzEZrPRu3dvBg0ahJ+fn9XRREREROQKUnESuYjw8HAKCwtp3LgxiYmJREREWB1JRERERCyg4iRynvT0dA4ePEjnzp0BaNCgAePGjaN+/fqaLU9ERESkBlNxEgGcTifLli1j+fLlGGOIiooiLCwMQPdkEhEREREVJ6nZjDFs376duXPnkpGRAUCzZs2w2+0WJxMRERGRykTFSWqskydPMmfOHHbv3g1ASEgI8fHxtG3bVqfliYiIiEgxKk5SIzmdTt59911yc3NxOBz069eP/v374+PjY3U0EREREamEVJykxjDGuI8keXt7069fP/bv38+IESOoW7euxelEREREpDJTcZIaIS0tjTlz5jBgwACaNm0KQExMDDExMTotT0REREQuScVJqrX8/Hy+++47Vq1ahcvlIi8vj3HjxmGz2VSYRERERKTMVJykWjLG8MMPPzB//nzOnDkDQOvWrYmPj1dhEhERERGPqThJtZOamkpSUhIHDhwAoE6dOowYMYKWLVtanExEREREqioVJ6l20tLSOHDgAF5eXgwcOJC+ffvi5aWhXlkYAzk5VqeovLKzrU4gIiIipdFvk1LlGWM4deoUderUAaB9+/acPHmSLl26UKtWLYvTyfmMgf79YcUKq5OIiIiIeEbFSaq0o0ePkpSURHp6OuPHj8ff3x+bzcagQYOsjialyMlRaSqrmBgICLA6hYiIiJyj4iRVUm5uLgsXLmTt2rXA2fsyHT16lGbNmlmcTMoqNRUCA61OUXkFBIDmMREREak8VJykSjHGsH79elJSUsjNzQWgQ4cODB8+nJCQEIvTiScCA1WcREREpOpQcZIqo7CwkBkzZnD48GEAwsPDSUxMpEmTJtYGExEREZFqT8VJqgwvLy/Cw8M5ceIEgwcPpmfPnjgcDqtjiYiIiEgNoOIklZbL5WLdunU0b97cPWPe8OHDGTZsGEFBQRanExEREZGaRMVJKqWDBw+SlJTEsWPHaNWqFbfddhsAAZpmTEREREQsoOIklcqZM2dYsGABmzZtAsDPz4/mzZtjjMGmKcZERERExCIqTlIpuFwu1qxZw6JFi8jPzwegS5cuxMbGEqip10RERETEYipOUimsXbuW5ORkAOrXr09iYiINGza0OJWIiIiIyFkqTmKZ80+/69atG5s3b6Zr16507doVu91ucToRERERkf+n4iRXXFFREatWrWLHjh2MGTMGu92Ol5cX9957r65jEhEREZFKScVJrqg9e/YwZ84cTpw4AcDWrVvp2LEjgEqTiIiIiFRaKk5yRWRkZDBv3jx+/PFH4Oy04rGxsXTo0MHiZCIiIiIil6biJBXK5XKxfPlyli5ditPpxGaz0aNHD4YMGYK/v7/V8UREREREykTFSSqUzWbjp59+wul00qhRIxISEoiMjLQ6loiIiIiIR1ScpNydPn0af39/fH19sdlsJCYmkpqaSqdOnXQdk4iIiIhUSSpOUm4KCwtZvnw5y5Yto2fPnsTFxQEQGRmpo0wiIiIiUqWpOEm52LlzJ8nJyZw6dQqA1NTUYvdpEhERERGpylSc5BdJT08nOTmZn376CYDg4GDi4uJo3769SpOIiIiIVBsqTnLZtm3bxpdffklRURF2u50+ffowaNAgfHx8rI4mIiIiIlKuVJzksjVs2BCHw0Hjxo1JSEggLCzM6kgiIiIiIhVCxUnK7OTJk2zbto3+/fsDZ0/Lu//++6ldu7ZOyxMRERGRak3FSS6poKCAJUuWsHLlSlwuF/Xr16d58+YA1KlT57L3awzk5JRXyprB6YS8PAfZ2eDtbXUaz2VnW51ARERE5PKoOMkFGWP48ccfmTdvHpmZmQC0bNmS2rVrl8O+oX9/WLHiF++qhvEGrrY6hIiIiEiNo+IkpUpLS2POnDns3bsXgNDQUEaMGEGrVq3K5bS8nByVpposJgYCAqxOISIiIlJ2Kk5Sgsvl4pNPPuHUqVN4eXkRExNDTEwM3hV0blhqKgQGVsiuqx2n08ncuXOJj4+vsO/HlRAQALosTkRERKoSFScBzp6WB2Cz2bDb7cTGxrJ582bi4+PL5dS8iwkMVHEqK6cT/PyKCAysmtc4iYiIiFRVKk5CamoqSUlJdOrUie7duwPQrl072rVrZ3EyEREREZHKQcWpBsvLy2PRokWsWbMGYwwZGRl07doVu91udTQRERERkUpFxakGMsawadMmFixYQPb/5odu164dcXFxKk0iIiIiIqVQcaphjh8/ztdff82hQ4cACAsLY8SIEe77MomIiIiISEkqTjWM0+nk0KFDeHt7M2jQIPr06YPD4bA6loiIiIhIpabiVM0ZYzh69CgNGjQAICoqimuuuYYWLVoQEhJicToRERERkapBxakaO3z4MElJSaSmpvLggw9St25dALp162ZxMhERERGRqkXFqRrKyclhwYIFbNiwAQBfX1/S0tLcxUlERERERDyj4lSNuFwu1q1bx8KFC8nLywOgc+fOxMbGEhQUZHE6EREREZGqS8WpmjDG8O9//5sDBw4AUK9ePRITE2nUqJHFyUREREREqj4Vp2rCZrPRokULjh8/zpAhQ+jRo4fuySQiIlIBjDEUFhZSVFRkdZRKwel04uXlRV5enl4TKZMrPWa8vb3LZRZpFacqyuVysXr1aurXr0/jxo0B6Nu3L926dSMwMNDidCIiItVTQUEBR48eJScnx+oolYYxhsjISA4ePIjNZrM6jlQBV3rM2Gw2GjZs+IsvXVFxqoL2799PUlISx48fJyIigvvvvx+73Y6XlxdeXvqWioiIVASXy8XevXtxOBw0aNAAHx8fFQXOvi5nzpwhKChIZ7tImVzJMWOMIS0tjUOHDtGyZctfdORJv2VXIVlZWcyfP58ffvgBAH9/f3r16mVxKhERkZqhoKAAl8tFdHQ0AQEBVsepNFwuFwUFBfj5+ak4SZlc6TETHh7Ovn37cDqdKk7VXVFREatWreK7776joKAAgO7duzN06FC9cYuIiFxhKgciVUt5HRlWcaoCdu7cyfz58wGIiooiMTGRBg0aWJxKRERERKTmUHGqpIqKityHEtu0aUO7du1o0aIFXbp00fnUIiIiIiJXmI41VzKFhYUsXbqUN954w30TW5vNxi233ELXrl1VmkREREQscPLkSSIiIti3b5/VUeQ8P/74Iw0bNiQ7O7vCn6tSFKc33niDJk2a4OfnR+/evVm9evVF1//8889p06YNfn5+dOzYkaSkpCuUtGLt2rWLN998k4ULF3Lq1Ck2btxodSQRERGpBu6++25sNhs2mw1vb2+aNm3K7373O/cfac/3zTffMGjQIIKDgwkICKBnz57MmDGj1P1++eWXDB06lEaNGhESEkKnTp34wx/+QHp6+kXzLFq0iMTEROrWrUtAQADt2rXjt7/9LYcPHy6PL7dCvPDCC1x33XU0adKkxGPx8fE4HA7WrFlT4rHBgwfzm9/8psTyGTNmEBoaWmxZZmYmzzzzjPv33MjISGJjY5k1axbGmHL6SkpavHgx3bp1w9fXlxYtWlzw+33Ojh07GDJkCPXq1cPPz49mzZrx+9//HqfTWWy9qVOn0rp1a/z9/YmOjuaxxx4rNuaaNWvmHpfnfzz00EMApKen8/DDD7v30ahRIx555BEyMjLc+2jXrh19+vThlVdeKb8X5AIsL04zZ85kwoQJTJo0ifXr19O5c2fi4+M5fvx4qeuvWLGC2267jXvvvZcNGzZw/fXXc/3117Nly5YrnLz85Ofn88UXX/DRRx+Rnp5OYGAg119/Pb1797Y6moiIiFQTI0aM4OjRo+zZs4dXX32Vt956i0mTJhVb5x//+AfXXXcdMTExrFq1is2bNzNq1CgeeOABHn/88WLrPvPMM4wcOZIePXrw+eefs3nzZl5++WU2bdrEBx98cMEcb731FrGxsURGRvLll1/y448/Mm3aNDIyMnj55Zcv++s7N4FWRcjJyeHdd9/l3nvvLfHYgQMHWLFiBePHj+e999677Oc4ffo0/fr14/3332fixImsX7+eJUuWMHLkSH73u98VKwvlae/evVx11VUMGTKEjRs38pvf/IZf/epXzJ0794LbeHt7c9dddzFv3jx27NjB1KlTefvtt4uNp48//pinnnqKSZMmsW3bNt59911mzpzJ008/7V5n1apVHD161P1x7pr+W265BYAjR45w5MgR/va3v7FlyxZmzJhBcnJyie/D2LFjefPNNyksLCzPl6YkY7FevXqZhx56yP15UVGRadCggZkyZUqp6996663mqquuKrasd+/e5v777y/T82VkZBjAZGRkXH7oclJU5DLJyQvN5MmTzfPPP28mT55svv462Zw8mWfOnDHV+iM11Rg4+3Hm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NjYWGRkZCA0NRUpKCt577z0AwMqVK7F9+3ZcunQJmZmZ2LlzJ5ydnSv90l4nJyfY2dkhPj4eN2/exP3796t83sDAQMTFxWHz5s3GRSHKLViwAH//+9+xaNEiXLx4Eenp6YiJicGHH35o0bn16dMHXbt2RXh4OACgQ4cOOHPmDBISEpCZmYmPPvoIp0+fNtmnTZs2SE1NRUZGBm7fvo2SkhIEBgaiRYsW8Pf3x7Fjx5CTk4OkpCTMmDED//73vy3KRETU0LFxIiKiCrp164aVK1fi448/xosvvojo6GiTpbx/SaVS4c6dO5gwYQI8PDwQEBCAoUOHYtGiRQCArl274h//+AcyMzPRv39/vPTSS1iwYAF0Ol2NM86YMQOzZs3C+++/jy5duiA+Ph779u1Dhw4dADy+zO+TTz5Bz5490atXL+Tm5uLAgQPGGbSfs7GxwerVq7F+/XrodDr4+/tX+byDBw9G8+bNkZGRgXHjxpk85uvri/379+PQoUPo1asXfve73+HTTz9F69atLT6/mTNnYuPGjbh27RqmTJmCUaNGYcyYMfD29sadO3dMZp8A4J133oGnpyd69uyJli1bIjk5Gfb29jh69Cjc3NwwatQodOrUCcHBwSgqKuIMFBGRhRQiItYOQUREREREVJ9xxomIiIiIiMgMNk5ERERERERmsHEiIiIiIiIyg40TERERERGRGWyciIiIiIiIzGDjREREREREZAYbJyIiIiIiIjPYOBEREREREZnBxomIiIiIiMgMNk5ERERERERmsHEiIiIiIiIy4/8AB9FiiTC19bUAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#RESULTADOS ANTERIORES"],"metadata":{"id":"xKngr2gTJVyE"}},{"cell_type":"code","source":["from sklearn.metrics import classification_report, roc_auc_score\n","import matplotlib.pyplot as plt\n","\n","predictions_test = model.predict(test_data)\n","predicted_classes_test = np.round(predictions_test).astype(int)\n","\n","y_test = test_data.classes\n","\n","print(\"Test set classification report after fine-tuning:\")\n","print(classification_report(y_test, predicted_classes_test, target_names=['Clase 0', 'Clase 1']))\n","\n","auc_score_test = roc_auc_score(y_test, predictions_test)\n","print(\"Test set AUC Score after fine-tuning:\", auc_score_test)\n","\n","predictions_train = model.predict(train_data, steps=len(train_data), verbose=1)\n","predicted_classes_train = np.round(predictions_train).astype(int)\n","\n","y_train = train_data.classes\n","\n","print(\"Train set classification report after fine-tuning:\")\n","print(classification_report(y_train, predicted_classes_train, target_names=['Clase 0', 'Clase 1']))\n","\n","auc_score_train = roc_auc_score(y_train, predictions_train)\n","print(\"Train set AUC Score after fine-tuning:\", auc_score_train)\n"],"metadata":{"id":"4-LSwrhIkB7e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731537156164,"user_tz":300,"elapsed":24930,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"42e08371-0b05-401e-cd31-4e391b0e455d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 3s/step\n","Test set classification report after fine-tuning:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.83      0.88      0.86        67\n","     Clase 1       0.38      0.29      0.33        17\n","\n","    accuracy                           0.76        84\n","   macro avg       0.61      0.59      0.59        84\n","weighted avg       0.74      0.76      0.75        84\n","\n","Test set AUC Score after fine-tuning: 0.5443371378402106\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 665ms/step\n","Train set classification report after fine-tuning:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.80      0.88      0.84       265\n","     Clase 1       0.24      0.14      0.18        70\n","\n","    accuracy                           0.73       335\n","   macro avg       0.52      0.51      0.51       335\n","weighted avg       0.68      0.73      0.70       335\n","\n","Train set AUC Score after fine-tuning: 0.5213477088948787\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import precision_score, recall_score\n","\n","predictions_test = model.predict(test_data)\n","predicted_classes_test = np.round(predictions_test).astype(int)\n","y_test = test_data.classes\n","\n","precision = precision_score(y_test, predicted_classes_test, average='binary', pos_label=1)\n","recall = recall_score(y_test, predicted_classes_test, average='binary', pos_label=1)\n","\n","print(\"Precision (Test Set, Class 1):\", precision)\n","print(\"Recall (Test Set, Class 1):\", recall)\n"],"metadata":{"id":"-XZD7a7bS_E-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731537232364,"user_tz":300,"elapsed":1986,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"a70cdb6a-5269-4a5b-81fb-735e0dfe5408"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 305ms/step\n","Precision (Test Set, Class 1): 0.15384615384615385\n","Recall (Test Set, Class 1): 0.11764705882352941\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"iCndqMQiqVj_"},"execution_count":null,"outputs":[]}]}