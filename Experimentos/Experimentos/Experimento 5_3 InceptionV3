{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":82727,"status":"ok","timestamp":1732046484546,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"boX8ZPtfYMuE","outputId":"49047600-d815-4f62-c009-eff000581b69"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6942,"status":"ok","timestamp":1732046507170,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"mQzpyzneXrW8","outputId":"236eae4f-48c6-4694-a04f-4ddf8b2e7557"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train DataFrame:\n","                                             filename   id eye Diagnosis\n","2   /content/drive/My Drive/Proyecto de Grado G/Pr...  004  OD         1\n","3   /content/drive/My Drive/Proyecto de Grado G/Pr...  004  OS         1\n","4   /content/drive/My Drive/Proyecto de Grado G/Pr...  005  OD         1\n","5   /content/drive/My Drive/Proyecto de Grado G/Pr...  005  OS         1\n","14  /content/drive/My Drive/Proyecto de Grado G/Pr...  010  OD         1\n","\n","Test DataFrame:\n","                                             filename   id eye Diagnosis\n","20  /content/drive/My Drive/Proyecto de Grado G/Pr...  015  OD         1\n","21  /content/drive/My Drive/Proyecto de Grado G/Pr...  015  OS         1\n","32  /content/drive/My Drive/Proyecto de Grado G/Pr...  023  OD         1\n","33  /content/drive/My Drive/Proyecto de Grado G/Pr...  023  OS         1\n","42  /content/drive/My Drive/Proyecto de Grado G/Pr...  028  OD         0\n"]}],"source":["import pandas as pd\n","from sklearn.model_selection import StratifiedShuffleSplit\n","import numpy as np\n","import os\n","\n","# Ruta al directorio con las imágenes\n","directorio_imagenes = '/content/drive/My Drive/Proyecto de Grado G/ProcessedImages_Disc_Exp2'\n","\n","imagenes_info = []\n","for filename in os.listdir(directorio_imagenes):\n","    if filename.endswith('.jpg') or filename.endswith('.png'):\n","        base = filename.split('_')[0]\n","        id_paciente = base[3:-2]  # Extrae correctamente el ID del paciente\n","        tipo_ojo = base[-2:]\n","        full_path = os.path.join(directorio_imagenes, filename)\n","        imagenes_info.append({'filename': full_path, 'id': id_paciente, 'eye': tipo_ojo})\n","\n","imagenes_df = pd.DataFrame(imagenes_info)\n","\n","# Cargar y preparar los datos clínicos\n","data_od = pd.read_excel('/content/drive/My Drive/Proyecto de Grado G/patient_data_od.xlsx')\n","data_os = pd.read_excel('/content/drive/My Drive/Proyecto de Grado G/patient_data_os.xlsx')\n","\n","data_od['id'] = data_od['Unnamed: 0'].str.replace('#', '').astype(str)\n","data_os['id'] = data_os['Unnamed: 0'].str.replace('#', '').astype(str)\n","\n","data_od['eye'] = 'OD'\n","data_os['eye'] = 'OS'\n","\n","data_clinica = pd.concat([data_od[['id', 'eye', 'Diagnosis']], data_os[['id', 'eye', 'Diagnosis']]])\n","\n","full_df = pd.merge(imagenes_df, data_clinica, on=['id', 'eye'], how='left')\n","full_df = full_df[full_df['Diagnosis'] != 2]\n","\n","dominant_diagnosis = full_df.groupby('id')['Diagnosis'].agg(lambda x: x.mode()[0])\n","\n","\n","patient_df = pd.DataFrame(dominant_diagnosis).reset_index()\n","\n","splitter = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n","train_patients, test_patients = next(splitter.split(patient_df, patient_df['Diagnosis']))\n","\n","train_ids = patient_df.iloc[train_patients]['id']\n","test_ids = patient_df.iloc[test_patients]['id']\n","\n","train_df = full_df[full_df['id'].isin(train_ids)]\n","test_df = full_df[full_df['id'].isin(test_ids)]\n","\n","print(\"Train DataFrame:\")\n","print(train_df[['filename', 'id', 'eye', 'Diagnosis']].head())\n","\n","print(\"\\nTest DataFrame:\")\n","print(test_df[['filename', 'id', 'eye', 'Diagnosis']].head())"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3057,"status":"ok","timestamp":1732046511530,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"4YD6q2Ue5XkZ","outputId":"aca9b9dc-87ab-4e9f-e984-d30f29bbb606"},"outputs":[{"output_type":"stream","name":"stdout","text":["Found 335 validated image filenames belonging to 2 classes.\n","Found 84 validated image filenames belonging to 2 classes.\n","Found 84 validated image filenames belonging to 2 classes.\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-3-3d2c26278ef2>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train_df['Diagnosis'] = train_df['Diagnosis'].astype(str)\n","<ipython-input-3-3d2c26278ef2>:26: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_df['Diagnosis'] = test_df['Diagnosis'].astype(str)\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import os\n","from tensorflow.keras.applications.inception_v3 import InceptionV3, preprocess_input\n","from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Input\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n","from sklearn.metrics import roc_auc_score\n","from sklearn.model_selection import StratifiedShuffleSplit\n","from sklearn.utils.class_weight import compute_class_weight\n","# Preparar los generadores de datos\n","train_datagen = ImageDataGenerator(\n","    preprocessing_function=preprocess_input,\n","    width_shift_range=0.1,\n","    height_shift_range=0.1,\n","    validation_split=0.2\n",")\n","\n","test_datagen = ImageDataGenerator(\n","    preprocessing_function=preprocess_input,\n",")\n","\n","train_df['Diagnosis'] = train_df['Diagnosis'].astype(str)\n","test_df['Diagnosis'] = test_df['Diagnosis'].astype(str)\n","\n","train_data = train_datagen.flow_from_dataframe(\n","    dataframe=train_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=20,\n","    class_mode='binary'\n",")\n","\n","test_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode='binary'\n",")\n","\n","valid_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode='binary'\n",")\n"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":356,"status":"ok","timestamp":1732046513219,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"j6-13qP2n_02","outputId":"59b69b79-85d7-4f67-d90f-41d873c67b99"},"outputs":[{"output_type":"stream","name":"stdout","text":["Valores únicos en 'Diagnosis' después de la conversión: [1 0]\n","Class weights: {0: 0.6320754716981132, 1: 2.392857142857143}\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-4-5d28dd34677d>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train_df['Diagnosis'] = train_df['Diagnosis'].astype(int)\n","<ipython-input-4-5d28dd34677d>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_df['Diagnosis'] = test_df['Diagnosis'].astype(int)\n"]}],"source":["from sklearn.utils.class_weight import compute_class_weight\n","import pandas as pd\n","\n","# Convertir 'Diagnosis' de cadena a enteros\n","train_df['Diagnosis'] = train_df['Diagnosis'].astype(int)\n","test_df['Diagnosis'] = test_df['Diagnosis'].astype(int)\n","\n","# Verificar que la conversión fue exitosa\n","print(\"Valores únicos en 'Diagnosis' después de la conversión:\", train_df['Diagnosis'].unique())\n","\n","# Calcular los pesos de clases\n","class_weights = compute_class_weight(\n","    class_weight='balanced',\n","    classes=np.unique(train_df['Diagnosis']),\n","    y=train_df['Diagnosis']\n",")\n","class_weights = dict(enumerate(class_weights))\n","\n","print(\"Class weights:\", class_weights)\n"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RNcbG_WLm8Ma","executionInfo":{"status":"ok","timestamp":1732047145683,"user_tz":300,"elapsed":620973,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"d6d7ca52-9ae0-4300-bb5b-2f0174b2c906"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/inception_v3/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n","\u001b[1m87910968/87910968\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 0us/step\n","Inicio de Warm-Up Training...\n","\n","Epoch 1/50\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:122: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 901ms/step - loss: 2.4611\n","Epoch 1: val_loss improved from inf to 1.71593, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m58s\u001b[0m 2s/step - loss: 2.4331 - val_loss: 1.7159\n","Epoch 2/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 276ms/step - loss: 0.9042\n","Epoch 2: val_loss improved from 1.71593 to 1.17984, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 408ms/step - loss: 0.9049 - val_loss: 1.1798\n","Epoch 3/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 276ms/step - loss: 0.7002\n","Epoch 3: val_loss improved from 1.17984 to 0.82785, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 384ms/step - loss: 0.6993 - val_loss: 0.8278\n","Epoch 4/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 329ms/step - loss: 0.5900\n","Epoch 4: val_loss improved from 0.82785 to 0.60482, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 436ms/step - loss: 0.5913 - val_loss: 0.6048\n","Epoch 5/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 282ms/step - loss: 0.5265\n","Epoch 5: val_loss did not improve from 0.60482\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 327ms/step - loss: 0.5290 - val_loss: 0.7622\n","Epoch 6/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 278ms/step - loss: 0.5368\n","Epoch 6: val_loss did not improve from 0.60482\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 315ms/step - loss: 0.5374 - val_loss: 0.6681\n","Epoch 7/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 363ms/step - loss: 0.4967\n","Epoch 7: val_loss improved from 0.60482 to 0.47116, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 471ms/step - loss: 0.4970 - val_loss: 0.4712\n","Epoch 8/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 337ms/step - loss: 0.5069\n","Epoch 8: val_loss did not improve from 0.47116\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 418ms/step - loss: 0.5073 - val_loss: 0.7648\n","Epoch 9/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 276ms/step - loss: 0.4829\n","Epoch 9: val_loss did not improve from 0.47116\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 312ms/step - loss: 0.4836 - val_loss: 0.6285\n","Epoch 10/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 303ms/step - loss: 0.4318\n","Epoch 10: val_loss did not improve from 0.47116\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 336ms/step - loss: 0.4311 - val_loss: 0.8837\n","Epoch 11/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 354ms/step - loss: 0.4911\n","Epoch 11: val_loss did not improve from 0.47116\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 399ms/step - loss: 0.4886 - val_loss: 0.6344\n","Epoch 12/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 280ms/step - loss: 0.3856\n","Epoch 12: val_loss did not improve from 0.47116\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 313ms/step - loss: 0.3877 - val_loss: 0.5326\n","Epoch 13/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 302ms/step - loss: 0.3964\n","Epoch 13: val_loss did not improve from 0.47116\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 336ms/step - loss: 0.3951 - val_loss: 0.4892\n","Epoch 14/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 361ms/step - loss: 0.4051\n","Epoch 14: val_loss did not improve from 0.47116\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 397ms/step - loss: 0.4023 - val_loss: 0.6532\n","Epoch 15/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 275ms/step - loss: 0.2987\n","Epoch 15: val_loss did not improve from 0.47116\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 312ms/step - loss: 0.3020 - val_loss: 0.6797\n","Epoch 16/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 283ms/step - loss: 0.3966\n","Epoch 16: val_loss did not improve from 0.47116\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 318ms/step - loss: 0.3975 - val_loss: 0.6673\n","Epoch 17/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 383ms/step - loss: 0.2632\n","Epoch 17: val_loss did not improve from 0.47116\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 417ms/step - loss: 0.2647 - val_loss: 0.6325\n","Epoch 18/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 274ms/step - loss: 0.2924\n","Epoch 18: val_loss did not improve from 0.47116\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 321ms/step - loss: 0.2952 - val_loss: 1.4916\n","Epoch 19/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 276ms/step - loss: 0.4145\n","Epoch 19: val_loss improved from 0.47116 to 0.41989, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 383ms/step - loss: 0.4110 - val_loss: 0.4199\n","Epoch 20/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 359ms/step - loss: 0.3519\n","Epoch 20: val_loss did not improve from 0.41989\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 394ms/step - loss: 0.3533 - val_loss: 0.4737\n","Epoch 21/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 292ms/step - loss: 0.2951\n","Epoch 21: val_loss did not improve from 0.41989\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 334ms/step - loss: 0.2944 - val_loss: 0.7261\n","Epoch 22/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 300ms/step - loss: 0.2570\n","Epoch 22: val_loss did not improve from 0.41989\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 380ms/step - loss: 0.2562 - val_loss: 0.5127\n","Epoch 23/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 381ms/step - loss: 0.2624\n","Epoch 23: val_loss did not improve from 0.41989\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 421ms/step - loss: 0.2629 - val_loss: 0.4886\n","Epoch 24/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 276ms/step - loss: 0.1940\n","Epoch 24: val_loss did not improve from 0.41989\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 314ms/step - loss: 0.1953 - val_loss: 0.9277\n","Epoch 25/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 273ms/step - loss: 0.3054\n","Epoch 25: val_loss improved from 0.41989 to 0.36432, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 399ms/step - loss: 0.3049 - val_loss: 0.3643\n","Epoch 26/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 378ms/step - loss: 0.1546\n","Epoch 26: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 415ms/step - loss: 0.1555 - val_loss: 0.4466\n","Epoch 27/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 281ms/step - loss: 0.1909\n","Epoch 27: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 314ms/step - loss: 0.1919 - val_loss: 0.5201\n","Epoch 28/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 273ms/step - loss: 0.1609\n","Epoch 28: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 309ms/step - loss: 0.1606 - val_loss: 0.4466\n","Epoch 29/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 322ms/step - loss: 0.1678\n","Epoch 29: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 354ms/step - loss: 0.1678 - val_loss: 0.8562\n","Epoch 30/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 318ms/step - loss: 0.1894\n","Epoch 30: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 398ms/step - loss: 0.1902 - val_loss: 0.8547\n","Epoch 31/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 274ms/step - loss: 0.2227\n","Epoch 31: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 305ms/step - loss: 0.2236 - val_loss: 0.4742\n","Epoch 32/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 319ms/step - loss: 0.1714\n","Epoch 32: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 354ms/step - loss: 0.1702 - val_loss: 0.4151\n","Epoch 33/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 324ms/step - loss: 0.1189\n","Epoch 33: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 406ms/step - loss: 0.1196 - val_loss: 0.4491\n","Epoch 34/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 279ms/step - loss: 0.1448\n","Epoch 34: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 314ms/step - loss: 0.1444 - val_loss: 0.7391\n","Epoch 35/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 274ms/step - loss: 0.1353\n","Epoch 35: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 309ms/step - loss: 0.1374 - val_loss: 0.4026\n","Epoch 36/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 378ms/step - loss: 0.1611\n","Epoch 36: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 418ms/step - loss: 0.1600 - val_loss: 0.5881\n","Epoch 37/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 274ms/step - loss: 0.1078\n","Epoch 37: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 318ms/step - loss: 0.1088 - val_loss: 0.5351\n","Epoch 38/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 270ms/step - loss: 0.1186\n","Epoch 38: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 310ms/step - loss: 0.1197 - val_loss: 0.5609\n","Epoch 39/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 365ms/step - loss: 0.1200\n","Epoch 39: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 402ms/step - loss: 0.1194 - val_loss: 0.6096\n","Epoch 40/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 287ms/step - loss: 0.0759\n","Epoch 40: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 367ms/step - loss: 0.0768 - val_loss: 0.6480\n","Epoch 41/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 273ms/step - loss: 0.0768\n","Epoch 41: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 308ms/step - loss: 0.0780 - val_loss: 0.4633\n","Epoch 42/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 280ms/step - loss: 0.0689\n","Epoch 42: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 317ms/step - loss: 0.0699 - val_loss: 0.4621\n","Epoch 43/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 386ms/step - loss: 0.1538\n","Epoch 43: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 421ms/step - loss: 0.1535 - val_loss: 0.4652\n","Epoch 44/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 273ms/step - loss: 0.1148\n","Epoch 44: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 318ms/step - loss: 0.1146 - val_loss: 0.9423\n","Epoch 45/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 279ms/step - loss: 0.0872\n","Epoch 45: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 315ms/step - loss: 0.0864 - val_loss: 0.6200\n","Epoch 46/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 315ms/step - loss: 0.0840\n","Epoch 46: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 352ms/step - loss: 0.0828 - val_loss: 0.6400\n","Epoch 47/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 335ms/step - loss: 0.0509\n","Epoch 47: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 382ms/step - loss: 0.0515 - val_loss: 0.6411\n","Epoch 48/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 279ms/step - loss: 0.0923\n","Epoch 48: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 315ms/step - loss: 0.0918 - val_loss: 0.5196\n","Epoch 49/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 275ms/step - loss: 0.0431\n","Epoch 49: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 310ms/step - loss: 0.0435 - val_loss: 0.5739\n","Epoch 50/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 436ms/step - loss: 0.0994\n","Epoch 50: val_loss did not improve from 0.36432\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 471ms/step - loss: 0.0981 - val_loss: 0.6681\n"]}],"source":["input_tensor = Input(shape=(299, 299, 3))\n","base_model = InceptionV3(input_tensor=input_tensor, weights='imagenet', include_top=False, pooling='avg')\n","\n","x = base_model.output\n","x = Dense(2048, activation='relu')(x)\n","predictions = Dense(1, activation='sigmoid')(x)\n","model = Model(inputs=base_model.input, outputs=predictions)\n","\n","for layer in base_model.layers:\n","    layer.trainable = False\n","\n","model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy')\n","\n","checkpoint = ModelCheckpoint('best_model_warmup.keras', monitor='val_loss', save_best_only=True, mode='min', verbose=1)\n","early_stop = EarlyStopping(monitor='val_loss', patience=25, restore_best_weights=True, mode='min')\n","\n","print(\"Inicio de Warm-Up Training...\\n\")\n","warmup_history = model.fit(\n","    train_data,\n","    validation_data=valid_data,\n","    epochs=50,\n","    callbacks=[checkpoint, early_stop],\n","    class_weight=class_weights\n",")\n"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kEOK8le1nAVq","outputId":"5445e7d0-69d3-4763-bc21-8fbb0a88ddb9","executionInfo":{"status":"ok","timestamp":1732048419120,"user_tz":300,"elapsed":1003607,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Inicio de Fine-Tuning Training...\n","\n","Epoch 1/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3s/step - loss: 2.0531\n","Epoch 1: val_loss improved from inf to 0.41175, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m155s\u001b[0m 4s/step - loss: 2.0539 - val_loss: 0.4118\n","Epoch 2/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 469ms/step - loss: 2.2214\n","Epoch 2: val_loss improved from 0.41175 to 0.40372, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 628ms/step - loss: 2.2129 - val_loss: 0.4037\n","Epoch 3/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 388ms/step - loss: 1.5424\n","Epoch 3: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 469ms/step - loss: 1.5654 - val_loss: 0.4089\n","Epoch 4/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 431ms/step - loss: 2.3277\n","Epoch 4: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 464ms/step - loss: 2.3036 - val_loss: 0.4183\n","Epoch 5/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 482ms/step - loss: 1.8693\n","Epoch 5: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 516ms/step - loss: 1.8669 - val_loss: 0.4338\n","Epoch 6/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 415ms/step - loss: 1.8035\n","Epoch 6: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 459ms/step - loss: 1.7958 - val_loss: 0.4975\n","Epoch 7/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 378ms/step - loss: 1.7365\n","Epoch 7: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 411ms/step - loss: 1.7375 - val_loss: 0.5823\n","Epoch 8/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 434ms/step - loss: 1.6516\n","Epoch 8: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 469ms/step - loss: 1.6494 - val_loss: 0.6477\n","Epoch 9/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 418ms/step - loss: 1.6877\n","Epoch 9: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 453ms/step - loss: 1.6820 - val_loss: 0.6742\n","Epoch 10/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 374ms/step - loss: 1.6226\n","Epoch 10: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 408ms/step - loss: 1.6203 - val_loss: 0.6597\n","Epoch 11/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 451ms/step - loss: 1.6596\n","Epoch 11: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 484ms/step - loss: 1.6549 - val_loss: 0.6403\n","Epoch 12/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 383ms/step - loss: 1.3562\n","Epoch 12: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 417ms/step - loss: 1.3647 - val_loss: 0.6197\n","Epoch 13/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 454ms/step - loss: 1.5388\n","Epoch 13: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 488ms/step - loss: 1.5270 - val_loss: 0.6047\n","Epoch 14/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 378ms/step - loss: 1.4243\n","Epoch 14: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 408ms/step - loss: 1.4149 - val_loss: 0.5707\n","Epoch 15/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 471ms/step - loss: 1.2524\n","Epoch 15: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 503ms/step - loss: 1.2603 - val_loss: 0.5031\n","Epoch 16/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 377ms/step - loss: 1.3815\n","Epoch 16: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 417ms/step - loss: 1.3736 - val_loss: 0.4754\n","Epoch 17/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 378ms/step - loss: 1.2707\n","Epoch 17: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 411ms/step - loss: 1.2682 - val_loss: 0.4791\n","Epoch 18/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 480ms/step - loss: 1.3782\n","Epoch 18: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 511ms/step - loss: 1.3701 - val_loss: 0.4968\n","Epoch 19/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 426ms/step - loss: 1.0267\n","Epoch 19: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 458ms/step - loss: 1.0350 - val_loss: 0.5125\n","Epoch 20/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 379ms/step - loss: 0.8987\n","Epoch 20: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 411ms/step - loss: 0.9129 - val_loss: 0.5248\n","Epoch 21/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 476ms/step - loss: 0.9465\n","Epoch 21: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 511ms/step - loss: 0.9544 - val_loss: 0.5490\n","Epoch 22/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 383ms/step - loss: 1.0664\n","Epoch 22: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 423ms/step - loss: 1.0685 - val_loss: 0.5690\n","Epoch 23/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 387ms/step - loss: 0.9760\n","Epoch 23: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 419ms/step - loss: 0.9759 - val_loss: 0.5702\n","Epoch 24/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 436ms/step - loss: 0.7523\n","Epoch 24: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 469ms/step - loss: 0.7624 - val_loss: 0.5797\n","Epoch 25/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 481ms/step - loss: 0.9748\n","Epoch 25: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 513ms/step - loss: 0.9714 - val_loss: 0.5804\n","Epoch 26/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 447ms/step - loss: 0.9105\n","Epoch 26: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 479ms/step - loss: 0.9061 - val_loss: 0.5719\n","Epoch 27/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 378ms/step - loss: 0.6984\n","Epoch 27: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 459ms/step - loss: 0.7068 - val_loss: 0.5641\n","Epoch 28/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 392ms/step - loss: 0.8241\n","Epoch 28: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 426ms/step - loss: 0.8268 - val_loss: 0.5561\n","Epoch 29/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 423ms/step - loss: 0.9365\n","Epoch 29: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 467ms/step - loss: 0.9336 - val_loss: 0.5520\n","Epoch 30/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 378ms/step - loss: 0.8314\n","Epoch 30: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 411ms/step - loss: 0.8315 - val_loss: 0.5446\n","Epoch 31/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 456ms/step - loss: 0.7888\n","Epoch 31: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 488ms/step - loss: 0.7882 - val_loss: 0.5493\n","Epoch 32/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 469ms/step - loss: 0.7049\n","Epoch 32: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 503ms/step - loss: 0.7077 - val_loss: 0.5631\n","Epoch 33/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 371ms/step - loss: 0.7054\n","Epoch 33: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 404ms/step - loss: 0.7032 - val_loss: 0.5696\n","Epoch 34/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 483ms/step - loss: 0.7516\n","Epoch 34: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 512ms/step - loss: 0.7491 - val_loss: 0.5814\n","Epoch 35/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 386ms/step - loss: 0.6722\n","Epoch 35: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 426ms/step - loss: 0.6695 - val_loss: 0.5836\n","Epoch 36/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 378ms/step - loss: 0.7143\n","Epoch 36: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 411ms/step - loss: 0.7072 - val_loss: 0.5907\n","Epoch 37/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 381ms/step - loss: 0.4605\n","Epoch 37: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 413ms/step - loss: 0.4685 - val_loss: 0.5945\n","Epoch 38/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 479ms/step - loss: 0.6377\n","Epoch 38: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 510ms/step - loss: 0.6311 - val_loss: 0.5982\n","Epoch 39/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 409ms/step - loss: 0.4463\n","Epoch 39: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 450ms/step - loss: 0.4493 - val_loss: 0.6067\n","Epoch 40/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 382ms/step - loss: 0.6358\n","Epoch 40: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 421ms/step - loss: 0.6390 - val_loss: 0.6121\n","Epoch 41/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 382ms/step - loss: 0.6082\n","Epoch 41: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 416ms/step - loss: 0.6075 - val_loss: 0.6162\n","Epoch 42/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 420ms/step - loss: 0.5800\n","Epoch 42: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 451ms/step - loss: 0.5795 - val_loss: 0.6173\n","Epoch 43/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 472ms/step - loss: 0.7427\n","Epoch 43: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 505ms/step - loss: 0.7333 - val_loss: 0.6235\n","Epoch 44/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 388ms/step - loss: 0.5704\n","Epoch 44: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 428ms/step - loss: 0.5688 - val_loss: 0.6296\n","Epoch 45/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 440ms/step - loss: 0.6880\n","Epoch 45: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 474ms/step - loss: 0.6808 - val_loss: 0.6304\n","Epoch 46/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 505ms/step - loss: 0.5444\n","Epoch 46: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 540ms/step - loss: 0.5405 - val_loss: 0.6370\n","Epoch 47/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 416ms/step - loss: 0.4827\n","Epoch 47: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 458ms/step - loss: 0.4859 - val_loss: 0.6425\n","Epoch 48/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 393ms/step - loss: 0.7534\n","Epoch 48: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 425ms/step - loss: 0.7427 - val_loss: 0.6401\n","Epoch 49/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 436ms/step - loss: 0.5695\n","Epoch 49: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 470ms/step - loss: 0.5675 - val_loss: 0.6396\n","Epoch 50/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 384ms/step - loss: 0.5093\n","Epoch 50: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 415ms/step - loss: 0.5086 - val_loss: 0.6372\n","Epoch 51/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 469ms/step - loss: 0.4017\n","Epoch 51: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 503ms/step - loss: 0.4042 - val_loss: 0.6368\n","Epoch 52/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 405ms/step - loss: 0.3609\n","Epoch 52: val_loss did not improve from 0.40372\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 448ms/step - loss: 0.3621 - val_loss: 0.6376\n"]}],"source":["from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n","\n","model.load_weights(\"best_model_warmup.keras\")\n","\n","for layer in base_model.layers:\n","    layer.trainable = True\n","\n","model.compile(optimizer=Adam(learning_rate=0.000001), loss='binary_crossentropy')\n","\n","checkpoint_finetune_path = \"best_model_finetune.keras\"\n","checkpoint_finetune = ModelCheckpoint(\n","    checkpoint_finetune_path,\n","    save_best_only=True,\n","    monitor=\"val_loss\",\n","    mode='min',\n","    verbose=1\n",")\n","early_stopping = EarlyStopping(\n","    monitor='val_loss',\n","    patience=50,\n","    restore_best_weights=True,\n","    mode='min'\n",")\n","\n","print(\"Inicio de Fine-Tuning Training...\\n\")\n","history_finetune = model.fit(\n","    train_data,\n","    validation_data=valid_data,\n","    epochs=200,\n","    callbacks=[checkpoint_finetune, early_stopping],\n","    class_weight=class_weights\n",")"]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.metrics import precision_score, recall_score, f1_score, classification_report, roc_auc_score\n","import matplotlib.pyplot as plt\n","\n","predictions_test = model.predict(test_data)\n","y_test = test_data.classes\n","\n","thresholds = np.arange(0.1, 1.0, 0.1)\n","best_threshold = 0.5\n","best_f1 = 0\n","\n","for threshold in thresholds:\n","    predicted_classes_test = (predictions_test >= threshold).astype(int)\n","    f1 = f1_score(y_test, predicted_classes_test)\n","    precision = precision_score(y_test, predicted_classes_test)\n","    recall = recall_score(y_test, predicted_classes_test)\n","\n","    print(f'Threshold: {threshold:.2f}')\n","    print(f'Precision: {precision:.4f}, Recall: {recall:.4f}, F1 Score: {f1:.4f}\\n')\n","\n","    if f1 > best_f1:\n","        best_f1 = f1\n","        best_threshold = threshold\n","\n","print(f'Mejor threshold: {best_threshold} con F1 Score: {best_f1}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XhX2CAMpnaXT","executionInfo":{"status":"ok","timestamp":1732048473605,"user_tz":300,"elapsed":14136,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"01d5b799-b1b1-4bc2-8906-26a042a5513d"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 4s/step\n","Threshold: 0.10\n","Precision: 0.2549, Recall: 0.7647, F1 Score: 0.3824\n","\n","Threshold: 0.20\n","Precision: 0.2703, Recall: 0.5882, F1 Score: 0.3704\n","\n","Threshold: 0.30\n","Precision: 0.2800, Recall: 0.4118, F1 Score: 0.3333\n","\n","Threshold: 0.40\n","Precision: 0.2381, Recall: 0.2941, F1 Score: 0.2632\n","\n","Threshold: 0.50\n","Precision: 0.2500, Recall: 0.2353, F1 Score: 0.2424\n","\n","Threshold: 0.60\n","Precision: 0.3077, Recall: 0.2353, F1 Score: 0.2667\n","\n","Threshold: 0.70\n","Precision: 0.3333, Recall: 0.2353, F1 Score: 0.2759\n","\n","Threshold: 0.80\n","Precision: 0.3333, Recall: 0.1176, F1 Score: 0.1739\n","\n","Threshold: 0.90\n","Precision: 0.3333, Recall: 0.0588, F1 Score: 0.1000\n","\n","Mejor threshold: 0.1 con F1 Score: 0.38235294117647056\n"]}]},{"cell_type":"code","source":["precisions = []\n","recalls = []\n","f1_scores = []\n","\n","for threshold in thresholds:\n","    predicted_classes_test = (predictions_test >= threshold).astype(int)\n","    precisions.append(precision_score(y_test, predicted_classes_test))\n","    recalls.append(recall_score(y_test, predicted_classes_test))\n","    f1_scores.append(f1_score(y_test, predicted_classes_test))\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(thresholds, precisions, label='Precision')\n","plt.plot(thresholds, recalls, label='Recall')\n","plt.plot(thresholds, f1_scores, label='F1 Score')\n","plt.xlabel('Threshold')\n","plt.ylabel('Metric Value')\n","plt.title('Metrics vs. Threshold')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"0IcI0XvNnaQj","executionInfo":{"status":"ok","timestamp":1732048477076,"user_tz":300,"elapsed":1102,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"199ad0d7-41e5-4d26-ec12-1d5b211d0cc8"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA04AAAIjCAYAAAA0vUuxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAACqbklEQVR4nOzdd3xT9f7H8VeSpntCF5RS9t5DRBAcLFFERaYgQ9Crol6596o4UFxc/Yl6VRRlCIIIglsRRGTvIQjIXi2jLaubtmmT3x+BSG2BFpqetryfj0ceTU9Ocj75Fmve/X7P55gcDocDERERERERuSiz0QWIiIiIiIiUdgpOIiIiIiIil6HgJCIiIiIichkKTiIiIiIiIpeh4CQiIiIiInIZCk4iIiIiIiKXoeAkIiIiIiJyGQpOIiIiIiIil6HgJCIiIiIichkKTiIiUmTTpk3DZDJx6NAho0sx3Pmx2Lhxo9GlAO6pZ8iQIVSrVu2y+x06dAiTycS0adOK7dgiIqWFgpOISCl2/kOwyWRi5cqV+R53OBxER0djMpm44447rugYH374oT7oXuD8h//C3BQcRUSuHR5GFyAiIpfn7e3NrFmzaN++fZ7ty5Yt48iRI3h5eV3xa3/44YeEhoYyZMiQQj9n0KBB9OvX76qOW1qFhYUxY8aMPNvGjx/PkSNHeOedd/LtKyIi1wYFJxGRMqB79+7MnTuX9957Dw+Pv351z5o1i5YtW3Ly5MkSqSM9PR0/Pz8sFgsWi6VEjlnS/Pz8GDhwYJ5ts2fP5syZM/m2Xy2Hw0FmZiY+Pj7F+roiIlL8tFRPRKQM6N+/P6dOnWLRokWubdnZ2cybN48BAwYU+By73c67775Lw4YN8fb2JiIigoceeogzZ8649qlWrRo7duxg2bJlruVnN910E/DXMsFly5bxyCOPEB4eTpUqVfI89velaj///DMdO3YkICCAwMBAWrduzaxZs1yP7927l169ehEZGYm3tzdVqlShX79+JCcnX/S9jxw5En9/fzIyMgocl8jISHJzcwHYuHEjXbt2JTQ0FB8fH6pXr86wYcMuPbjFJCsri1GjRhEWFoafnx933303J06cyLNPtWrVuOOOO1i4cCGtWrXCx8eHjz/+GICkpCT++c9/Eh0djZeXF7Vq1eKNN97AbrfneY3Zs2fTsmVL1xg3btyY//3vf1dUDzhnHBs2bIiXlxeVK1fm0UcfJSkp6bLvNykpiSFDhhAUFERwcDCDBw8u1PNERMoqzTiJiJQB1apVo23btnzxxRfcdtttgDOkJCcn069fP9577718z3nooYeYNm0aQ4cO5fHHH+fgwYN88MEH/P7776xatQqr1cq7777LY489hr+/P8899xwAEREReV7nkUceISwsjDFjxpCenn7RGqdNm8awYcNo2LAho0ePJjg4mN9//50FCxYwYMAAsrOz6dq1K1lZWTz22GNERkZy9OhRfvzxR5KSkggKCirwdfv27cuECRP46aef6N27t2t7RkYGP/zwA0OGDMFisZCYmEiXLl0ICwvjmWeeITg4mEOHDvH1118XebyvxGOPPUZISAgvvvgihw4d4t1332XkyJHMmTMnz367d++mf//+PPTQQ4wYMYK6deuSkZFBx44dOXr0KA899BBVq1Zl9erVjB49muPHj/Puu+8CsGjRIvr378+tt97KG2+8AcDOnTtZtWoVTzzxRJHreemllxg7diydOnXi4YcfZvfu3Xz00Uds2LDB9W+kIA6Hg549e7Jy5Ur+8Y9/UL9+fb755hsGDx5cjCMqIlLKOEREpNT69NNPHYBjw4YNjg8++MAREBDgyMjIcDgcDkfv3r0dN998s8PhcDhiYmIct99+u+t5K1ascACOzz//PM/rLViwIN/2hg0bOjp27HjRY7dv396Rk5NT4GMHDx50OBwOR1JSkiMgIMDRpk0bx9mzZ/Psa7fbHQ6Hw/H77787AMfcuXOLNAZ2u90RFRXl6NWrV57tX375pQNwLF++3OFwOBzffPONa6yK2+233+6IiYkp8LHzY9GpUyfXe3U4HI4nn3zSYbFYHElJSa5tMTExDsCxYMGCPK/xyiuvOPz8/Bx79uzJs/2ZZ55xWCwWR2xsrMPhcDieeOIJR2BgYL6fx5XUk5iY6PD09HR06dLFkZub69rvgw8+cACOqVOnurYNHjw4z/v/9ttvHYDjzTffdG3Lyclx3HjjjQ7A8emnn160PhGRskpL9UREyog+ffpw9uxZfvzxR1JTU/nxxx8vukxv7ty5BAUF0blzZ06ePOm6tWzZEn9/f5YsWVLo444YMeKy5zMtWrSI1NRUnnnmGby9vfM8ZjKZAFwzSgsXLixw2d3FmEwmevfuzfz580lLS3NtnzNnDlFRUa6GGcHBwQD8+OOP2Gy2Qr9+cXnwwQdd7xXgxhtvJDc3l8OHD+fZr3r16nTt2jXPtrlz53LjjTcSEhKS5+fVqVMncnNzWb58OeB8j+np6XmWbF5pPb/++ivZ2dn885//xGz+6+PAiBEjCAwM5Keffrroa8+fPx8PDw8efvhh1zaLxcJjjz122bpERMoqBScRkTIiLCyMTp06MWvWLL7++mtyc3O59957C9x37969JCcnEx4eTlhYWJ5bWloaiYmJhT5u9erVL7vP/v37AWjUqNElX2fUqFFMnjyZ0NBQunbtyoQJEy55ftN5ffv25ezZs3z//fcApKWlMX/+fHr37u0KBx07dqRXr16MHTuW0NBQevbsyaeffkpWVlZh3uZVq1q1ap7vQ0JCAPKcUwYFj+fevXtZsGBBvp9Vp06dAFw/r0ceeYQ6depw2223UaVKFYYNG8aCBQuuqJ7zAapu3bp59vP09KRGjRr5At+FDh8+TKVKlfD398+z/e+vJSJSnugcJxGRMmTAgAGMGDGC+Ph4brvtNtcsy9/Z7XbCw8P5/PPPC3y8KG20i7Pj2/jx4xkyZAjfffcdv/zyC48//jjjxo1j7dq1rsYTBbn++uupVq0aX375JQMGDOCHH37g7Nmz9O3b17WPyWRi3rx5rF27lh9++IGFCxcybNgwxo8fz9q1a/N9yC9uF5uVczgceb4vaDztdjudO3fmqaeeKvA16tSpA0B4eDhbtmxh4cKF/Pzzz/z88898+umn3H///UyfPv2K6hERkcJRcBIRKUPuvvtuHnroIdauXZuv6cCFatasya+//kq7du0uG3wuXM51pWrWrAnA9u3bqVWr1iX3bdy4MY0bN+b5559n9erVtGvXjokTJ/Lqq69e8nl9+vThf//7HykpKcyZM4dq1apx/fXX59vv+uuv5/rrr+e1115j1qxZ3HfffcyePZvhw4df+Rt0s5o1a5KWluaaYboUT09PevToQY8ePbDb7TzyyCN8/PHHvPDCC5cd+wvFxMQAzmYVNWrUcG3Pzs7m4MGDl6wlJiaGxYsXk5aWlieQ7t69u9DHFxEpa7RUT0SkDPH39+ejjz7ipZdeokePHhfdr0+fPuTm5vLKK6/keywnJydP22g/P7+rbiPdpUsXAgICGDduHJmZmXkeOz/DkZKSQk5OTp7HGjdujNlsLtRyur59+5KVlcX06dNZsGABffr0yfP4mTNn8s2mNGvWDCDP6+/fv9+1tLC06NOnD2vWrGHhwoX5HktKSnKN26lTp/I8ZjabadKkCUCRlyR26tQJT09P3nvvvTzjNmXKFJKTk7n99tsv+tzu3buTk5PDRx995NqWm5vL+++/X6QaRETKEs04iYiUMYVp+dyxY0ceeughxo0bx5YtW+jSpQtWq5W9e/cyd+5c/ve//7nOj2rZsiUfffQRr776KrVq1SI8PJxbbrmlSDUFBgbyzjvvMHz4cFq3bs2AAQMICQlh69atZGRkMH36dH777TdGjhxJ7969qVOnDjk5OcyYMQOLxUKvXr0ue4wWLVpQq1YtnnvuObKysvIs0wOYPn06H374IXfffTc1a9YkNTWVSZMmERgYSPfu3V373XrrrQD5rkFlpP/85z98//333HHHHQwZMoSWLVuSnp7Otm3bmDdvHocOHSI0NJThw4dz+vRpbrnlFqpUqcLhw4d5//33adasGfXr1y/SMcPCwhg9ejRjx46lW7du3HnnnezevZsPP/yQ1q1bX/Jivz169KBdu3Y888wzHDp0iAYNGvD1118X6nw1EZGySsFJRKScmjhxIi1btuTjjz/m2WefxcPDg2rVqjFw4EDatWvn2m/MmDEcPnyYN998k9TUVDp27Fjk4ATwwAMPEB4ezn//+19eeeUVrFYr9erV48knnwSgadOmdO3alR9++IGjR4/i6+tL06ZN+fnnnwtccleQvn378tprr1GrVi1atGiR57GOHTuyfv16Zs+eTUJCAkFBQVx33XV8/vnnhWpwYSRfX1+WLVvG66+/zty5c/nss88IDAykTp06jB071tWRcODAgXzyySd8+OGHJCUlERkZSd++fXnppZfydMYrrJdeeomwsDA++OADnnzySSpUqMCDDz7I66+/ftFrOIFzpuv777/nn//8JzNnzsRkMnHnnXcyfvx4mjdvfsXjICJSmpkcOktURERERETkknSOk4iIiIiIyGUoOImIiIiIiFyGgpOIiIiIiMhlGB6cJkyYQLVq1fD29qZNmzasX7/+kvu/++671K1bFx8fH6Kjo3nyySfztb4VEREREREpToYGpzlz5jBq1ChefPFFNm/e7Oq4lJiYWOD+s2bN4plnnuHFF19k586dTJkyhTlz5vDss8+WcOUiIiIiInItMbSrXps2bWjdujUffPABAHa7nejoaB577DGeeeaZfPuPHDmSnTt3snjxYte2f/3rX6xbt46VK1eWWN0iIiIiInJtMew6TtnZ2WzatInRo0e7tpnNZjp16sSaNWsKfM4NN9zAzJkzWb9+Pddddx0HDhxg/vz5DBo06KLHycrKynM1dbvdzunTp6lYsSImk6n43pCIiIiIiJQpDoeD1NRUKleufNnr4RkWnE6ePElubi4RERF5tkdERLBr164CnzNgwABOnjxJ+/btcTgc5OTk8I9//OOSS/XGjRvH2LFji7V2EREREREpP+Li4qhSpcol9zEsOF2JpUuX8vrrr/Phhx/Spk0b9u3bxxNPPMErr7zCCy+8UOBzRo8ezahRo1zfJycnU7VqVQ4ePEhAQEBJlX5RNpuNJUuWcPPNN1/yKu1yZTS+7qXxdS+Nr3tpfN1L4+teGl/30vi6V2ka39TUVKpXr16oXGBYcAoNDcVisZCQkJBne0JCApGRkQU+54UXXmDQoEEMHz4cgMaNG5Oens6DDz7Ic889V+D0mpeXF15eXvm2V6hQgcDAwGJ4J1fHZrPh6+tLxYoVDf+HUx5pfN1L4+teGl/30vi6l8bXvTS+7qXxda/SNL7nj1+YU3gM66rn6elJy5Yt8zR6sNvtLF68mLZt2xb4nIyMjHzhyGKxAM71iSIiIiIiIu5g6FK9UaNGMXjwYFq1asV1113Hu+++S3p6OkOHDgXg/vvvJyoqinHjxgHQo0cP3n77bZo3b+5aqvfCCy/Qo0cPV4ASEREREREpboYGp759+3LixAnGjBlDfHw8zZo1Y8GCBa6GEbGxsXlmmJ5//nlMJhPPP/88R48eJSwsjB49evDaa68Z9RZEREREROQaYHhziJEjRzJy5MgCH1u6dGme7z08PHjxxRd58cUXS6AyEREREZG/nO/qnJuba3QpZZrNZsPDw4PMzMwSGUur1Vosq9MMD04iIiIiIqVddnY2x48fJyMjw+hSyjyHw0FkZCRxcXElcl1Vk8lElSpV8Pf3v6rXUXASEREREbkEu93OwYMHsVgsVK5cGU9PzxL5wF9e2e120tLS8Pf3v+xFZ6+Ww+HgxIkTHDlyhNq1a1/VzJOCk4iIiIjIJWRnZ2O324mOjsbX19focso8u91OdnY23t7ebg9OAGFhYRw6dAibzXZVwcmwduQiIiIiImVJSXzIl+JXXLOD+umLiIiIiIhchoKTiIiIiIjIZSg4iYiIiIhIsTGZTHz77bfFvq/RFJxERERERMqpIUOGYDKZMJlMeHp6UqtWLV5++WVycnLcdszjx49z2223Ffu+RlNXPRERERGRcqxbt258+umnZGVlMX/+fB599FGsViujR4/Os192djaenp5XfbzIyEi37Gs0zTiJiIiIiBSRw+EgIzvHkJvD4ShSrV5eXkRGRhITE8PDDz9Mp06d+P777xkyZAh33XUXr732GpUrV6Zu3boAxMXF0adPH4KDg6lQoQI9e/bk0KFDeV5z6tSpNGzYEC8vLypVqsTIkSNdj124/C47O5uRI0dSqVIlvL29iYmJ4b///W+B+wJs27aNW265BR8fHypWrMiDDz5IWlqa6/HzNb/11ltUqlSJihUr8uijj2Kz2Yo0JldCM04iIiIiIkV01pZLgzELDTn2ny93xdfzyj/G+/j4cOrUKQAWL15MYGAgixYtAsBms9G1a1fatm3LihUr8PDw4NVXX6Vbt2788ccfeHp68tFHHzFq1Cj++9//ctttt5GcnMyqVasKPNZ7773H999/z5dffknVqlWJi4vj8OHDBe6bnp7uOvaGDRtITExk+PDhjBw5kmnTprn2W7JkCZUqVWLJkiXs27ePvn370qxZM0aMGHHFY1IYCk4iIiIiItcAh8PB4sWLWbhwIY899hgnTpzAz8+PyZMnu5bozZw5E7vdzuTJk13XP/r0008JDg5m6dKldOnShVdffZV//etfPPHEE67Xbt26dYHHjI2NpXbt2rRv3x6TyURMTAw33HADKSkp+fadNWsWmZmZfPbZZ/j5+QHwwQcf0KNHD9544w0iIiIACAkJ4YMPPsBisVCvXj1uv/12Fi9erOBUrtkyMS9/C0tuHaMrEREREZEi8LFa+PPlroYduyh+/PFH/P39sdls2O12BgwYwEsvvcSjjz5K48aN85zXtHXrVvbt20dAQECe18jMzGT//v0kJiZy7Ngxbr311kIde8iQIXTu3Jm6devSrVs37rjjDjp16lTgvjt37qRp06au0ATQrl077HY7u3fvdgWnhg0bYrH8NQaVKlVi27ZthR6PK6XgZKSvHsCy60daBLcGR0+jqxERERGRQjKZTFe1XK4k3XzzzXz00Ud4enpSuXJlPDz+qvvCkAKQlpZGy5Yt+fzzz/O9TlhYGGZz0VoktGjRgoMHD/Lzzz/z66+/0qdPH2699VamTJlyZW8GsFqteb43mUzY7fYrfr3CUnMII7UdicPiSeWkDZiX/ffy+4uIiIiIFJGfnx+1atWiatWqeUJTQVq0aMHevXsJDw+nVq1aeW5BQUEEBARQrVo1Fi9eXOjjBwYG0rdvXyZNmsScOXP4+uuvOXPmTL796tevz9atW0lPT3dtW7VqFWaz2dW4wkgKTkaKaUtu93cAsKx6G7bOMbggEREREbmW3XfffYSGhtKzZ09WrFjBwYMHWbp0KY8//jhHjhwB4KWXXmL8+PG899577N27l82bN/P+++8X+Hpvv/02X3zxBbt27WLPnj3MnTuXyMhIgoKCCjy2t7c3gwcPZvv27SxZsoTHHnuMQYMGuZbpGUnByWCOJn3ZE3GH85vvR0LsOmMLEhEREZFrlq+vL8uXL6dq1arcc8891K9fnwceeIDMzEwCAwMBGDx4MO+++y4ffvghDRs25I477mDv3r0Fvl5AQABvvvkmrVq1onXr1hw6dIgff/yxwCV/vr6+LFy4kNOnT9O6dWvuvfdebr31Vj744AO3vufCKhsLM8u5nZXupVawA/Pun2D2AHhwCQRXNbosERERESnjLmzjXdjHIiMjmT59+iVf96GHHuKhhx4q8LELrzM1YsSIfN3u7Ha7q6ve369J1bhxY3777bci1fzuu+9estbiohmn0sBkJvfODyGyMWSchFl9ISvV6KpEREREROQcBafSwtMP+s8B/whI/BPmPQD2XKOrEhERERERFJxKl6Ao6P8FeHjD3oWwaIzRFYmIiIiICApOpU9US7jrI+f9NR/A5s+MrUdERERERBScSqVG98BNo533f3wSDq4wth4RERERkWucglNp1fFpaNQL7Dnw5SA4td/oikRERERErlkKTqWVyQQ9J0BUKzh7xtlp72yS0VWJiIiIiFyTFJxKM6sP9JsFgVXg1F6YOwRyc4yuSkRERETkmqPgVNoFRDg77Vn94MASWPC00RWJiIiIiFxzFJzKgkpNoNckwAQbJsP6SUZXJCIiIiJSKCaTiW+//RaAQ4cOYbFY2LZtm7FFXQEFp7Ki3u3Q6SXn/Z+fhn2LDS1HREREREq/IUOGYDKZMJlMWK1WqlevzlNPPUVmZqbRpZU5Ck5lSbsnoOkAcOQ6z3c6sdvoikRERESklOvWrRvHjx/nwIEDvPPOO3z88ce8+OKLRpdV5ig4lSUmE/R4F6reAFkpMKsPpJ8yuioRERGRa4/DAdnpxtwcjiKV6uXlRWRkJNHR0dx111106tSJRYsWAWC32xk3bhzVq1fHx8eHpk2bMm/evDzP37FjB3fccQeBgYEEBARw4403sn+/81I5GzZsoHPnzoSGhhIUFETHjh3ZvHlz8YxxKeNhdAFSRB5e0HcmTLoZzhxyXuNp0Lfg4Wl0ZSIiIiLXDlsGvF7ZmGM/eww8/a7oqdu3b2f16tXExMQAMG7cOGbOnMnEiROpXbs2y5cvZ+DAgYSFhdGxY0eOHj1Khw4duOmmm/jtt98IDAxk1apV5OQ4Oz2npqYyePBg3n//fRwOB+PHj6d79+7s3buXgICAYnvLpYGCU1nkVxEGfAlTOsPhVfDTk3DnB84ZKRERERGRC/z444/4+/uTk5NDVlYWZrOZDz74gKysLF5//XV+/fVX2rZtC0CNGjVYuXIlH3/8MR07dmTChAkEBQUxe/ZsrFYrAHXq1HG99i233JLnWJ988gnBwcEsW7aMO+64o+TeZAlQcCqrwuvBvZ/CrN7w+0wIrQvtHje6KhEREZFrg9XXOfNj1LGL4Oabb+ajjz4iPT2dd955Bw8PD3r16sWOHTvIyMigc+fOefbPzs6mefPmAGzZsoUbb7zRFZr+LiEhgeeff56lS5eSmJhIbm4uGRkZxMbGXtl7K8UUnMqy2p2g6zjntZ0WjYHQ2lD3NqOrEhERESn/TKYrXi5X0vz8/KhVqxYAU6dOpWnTpkyZMoVGjRoB8NNPPxEVFZXnOV5eXgD4+Phc8rUHDx7MqVOn+N///kdMTAxeXl60bduW7OxsN7wTYyk4lXVtHoKTu2HjVPhqOAxbCJGNjK5KREREREohs9nMs88+y6hRo9izZw9eXl7ExsbSsWPHAvdv0qQJ06dPx2azFTjrtGrVKj788EO6d+8OQFxcHCdPnnTrezCKuuqVdSYT3PYmVO8I2WnwRT9ISzS6KhEREREppXr37o3FYuHjjz/m3//+N08++STTp09n//79bN68mffff5/p06cDMHLkSFJSUujXrx8bN25k7969zJgxg927nZfFqV27NjNmzGDnzp2sW7eO++6777KzVGWVglN5YLFCn+lQsRYkx8HsAWDTRc1EREREJD8PDw9GjhzJm2++yejRo3nhhRcYN24c9evXp1u3bvz0009Ur14dgIoVK/Lbb7+RlpZGx44dadmyJZMmTXLNPk2ZMoUzZ87QokULBg0axOOPP054eLiRb89ttFSvvPAJcXbam3QLHNkA34+Eeyap056IiIjINWzatGkFbn/mmWd45plnAHjiiSd44oknLvoaTZo0YeHChQU+1rx5czZs2JBn27333pvne8cF152qVq0aubm5pKSkFKb8UkUzTuVJxZrQdwaYPWDbXFj+ltEViYiIiIiUCwpO5U31DtD9XGBa8irs+MbYekREREREygEFp/Ko1VC4/hHn/W8ehqObja1HRERERKSMU3Aqr7q8CrW7QM5ZZ7OIFIMu0CYiIiIiUg4oOJVXZgv0mgJh9SH1uLNNeXa60VWJiIiIiJRJCk7lmXcgDJgNvhXh+Fb45iGw242uSkRERESkzFFwKu9CqkG/WWDxhJ0/wJLXjK5IRERERKTMUXC6FlS9Hnq857y/4i3YOsfYekREREREyhgFp2tFs/7Q/knn/e9HQuw6Y+sRERERESlDSkVwmjBhAtWqVcPb25s2bdqwfv36i+570003YTKZ8t1uv/32Eqy4jLplDNS7A3KznZ32kmKNrkhEREREpEwwPDjNmTOHUaNG8eKLL7J582aaNm1K165dSUxMLHD/r7/+muPHj7tu27dvx2Kx0Lt37xKuvAwym+GeTyCyMWSchFl9ISvV6KpERERExE2GDBlS4KTDvn37AFi+fDk9evSgcuXKmEwmvv3228u+Zm5uLv/973+pV68ePj4+VKhQgTZt2jB58mQ3vxtjGR6c3n77bUaMGMHQoUNp0KABEydOxNfXl6lTpxa4f4UKFYiMjHTdFi1ahK+vr4JTYXn6Qf854B8BiX/CvAfAnmt0VSIiIiLiJt26dcsz8XD8+HGqV68OQHp6Ok2bNmXChAmFfr2xY8fyzjvv8Morr/Dnn3+yZMkSHnzwQZKSktz0DiA7O9ttr11YHkYePDs7m02bNjF69GjXNrPZTKdOnVizZk2hXmPKlCn069cPPz+/Ah/PysoiKyvL9X1KSgoANpsNm812FdUXj/M1lGgtvuGYes/AMuNOTHsXkrvwOeydXim545cgQ8b3GqLxdS+Nr3tpfN1L4+teGl/3+vv42mw2HA4Hdrsd+7lLuzgcDs7mnDWkPh8PH0wmU6H2dTgceHp6Eh4enu8xu91O165d6dq1a55t9stcvub777/n4YcfplevXq5tjRs3dj3//Nfx48czadIk4uLiiIiI4MEHH+TZZ5/F4XCwY8cOnn/+edauXYuvry/33HMP48ePx9/fH4ChQ4eSlJRE69at+fDDD/Hy8mL//v3ExcXx73//m0WLFmE2m2nfvj3vvvsu1apVu2i9drsdh8OBzWbDYrHkeawo/w0ZGpxOnjxJbm4uERERebZHRESwa9euyz5//fr1bN++nSlTplx0n3HjxjF27Nh823/55Rd8fX2LXrSbLFq0qMSPWbnKA7Q+NAHLuo/441gWsaE3lXgNJcWI8b2WaHzdS+PrXhpf99L4upfG173Oj6+HhweRkZGkpaW5Zj7O5pyly09dDKnrl9t/wcfDp1D72mw2cnJyXJMHl3P27NnL7hsaGsqiRYsYOHAgoaGhBe7z4osv8tlnn/H6669z/fXXEx8fz969e0lJSSE9PZ17772X1q1bs3jxYk6ePMnjjz/OP/7xDz788ENX3b/99hs+Pj589dVXAJw6dYquXbvSunVrfvrpJzw8PHjrrbfo1q0bK1euxNPTs8BasrOzOXv2LMuXLycnJyfPYxkZGYUaFzA4OF2tKVOm0LhxY6677rqL7jN69GhGjRrl+j4lJYXo6Gi6dOlCYGBgSZR5STabjUWLFtG5c2esVmsJH707uSv8sSx/g2ZHP6NxxztxxLQv4Rrcy9jxLf80vu6l8XUvja97aXzdS+PrXn8f38zMTOLi4vD398fb2xsAD5txH6MDAgLwtRZuAsBqtbJw4UKqVKni2tatWze+/PLLAvf38fG57Gfkd999lz59+lC3bl0aNmxI27ZtufPOO7ntttsASE1N5eOPP+a9995j+PDhAK4+BuDscZCZmcnMmTNdM0xms5mePXsyfvx4IiIisFqt+Pn5MW3aNFcgmjlzJgDTpk1zzbjNmDGDChUqsHnzZrp0KTjIZmZm4uPjQ4cOHVw/v/MKGyjB4OAUGhqKxWIhISEhz/aEhAQiIyMv+dz09HRmz57Nyy+/fMn9vLy88PLyyrfdarWWql80htVz82g4vQ/T9q/w+GooDF8MFWuWfB1uVtp+3uWNxte9NL7upfF1L42ve2l83ev8+Obm5mIymTCbzZjNzhYBfp5+rBtgzOVdirJUz2QycfPNN/PRRx+5tvn5+bnex99d+B4vplGjRmzfvp1NmzaxatUqli9fTs+ePRkyZAiTJ09m9+7dZGVl0blz5wJfa9euXTRq1Ah/f3/X4zfeeCN2u529e/dSqVIlTCYTjRs3zhN0tm3bxr59+wgKCsrzepmZmRw8ePCS78lkMhX430tR/vsxNDh5enrSsmVLFi9ezF133QU41yAuXryYkSNHXvK5c+fOJSsri4EDB5ZApeWYyQQ9J8CZw3B0o7PT3vBfwSfY6MpERERESi2TyVToWR+j+fn5UatWrWJ9TbPZTOvWrWndujX//Oc/mTlzJoMGDeK5557Dx6dwywgv5+89DNLS0mjZsiWff/55vn3DwsKK5ZiXYnhXvVGjRjFp0iSmT5/Ozp07efjhh0lPT2fo0KEA3H///XmaR5w3ZcoU7rrrLipWrFjSJZc/Vh/oNwsCq8CpvTB3COTmXPZpIiIiIiIADRo0AJyrwmrXro2Pjw+LFy8ucN969eqxfft20tPTXdtWrVqF2Wymbt26Fz1GixYt2Lt3L+Hh4dSqVSvP7e+zUO5geHDq27cvb731FmPGjKFZs2Zs2bKFBQsWuBpGxMbGcvz48TzP2b17NytXruSBBx4wouTyKSAC+n8BVj84sAQWPG10RSIiIiLiZmlpaWzZsoUtW7YAcPDgQbZs2UJsbOxFn3PvvffyzjvvsG7dOg4fPszSpUt59NFHqVOnDvXq1cPb25unn36ap556is8++4z9+/ezdu1aV0O3++67D29vb4YMGcL27dtZsmQJjz32GIMGDcrXNO5C9913H6GhofTs2ZMVK1Zw8OBBli5dyuOPP86RI0eKdVwKUiqaQ4wcOfKiS/OWLl2ab1vdunVxOBxuruoaVKkJ9JoEs++DDZMhtC60edDoqkRERETETTZu3MjNN9/s+v58U7XBgwczbdq0Ap/TtWtXvvjiC8aNG0dycjKRkZHccsstvPTSS3h4OOPFCy+8gIeHB2PGjOHYsWNUqlSJf/zjHwD4+voyb948XnjhBVq3bo2vry+9evXi7bffvmStvr6+LF++nKeffpp77rmH1NRUoqKiuPXWW0uk6VupCE5SitS7HTq9BL++6Jx1qlgTat1qdFUiIiIicgUuFn7Ou+mmm4o8ITFixAhGjBhxyX3MZjPPPfcczz33XIGPN2zYkF9//fWiDR0uVndkZCTTp08vUr3FxfClelIKtXsCmt0HDrvzfKcTu42uSERERETEUApOkp/JBHe8A1VvgKwUmNUH0k8ZXZWIiIiIiGEUnKRgHl7QdyYEx8CZQ/DlIMjJNroqERERERFDKDjJxflVhAFfglcgHF4FPz0JasohIiIiItcgBSe5tPB6cO+nYDLD7zNh9ftGVyQiIiJiCHV1LpuK6+em4CSXV7sTdB3nvL9oDOyab2w9IiIiIiXIarUCkJGRYXAlciWys52nm1gslqt6HbUjl8Jp8xCc3A0bp8JXw+GBXyCykdFViYiIiLidxWIhODiYxMREwHk9IZPJZHBVZZfdbic7O5vMzMyLtiMvzmOdOHECX19f1zWmrpSCkxSOyQS3vQmn9sPBZfBFPxjxG/iHG12ZiIiIiNtFRkYCuMKTXDmHw8HZs2fx8fEpkQBqNpupWrXqVR9LwUkKz2KFPtNhcic4tQ9mD4DBP4LV2+jKRERERNzKZDJRqVIlwsPDsdlsRpdTptlsNpYvX06HDh1cyyDdydPTs1hmthScpGh8Qpyd9ibdAkc2wPcj4Z5JzhkpERERkXLOYrFc9bky1zqLxUJOTg7e3t4lEpyKi5pDSNFVrAl9Z4DZA7bNheVvGV2RiIiIiIhbKTjJlaneAbqfC0xLXoUd3xhbj4iIiIiIGyk4yZVrNRSuf8R5/5uH4ehmY+sREREREXETBSe5Ol1ehdpdIOcsfNEfUo4ZXZGIiIiISLFTcJKrY7ZArykQVh/S4p1tyrPTja5KRERERKRYKTjJ1fMOhAGzwbciHN8K3zwEdrvRVYmIiIiIFBsFJykeIdWg3yyweMLOH2DJa0ZXJCIiIiJSbBScpPhUvR56vOe8v+It2DrH2HpERERERIqJgpMUr2b9of2Tzvvfj4TYdcbWIyIiIiJSDBScpPjdMgbq3QG52TB7AJw5bHRFIiIiIiJXRcFJip/ZDPd8ApFNIOOks9NeVqrRVYmIiIiIXDEFJ3EPTz/oPxv8IyDxT5j3ANhzja5KREREROSKKDiJ+wRFQf8vwMMb9i6ERWOMrkhERERE5IooOIl7RbWEuz5y3l/zAWyabmw9IiIiIiJXQMFJ3K/RPXDTs877P42CgyuMrUdEREREpIgUnKRkdHwKGvUCew58OQhO7Te6IhERERGRQlNwkpJhMkHPCRDVCs6egVl9nV9FRERERMoABScpOVYf6DcLAqvAqb0wdwjk2oyuSkRERETkshScpGQFRMCA2WD1gwNLYcEzRlckIiIiInJZCk5S8iIbQ69JgAk2TIZ1nxhdkYiIiIjIJSk4iTHq3Q6dXnLeX/A07FtsaDkiIiIiIpei4CTGafcENLsPHHbn+U4ndhtdkYiIiIhIgRScxDgmE9zxDlS9AbJSYFYfSD9ldFUiIiIiIvkoOImxPLyg70wIjoEzh5zXeMrJNroqEREREZE8FJzEeH4VYcCX4BUIh1fBj0+Cw2F0VSIiIiIiLgpOUjqE14N7PwWTGbbMhNXvG12RiIiIiIiLgpOUHrU7QddxzvuLxsCu+cbWIyIiIiJyjoKTlC5tHoJWwwAHfDUc4rcbXZGIiIiIiIKTlDImE9z2JlTvCLZ0+KIfpCUaXZWIiIiIXOMUnKT0sVihz3SoWAuS42D2ALBlGl2ViIiIiFzDFJykdPIJcXba8w6GIxvgu0fVaU9EREREDKPgJKVXxZrQdwaYPWD7PFj+ltEViYiIiMg1SsFJSrfqHeD28c77S16FHd8YW4+IiIiIXJMUnKT0azkErn/Eef+bh+HoZkPLEREREZFrj4KTlA1dXoXaXSDnLHzRH1KOGV2RiIiIiFxDFJykbDBboNcUCKsPafHONuXZ6UZXJSIiIiLXCAUnKTu8A2HAbPCtCMe3wjcPgd1udFUiIiIicg1QcJKyJaQa9JsFFk/Y+YOzYYSIiIiIiJsZHpwmTJhAtWrV8Pb2pk2bNqxfv/6S+yclJfHoo49SqVIlvLy8qFOnDvPnzy+haqVUqHo99HjPeX/FeNg6x9h6RERERKTcMzQ4zZkzh1GjRvHiiy+yefNmmjZtSteuXUlMTCxw/+zsbDp37syhQ4eYN28eu3fvZtKkSURFRZVw5WK4Zv2h/ZPO+9+PhNh1xtYjIiIiIuWaocHp7bffZsSIEQwdOpQGDRowceJEfH19mTp1aoH7T506ldOnT/Ptt9/Srl07qlWrRseOHWnatGkJVy6lwi1joN4dkJsNswfAmcNGVyQiIiIi5ZSHUQfOzs5m06ZNjB492rXNbDbTqVMn1qxZU+Bzvv/+e9q2bcujjz7Kd999R1hYGAMGDODpp5/GYrEU+JysrCyysrJc36ekpABgs9mw2WzF+I6uzPkaSkMtZVKPCXicOYwpYRuOWX3JGTwfvAJcD2t83Uvj614aX/fS+LqXxte9NL7upfF1r9I0vkWpweRwOBxurOWijh07RlRUFKtXr6Zt27au7U899RTLli1j3br8S6/q1avHoUOHuO+++3jkkUfYt28fjzzyCI8//jgvvvhigcd56aWXGDt2bL7ts2bNwtfXt/jekBjGO/s0HXe/iHdOMvGBTVlX40kwGX76noiIiIiUchkZGQwYMIDk5GQCAwMvua9hM05Xwm63Ex4ezieffILFYqFly5YcPXqU//u//7tocBo9ejSjRo1yfZ+SkkJ0dDRdunS57OCUBJvNxqJFi+jcuTNWq9Xocsos07EGOGbcSWTKVu7wWoe90yuAxtfdNL7upfF1L42ve2l83Uvj614aX/cqTeN7fjVaYRgWnEJDQ7FYLCQkJOTZnpCQQGRkZIHPqVSpElarNc+yvPr16xMfH092djaenp75nuPl5YWXl1e+7Var1fAf1IVKWz1lTkwbuOsjmDcUy7qPsITXh5aDXQ9rfN1L4+teGl/30vi6l8bXvTS+7qXxda/SML5FOb5h65k8PT1p2bIlixcvdm2z2+0sXrw4z9K9C7Vr1459+/Zhv+Cip3v27KFSpUoFhia5xjS6B2561nn/p1FwcIWx9YiIiIhIuWHoiSCjRo1i0qRJTJ8+nZ07d/Lwww+Tnp7O0KFDAbj//vvzNI94+OGHOX36NE888QR79uzhp59+4vXXX+fRRx816i1IadPxKWjUC+w58OUgOH3A6IpEREREpBww9Bynvn37cuLECcaMGUN8fDzNmjVjwYIFREREABAbG4vZ/Fe2i46OZuHChTz55JM0adKEqKgonnjiCZ5++mmj3oKUNiYT9JzgbE1+dCMeXw7AWvlfRlclIiIiImWc4c0hRo4cyciRIwt8bOnSpfm2tW3blrVr17q5KinTrD7QbxZMugXTqX20yv4Acu8CrVEWERERkSukns1SPgVEwIDZOKx+hKfuwLzoOaMrEhEREZEyTMFJyq/IxuT2/AgHJiybpsK6T4yuSERERETKKAUnKdccdbvzZ+U+zm8WPA37fjW2IBEREREpkxScpNzbF94de5MB4LDD3KFwYrfRJYmIiIhIGaPgJOWfyUTubf8HVW+ArBSY1QfSTxldlYiIiIiUIQpOcm3w8IK+MyE4Bs4ccl7jKSfb6KpEREREpIxQcJJrh19FGPAleAXC4VXw45PgcBhdlYiIiIiUAQpOcm0Jrwf3fgomM2yZCavfN7oiERERESkDFJzk2lO7E3Qd57y/aAzsmm9sPSIiIiJS6ik4ybWpzUPQahjggK+GQ/w2oysSERERkVJMwUmuTSYT3PYmVO8ItnSY1Q9SE4yuSkRERERKKQUnuXZZrNBnOlSsBSlHYM59YMs0uioRERERKYUUnOTa5hPi7LTnHQxHNsB3j6rTnoiIiIjko+AkUrEm9J0BZg/YPg+W/5/RFYmIiIhIKaPgJAJQvQPcPt55f8lrsOMbY+sRERERkVJFwUnkvJZD4PpHnPe/eRiObja0HBEREREpPRScRC7U5VWo3QVyzsIX/SH5qNEViYiIiEgpoOAkciGzBXpNgfAGkBYPs/tDdrrRVYmIiIiIwRScRP7OOxD6zwbfUDi+Fb55COx2o6sSEREREQMpOIkUJCQG+n0OFk/Y+QMsedXoikRERETEQApOIhdT9Xq4833n/RXjYetsY+sREREREcMoOIlcStN+0H6U8/73j0HsOmPrERERERFDKDiJXM4tL0C9OyA3G2YPgDOHja5IREREREqYgpPI5ZjNcM8nENkEMk7CF/0gM8XoqkRERESkBCk4iRSGp5+z055/JCT+CV8NB3uu0VWJiIiISAlRcBIprKAo6D8LPLxh70JYNMboikRERESkhCg4iRRFVEu46yPn/TUfwKbpxtYjIiIiIiVCwUmkqBrdAzc967z/0yg4uNzYekRERETE7RScRK5Ex6eg0b1gz4E5g+DUfqMrEhERERE3UnASuRImE/T8AKJaQWYSzOoLZ88YXZWIiIiIuImCk8iVsvpAv1kQWAVO7YW5QyDXZnRVIiIiIuIGCk4iVyMgAgbMBqsfHFgKPz8NDofRVYmIiIhIMVNwErlakY2h12TABBunwPpJRlckIiIiIsVMwUmkONTrDp3HOu8veBr2/WpsPSIiIiJSrBScRIrLDY9Ds4HgsMPcoZC4y+iKRERERKSYKDiJFBeTCe54B6reAFkp8EVfSD9ldFUiIiIiUgwUnESKk4cn9J0JwTFw5hB8OQhyso2uSkRERESukoKTSHHzqwgDvgSvQDi8Cn58Up32RERERMo4BScRdwivB/d+CiYzbJkJq98zuiIRERERuQoKTiLuUrsTdPuv8/6iF2HXfGPrEREREZErpuAk4k7XPQitHgAc8NVwiN9mdEUiIiIicgUUnETcyWSC296A6h3Blg6z+kFqgtFViYiIiEgRKTiJuJvFCn2mQ8VakHIEZg8AW6bRVYmIiIhIESg4iZQEnxBnpz3vYDi6Eb57VJ32RERERMoQBSeRklKxJvSdAWYP2D4Plv+f0RWJiIiISCEpOImUpOod4PbxzvtLXoPtXxtbj4iIiIgUioKTSElrOQSuf9R5/9uH4egmQ8sRERERkctTcBIxQpdXoHYXyMmELwZA8lGjKxIRERGRSygVwWnChAlUq1YNb29v2rRpw/r16y+677Rp0zCZTHlu3t7eJVitSDEwW6DXFAhvAGnx8EU/yE43uioRERERuQjDg9OcOXMYNWoUL774Ips3b6Zp06Z07dqVxMTEiz4nMDCQ48ePu26HDx8uwYpFiol3IPSfDb6hEP8HfPMQ2O1GVyUiIiIiBTA8OL399tuMGDGCoUOH0qBBAyZOnIivry9Tp0696HNMJhORkZGuW0RERAlWLFKMQmKg3+dg8YSdP8CSV42uSEREREQK4GHkwbOzs9m0aROjR492bTObzXTq1Ik1a9Zc9HlpaWnExMRgt9tp0aIFr7/+Og0bNixw36ysLLKyslzfp6SkAGCz2bDZbMX0Tq7c+RpKQy3lUZkY30otMd3+Lh7fPwIrxpMTUhNH4z5GV1UoZWJ8yzCNr3tpfN1L4+teGl/30vi6V2ka36LUYHI4jLsK57Fjx4iKimL16tW0bdvWtf2pp55i2bJlrFu3Lt9z1qxZw969e2nSpAnJycm89dZbLF++nB07dlClSpV8+7/00kuMHTs23/ZZs2bh6+tbvG9I5CrUPzaXOgk/kGvyYHWtZzjtX8fokkRERETKtYyMDAYMGEBycjKBgYGX3LfMBae/s9ls1K9fn/79+/PKK6/ke7ygGafo6GhOnjx52cEpCTabjUWLFtG5c2esVqvR5ZQ7ZWp8HXYsXw3DvPtHHL6h5Az9BYKrGl3VJZWp8S2DNL7upfF1L42ve2l83Uvj616laXxTUlIIDQ0tVHAydKleaGgoFouFhISEPNsTEhKIjIws1GtYrVaaN2/Ovn37Cnzcy8sLLy+vAp9n9A/qQqWtnvKmzIxvr09gajdM8X9gnTsQhi10NpEo5crM+JZRGl/30vi6l8bXvTS+7qXxda/SML5FOb6hzSE8PT1p2bIlixcvdm2z2+0sXrw4zwzUpeTm5rJt2zYqVarkrjJFSo6nn7PTnn8kJP4JXw0He67RVYmIiIhc8wzvqjdq1CgmTZrE9OnT2blzJw8//DDp6ekMHToUgPvvvz9P84iXX36ZX375hQMHDrB582YGDhzI4cOHGT58uFFvQaR4BUVB/1ng4Q17F8IvLxhdkYiIiMg1z9ClegB9+/blxIkTjBkzhvj4eJo1a8aCBQtcLcZjY2Mxm//Kd2fOnGHEiBHEx8cTEhJCy5YtWb16NQ0aNDDqLYgUv6iWcPdEmDsE1k6AsDrQcojRVYmIiIhcswwPTgAjR45k5MiRBT62dOnSPN+/8847vPPOOyVQlYjBGt4NJ/fCktfgp39BhRpQvYPRVYmIiIhckwxfqicil9DhP9DoXrDnwJxBcGq/0RWJiIiIXJMUnERKM5MJen4AUa0gMwlm9YGzZ4yuSkREROSao+AkUtpZfaDfLAisAqf2Oc97yjX+StsiIiIi1xIFJ5GyICACBswGqx8cWAo/Pw3GXbtaRERE5JpzVcEpMzOzuOoQkcuJbAy9JgMm2DgF1n9idEUiIiIi14wiBye73c4rr7xCVFQU/v7+HDhwAIAXXniBKVOmFHuBInKBet2h81jn/QXPwN5fja1HRERE5BpR5OD06quvMm3aNN588008PT1d2xs1asTkyZOLtTgRKcANj0OzgeCww7yhkLjL6IpEREREyr0iB6fPPvuMTz75hPvuuw+LxeLa3rRpU3bt0gc4EbczmeCOd6DqDZCVAl/0hfRTRlclIiIiUq4VOTgdPXqUWrVq5dtut9ux2dTpS6REeHhC35kQUg3OHII5AyEn2+iqRERERMqtIgenBg0asGLFinzb582bR/PmzYulKBEpBL+K0H8OeAVC7Gr48Ul12hMRERFxE4+iPmHMmDEMHjyYo0ePYrfb+frrr9m9ezefffYZP/74oztqFJGLCa8HvT+Fz3vDlpkQVgfaPWF0VSIiIiLlTpFnnHr27MkPP/zAr7/+ip+fH2PGjGHnzp388MMPdO7c2R01isil1OoE3f7rvL/oRdg139h6RERERMqhIs84Adx4440sWrSouGsRkSt13YNwYrfz+k5fDYcHFjqv+yQiIiIixeKqLoArIqWEyQS3vQE1bgJbOszqB6kJRlclIiIiUm4UOTiZzWYsFstFbyJiEIsVek+DirUg5QjMHgC2s0ZXJSIiIlIuFHmp3jfffJPne5vNxu+//8706dMZO3ZssRUmIlfAJwQGfAmTboGjG+G7kdBrsnNGSkRERESuWJGDU8+ePfNtu/fee2nYsCFz5szhgQceKJbCROQKVazpvMbTjLtg+zwIqwsdnzK6KhEREZEyrdjOcbr++utZvHhxcb2ciFyN6jfC7W877y95DbZ/bWw9IiIiImVcsQSns2fP8t577xEVFVUcLycixaHlYLj+Uef9bx+Go5uMrUdERESkDCvyUr2QkBBMF5wv4XA4SE1NxdfXl5kzZxZrcSJylbq8Aqf2wd6F8MUAGPEbBOkPHCIiIiJFVeTg9M477+QJTmazmbCwMNq0aUNISEixFiciV8lscTaHmNoVEv+EL/rBsAXg6Wd0ZSIiIiJlSpGD05AhQ9xQhoi4jXcg9J/t7LQX/wd88xD0/gzMuoybiIiISGEVKjj98ccfhX7BJk2aXHExIuImITHQ73OY3gN2/gC/vQKdXjS6KhEREZEyo1DBqVmzZphMJhwOxyX3M5lM5ObmFkthIlLMql4Pd34A3zwIK992tilv2s/oqkRERETKhEIFp4MHD7q7DhEpCU37wsndsGI8fP8YhFRzBioRERERuaRCBaeYmBh31yEiJeXm5+HkHueSvdn3OTvthei/cREREZFLKXJziPP+/PNPYmNjyc7OzrP9zjvvvOqiRMSNzGa4+2NIioXjW8912lvobCIhIiIiIgUqcnA6cOAAd999N9u2bctz3tP5FuU6x0mkDPD0c3ba++RmZ5vyr4ZD/y+c7ctFREREJJ8i9yN+4oknqF69OomJifj6+rJjxw6WL19Oq1atWLp0qRtKFBG3CKzsDEse3s4L5P7ygtEViYiIiJRaRQ5Oa9as4eWXXyY0NBSz2YzZbKZ9+/aMGzeOxx9/3B01ioi7RLWAuyc676+dAJumGVqOiIiISGlV5OCUm5tLQEAAAKGhoRw7dgxwNpDYvXt38VYnIu7X8G64+Tnn/Z/+BQeXG1uPiIiISClU5ODUqFEjtm7dCkCbNm148803WbVqFS+//DI1atQo9gJFpAR0+A80uhfsOTBnEJzab3RFIiIiIqVKkYPT888/j91uB+Dll1/m4MGD3HjjjcyfP5/33nuv2AsUkRJgMkHPDyCqFWQmwaw+cPaM0VWJiIiIlBqF7qrXqlUrhg8fzoABAwgMdLYtrlWrFrt27eL06dOEhIS4OuuJSBlk9YF+s2DSLXBqH3w5GAZ+BRar0ZWJiIiIGK7QM05NmzblqaeeolKlStx///15OuhVqFBBoUmkPAiIgAFzwOoHB5fBz0/DuUsOiIiIiFzLCh2cpkyZQnx8PBMmTCA2NpZbb72VWrVq8frrr3P06FF31igiJSmyEfSaDJhg4xRY/4nRFYmIiIgYrkjnOPn6+jJkyBCWLl3Knj176NevHx9//DHVqlXj9ttv5+uvv3ZXnSJSkup1h85jnfcXPAN7fzW2HhERERGDFbk5xHk1a9bk1Vdf5dChQ3zxxResXbuW3r17F2dtImKkGx6HZgPBYYd5QyFxl9EViYiIiBjmioMTwNKlSxkyZAhDhgwhNzeXESNGFFddImI0kwnueAdi2kFWCnzRF9JPGV2ViIiIiCGKHJyOHDnCq6++Sq1atbjllls4dOgQH374IcePH2fixInuqFFEjOLhCX1mQEg1OHMI5gyEnCyjqxIREREpcYUOTl9++SXdunWjevXqfPTRR/Tp04c9e/awbNky7r//fnx8fNxZp4gYxa8i9J8DXoEQuxp+HKVOeyIiInLNKXRwGjhwID4+PnzzzTfExcXx+uuvU6tWLXfWJiKlRXg96P0pmMywZSas1sWuRURE5NpS6AvgHjlyhPDwcHfWIiKlWa1O0O0N+Pk/sOhFqFgbanY2uioRERGRElHoGSeFJhHhuhHQ6gHAAV8Nh/htRlckIiIiUiKuqqueiFxjTCa47Q2ocRPY0vGYOxAvW5LRVYmIiIi4nYKTiBSNxQq9p0PF2phSjtJ+z6uQ+KfRVYmIiIi4lYKTiBSdTzAMmIMjqCr+2Yl4TOsG2782uioRERERtylycNqwYQPr1q3Lt33dunVs3LixWIoSkTKgYk1yhv1KYkBDTLYMmDcUfnkecnOMrkxERESk2BU5OD366KPExcXl23706FEeffTRYilKRMoI3wqsqfkfcts+7vx+9fsw8x5IP2VsXSIiIiLFrMjB6c8//6RFixb5tjdv3pw//7yy8xwmTJhAtWrV8Pb2pk2bNqxfv75Qz5s9ezYmk4m77rrrio4rIsXAZMZ+yxi491Ow+sHBZfDJTXBsi9GViYiIiBSbIgcnLy8vEhIS8m0/fvw4Hh6FviyUy5w5cxg1ahQvvvgimzdvpmnTpnTt2pXExMRLPu/QoUP8+9//5sYbbyzyMUXEDRrdA8N/hZDqkBwLU7vC1tlGVyUiIiJSLIocnLp06cLo0aNJTk52bUtKSuLZZ5+lc+eiXwzz7bffZsSIEQwdOpQGDRowceJEfH19mTp16kWfk5uby3333cfYsWOpUaNGkY8pIm4S0QAeXAK1u0BOJnzzEPz8NOTajK5MRERE5KoUeYrorbfeokOHDsTExNC8eXMAtmzZQkREBDNmzCjSa2VnZ7Np0yZGjx7t2mY2m+nUqRNr1qy56PNefvllwsPDeeCBB1ixYsUlj5GVlUVWVpbr+5SUFABsNhs2m/Ef5s7XUBpqKY80vu5V4Ph6+EPvmZiXv4Fl5XhYNxH78a3k3j0F/HUh7aLQv1/30vi6l8bXvTS+7qXxda/SNL5FqcHkcDgcRT1Aeno6n3/+OVu3bsXHx4cmTZrQv39/rFZrkV7n2LFjREVFsXr1atq2beva/tRTT7Fs2bICu/etXLmSfv36sWXLFkJDQxkyZAhJSUl8++23BR7jpZdeYuzYsfm2z5o1C19f3yLVKyJFE5m0iRaHP8Zqz+SsNYT11R8nya+m0WWJiIiIAJCRkcGAAQNITk4mMDDwkvsW/aQkwM/PjwcffPCKirsaqampDBo0iEmTJhEaGlqo54wePZpRo0a5vk9JSSE6OpouXbpcdnBKgs1mY9GiRXTu3LnIwVMuT+PrXpcf3+5wsh+Oeffjc2ovHfaPI7fbmziaDSzxWssi/ft1L42ve2l83Uvj614aX/cqTeN7fjVaYRQqOH3//ffcdtttWK1Wvv/++0vue+eddxb64KGhoVgslnzNJhISEoiMjMy3//79+zl06BA9evRwbbPb7QB4eHiwe/duatbM+9dsLy8vvLy88r2W1Wo1/Ad1odJWT3mj8XWvS45vpQYw4jf49mFMu37E46d/QvxWuO0N8Mj/36bkp3+/7qXxdS+Nr3tpfN1L4+tepWF8i3L8QgWnu+66i/j4eMLDwy/Z+ttkMpGbm1vog3t6etKyZUsWL17sel273c7ixYsZOXJkvv3r1avHtm3b8mx7/vnnSU1N5X//+x/R0dGFPraIlCDvQOgzA1aOh99eg02fQsIO6PMZBFYyujoRERGRyypUcDo/q/P3+8Vh1KhRDB48mFatWnHdddfx7rvvkp6eztChQwG4//77iYqKYty4cXh7e9OoUaM8zw8ODgbIt11EShmzGTr8Byo1g68egCPr4ZOOzvBU9XqjqxMRERG5pCK1I7fZbNx6663s3bu32Aro27cvb731FmPGjKFZs2Zs2bKFBQsWEBERAUBsbCzHjx8vtuOJiMFqd4YRSyC8AaQlwLTbYf0kKHqfGhEREZESU6TmEFarlT/++KPYixg5cmSBS/MAli5desnnTps2rdjrERE3q1gTHlgE34+EHd/A/H/Dsd/h9rfB6m10dSIiIiL5FPkCuAMHDmTKlCnuqEVEriVe/nDvp9D5ZTCZYcvn8Gk3SIozujIRERGRfIrcjjwnJ4epU6fy66+/0rJlS/z8/PI8/vbbbxdbcSJSzplM0O4JiGwC84Y6Z50+6Qi9p0H1DkZXJyIiIuJS5OC0fft2WrRoAcCePXuKvaBryec7P2fe7nnkpueybOUyKvhUoIJ3BYK9gqngXYEQ7xDnzSuEYO9grGa1w5RyqubN8OAymHMfxG+Dz+6CLq/A9Y84w5WIiIiIwYocnJYsWeKOOq5Jcalx7EveB8DB2IOX3T/AM4AQrxBXoPp7yMoTuLxC8PHwwaQPnVJWhMTAsF/gx3/CH3Ng4bPOGage74Gnr9HViYiIyDWuyMFp2LBh/O9//yMgICDP9vT0dB577DGmTp1abMWVd4MaDKJ9pfb8tvY3qtevTrItmTOZZziTdcb59dz9pKwk7A47qdmppGanEpsaW6jX97J4uULUhbNXFbwrEOwdTAWvvLNagV6BmE1FPu1NpPh4+sLdH0PlFs7gtG0uJO6CfjMhpJrR1YmIiMg1rMjBafr06fz3v//NF5zOnj3LZ599puBUBFH+UYR7hXPK8xTd63a/6JWL7Q47KVkpnM46zZnMMyRlJrnu/z1onc50bs+2Z5OVm0V8ejzx6fGFqsdishDkFVTgrFZBM1whXiFYLVo+KMXMZILr/wGRjWDuEEjYBp/cBL2mQK1bja5ORERErlGFDk4pKSk4HA4cDgepqal4e//VMjg3N5f58+cTHh7uliKvdWaTmWDvYIK9gyHo8vs7HA7O5pzldOZpkrKSXGEqX8jKOk1SZhJnMs+Qaksl15HL6czTnM48DcmFq83f6p9n1soVuLzOzWp5V3Cdo1XBuwK+Hr5aPiiFU62987ynLwfB0U3w+b1w6xho90+d9yQiIiIlrtDBKTg4GJPJhMlkok6dOvkeN5lMjB07tliLkytjMpnwtfria/WlSkCVQj3Hlmv7K2T9bang+ZmspKwk1/3krGRyHbmk2dJIs6URl1q4FtKeZs8Cg9b5+3+f1Qr0DMRitlzNcEhZFhQFQ+Y7r/P0+wz49SXneU89P3S2MxcREREpIYUOTkuWLMHhcHDLLbfw1VdfUaFCBddjnp6exMTEULlyZbcUKe5ntVgJ8w0jzDesUPufP+fKNZv1t+WCF4as8/czczPJtmeTkJFAQkZCoY5jNpkJ8gy6ZNj6e+DytHhezVBIaWP1hjvfh6gWMP8p+PM7OLEH+n3uvJCuiIiISAkodHDq2LEjAAcPHqRq1apabnWNM5vMBHkFEeQVRPWg6oV6ToYtw9nsIrPgma3TmeeWDp67n5qdit1hd+6XdabQywf9rH5/zVp5heCR6UFEYgQtIlsoVJVVJhO0GgYRjWDOIDixEz65GXpNgjpdja5ORERErgFFbg4RExPDihUr+Pjjjzlw4ABz584lKiqKGTNmUL16ddq3b++OOqUcOL98MMo/qlD72+w2krOSCzWrdSbT2X0w15FLui2ddFs6R9OOul7rt19/w8viRdOwprSKbEXriNY0CWuiIFXWRF8HDy2DL++HuHUwqy/cNBo6/AfM6ggpIiIi7lPk4PTVV18xaNAg7rvvPjZv3kxWVhYAycnJvP7668yfP7/Yi5Rrk9VsJdQnlFCf0ELt73A4SMlOcYWo05mnOZpylJ//+JljlmOcyjzF+vj1rI9fD6AgVVYFRMLgH2HhaNgwGZa+Dse3wN0TwbsQ3VNERERErkCRg9Orr77KxIkTuf/++5k9e7Zre7t27Xj11VeLtTiRojCZTK7lg+fZbDYC9wdy2223ceTsETbGb2RD/AY2xG8oMEg1C2vmDFKRrWkc2lhBqrTy8ITbx0Pl5vDjKNg9HybdAv1mQVhdo6sTERGRcqjIwWn37t106NAh3/agoCCSkpKKoyaRYmcymagRVIMaQTXoU7cPDoeDgykH8wWpdfHrWBe/DlCQKhOaD4Tw+s7znk7tc4anuz6CBncaXZmIiIiUM0UOTpGRkezbt49q1arl2b5y5Upq1KhRXHWJuFWBQSr5oDNEJTiD1OnM0wpSZUFUS+f1nuYOgcMrndd9uvFfcPNzoFb2IiIiUkyKHJxGjBjBE088wdSpUzGZTBw7dow1a9bw73//mxdeeMEdNYq4nclkokZwDWoE16Bvvb4KUmWNfxjc/y0sGgNrP4QV4+H4Vug1GXxCjK5OREREyoEiB6dnnnkGu93OrbfeSkZGBh06dMDLy4t///vfPPbYY+6oUaTEXUmQ8rZ40zS8Ka0jWtM6sjWNQhspSJUkixW6jXOe9/T947DvV/jkJuj7OUQ2Mro6ERERKeOKHJxMJhPPPfcc//nPf9i3bx9paWk0aNAAf39/d9QnUioUOkgdX8e64wpShmrSB8LqwZz74MwhmNIZen4AjXoZXZmIiIiUYUUOTud5enrSoEGD4qxFpMwoKEgdSD7gajSxMWHjZYNU49DGWC1Wg99JOVWpifO8p3nD4MAS59djv8OtL4Hlin/tiYiIyDWs0J8ghg0bVqj9pk6desXFiJRVJpOJmsE1qRlck371+ilIlQa+FWDgV7D4ZVj1Lqx+H47/Afd+Cn4Vja5OREREyphCB6dp06YRExND8+bNcTgc7qxJpMy70iDVLLwZrSPPLe2r2EhB6mqZLdB5LFRuBt8+CgeXnTvvaYZzm4iIiEghFTo4Pfzww3zxxRccPHiQoUOHMnDgQCpUqODO2kTKjcIGqbXH17L2+FpAQapYNbwbQus6z3s6fQCmdoUe/4Om/YyuTERERMqIQgenCRMm8Pbbb/P1118zdepURo8eze23384DDzxAly5dMJlM7qxTpFwpKEjtT9rvajSxMX4jZ7LOKEgVp4gGMGIJfD0C9v4C3zzkPO+py6vOjnwiIiIil1Cks6S9vLzo378//fv35/Dhw0ybNo1HHnmEnJwcduzYoc56IlfIZDJRK6QWtUJq0b9efwUpd/EJhv5zYNl/YdkbsG4ixG+D3tPAP9zo6kRERKQUu+L2UmazGZPJhMPhIDc3tzhrErnmXUmQ8vHwoVnYX0GqYcWGClIFMZvh5mehUlP4+iE4vAo+7gh9Z0KVlkZXJyIiIqVUkYJTVlaWa6neypUrueOOO/jggw/o1q0bZrPZXTWKXPP+HqTsDjsHkg7kC1Jrjq9hzfE1gILUZdW7HUb85jzv6eQe+LQbdH8LWg42ujIREREphQodnB555BFmz55NdHQ0w4YN44svviA0NNSdtYnIRZhNZgWp4hBWB4Yvhm8fhl0/wg+Pw7HNcNub4OFldHUiIiJSihQ6OE2cOJGqVatSo0YNli1bxrJlywrc7+uvvy624kSkcAoKUvuT9rs69ilIXYJ3IPSZASvHw2+vwaZpkLDDuS2wktHViYiISClR6OB0//33q3OeSBlhNpmpHVKb2iG1GVB/QL4gtSF+A0lZSfmCVPPw5rSObE2riFY0DG2I1XyNBCmzGTr8Byo1g68egCMb4OMO0OcziGlrdHUiIiJSChTpArgiUjYVNkitPraa1cdWA9dokKrdGR5cCrMHQuIOmH4HdPsvtB4O+sORiIjINe2Ku+qJSNlVXEGqXKpQA4Yvgu9Gwo6vYf6/ndd7uv1tsHobXZ2IiIgYRMFJRAoMUvuS9rkaTWxM2FhgkGoa2pQq2VXoYu+ClXI0G+XpB/dOhcrN4dcXYcvnkPin87yn4GijqxORa9Tp9Gx2x6eyOz6FXfEp7Dlg5pe0P9TZ2A3sdjvHj2l83eX8+La/2UZFa9n5/KDgJCL5mE1m6oTUoU5IHe6rf99Fg9TaeOc1pNb8sIahjYZyV+278LKUk250JhO0exwiG8O8Yc5Zp086Oi+WW72D0dWJSDmWnpXDnoRU9iSksjs+jd0JKeyOT+NkWtbf9jTDqXhDarw2aHzdy0xWjt3oIopEwUlELutiQWrxocVM3zado+lHeXXdq0z8YyKDGgyiT50++Hv6G1128ah5s/O8pzkDIf4P+Owu6PIKXP+IznsSkauSnWPn4Ml05+xRQqpzNikhlbjTZy/6nKoVfKkbGUCtMF8SDu+jQYMGWCyWEqz62pCbm8uff/6p8XWT8+Pr51W2xlbBSUSK7HyQqu5fndDDoWTWymTGrhkcTz/OO5veYfK2yfSv15/76t9HBe8KRpd79UJi4IFf4Id/wh+zYeGzzhmoHu+Bp6/R1YlIKWe3Ozhy5uxfASkhjd3xKRw4kU6O3VHgc8ICvKgXGUCdiADqRgQ4w1K4P35ezo9uNpuN+fP30r1tDNYytNSprLDZbMw/s0Pj6ybnx9fXs2xFkbJVrYiUOp4mT+6qexf9GvRj/oH5TNk+hYPJB/nkj0/4bMdn3FvnXgY3HEykX6TRpV4dqw/cPRGiWsCC0bBtLiTugn4zIaSa0dWJSCngcDg4kZZ17jykVNcs0p6ENM7acgt8ToCXB3UjA6gT+VdAqhMRQAU/zxKuXkQuR8FJRIqF1WylZ62e9KjZg99if2PytsnsOLWDmTtnMnv3bO6ocQfDGg2jelB1o0u9ciYTtHkIIhrC3CGQsA0+uQl6TYFatxpdnYiUoJRMG3vOLa3bE5/KrnNB6UyGrcD9PT3M1A73p27EuZB0LihVCvLWdTJFyggFJxEpVmaTmU4xnbi16q2sOb6GKdumsD5+Pd/u+5bv9n1Hp5hODG88nAYVGxhd6pWr1h4eXAZfDoKjm+Dze+GWF6D9kzrvSaScybTlsi8x7dwSu3MzSPGpHEvOLHB/swmqVfRzzRzVPReSYir44mFRdzaRskzBSUTcwmQycUPlG7ih8g1sPbGVydsmszRuKYsOL2LR4UW0q9yOBxo/QKuIVmXzr61BUTBkvvM6T7/PgMVj4fgW6DkBvAKMrk5EiijX7uDQqXTXLNL5Rg2HTqZzkdOQqBTk7Zo5qnPBeUje1rJ1wruIFI6Ck4i4XdOwprx/y/vsPbOXqdun8vPBn1l1bBWrjq2iaVhTRjQeQYcqHcpegLJ6w53vO897mv8U/PkdnNgN/WZBxZpGVyciBXA4HBxPznQtsTsfkPYlpl20NXKwrzXP+Uf1IgOoHRFAkI+aBohcSxScRKTE1A6pzbgbx/Fos0eZtmMa3+z9hq0ntjLyt5HUDqnN8EbD6VKtCx7mMvSryWSCVsMgohHMGQQndsEnN8M9n0DdbkZXJ3JNO5Oe7QxICefOQToXklIzcwrc38dqoU6Ef54ldnUjAggL8Cp7f9gRkWJXhj6diEh5USWgCs9f/zwPNXmIGTtnMGfXHPae2cvTK57m/d/fZ2ijofSs1bNsXUw3+jp4aBl8ORji1sIXfeGmZ6HDf0BXnRdxq4zsHPYmpP01i3RuqV1i6t8vGOtkMZuoEer31zK7SOcsUnSIL2azApKIFEzBSUQME+YbxqiWo3ig0QPM3jWbz3d+zpG0I7yy9hUmbp3I/Q3up3fd3vhZ/YwutXACImHwD87rPG2YBEtfd573dPdE8A4yujqRMs+W67xg7PlW3+c72cWezsBxkfOQqoT4/HU9pHOzSNVD/fDy0HlIIlI0Ck4iYrggryAeavoQgxoM4uu9XzNtxzQSMhIYv2k8k7ZNYkD9AdxX7z6CvYONLvXyPDzh9regcnP48UnYPR8m3eI87ymsrtHViZQJdruDo0lnXecfnQ9K+0+kYcstOCGF+nv+1cnuXEiqHRGAv5c+6ohI8dBvExEpNXytvgxsMJC+dfvy44Efmbp9KodSDjFx60Sm75hOr9q9ys7FdJvfB+H1nec9ndrnDE93fQQN7jS6MpFS5URqlutCseeD0t6EVNKzC75grL+XB3Ui/PO0+64TEUCofxla2isiZZKCk4iUOlaLlbtr382dNe9kcexiJm+bzM7TO10X072z5p0MazSMmMAYo0u9tKgW8OBSmDcUDq1wXvfpxn/Bzc+BWcuE5NqSmmljT0JanpC0JyGVU+nZBe7vaTFTM9yfuhH+rnOQ6kQEEBXso0YNImIIBScRKbUsZgtdqnWhc0xnVh9bzeRtk9mYsJGv937Nt/u+pXNMZ4Y3Hk69CvWMLvXi/MNg0LewaAysnQArxsPxrdBrMviEGF2diFtk5eSyaEcC3x82882MzexNTOdo0tkC9zWdu2BsnQj/c0vsAqkb6U9MRT+sumCsiJQiCk4iUuqZTCbaRbWjXVQ7tiRuYfK2ySw7soyFhxay8NBC2ke1Z3jj4bSMaGl0qQWzeEC3153nPX3/GOz7FT65Cfp+DpGNjK5OpNjsjk9lzoY4vvn9CGcybIAZOOl6PCLQyxmMzrX8rhcZSK1wf3w8NQMrIqVfqQhOEyZM4P/+7/+Ij4+nadOmvP/++1x33XUF7vv111/z+uuvs2/fPmw2G7Vr1+Zf//oXgwYNKuGqRcQIzcKb8cGtH7D79G6mbJ/CwkMLWXl0JSuPrqR5eHOGNx7OjVE3ls6lPE16OxtEzLkPzhyCKZ2h5wfQqJfRlYlcsbSsHH7ceozZG+LYEpfk2h4Z6EVNn7N0bt2ABlEh1InwJ9jX07hCRUSukuHBac6cOYwaNYqJEyfSpk0b3n33Xbp27cru3bsJDw/Pt3+FChV47rnnqFevHp6envz4448MHTqU8PBwunbtasA7EBEj1K1Qlzc7vMljzR7j0x2f8u2+b/k98XceXfwodUPq8kDjB+gS0wVLaTuXqFITeHAZzBsGB5Y4vx77HW59yTkzJVIGOBwONscm8eWGOH744xgZ5xo5eJhNdG4QQd/W0VxfLZiFC36me5uqWK1WgysWEbl6hi8efvvttxkxYgRDhw6lQYMGTJw4EV9fX6ZOnVrg/jfddBN333039evXp2bNmjzxxBM0adKElStXlnDlIlIaRAdGM6btGBb0WsCQhkPw8fBh95ndPLX8Ke789k7m7ZlHdm7BJ58bxrcCDPwK2v3T+f3q92HmPZB+ytCyRC7ndHo2k1ccoMs7y+n10WrmbIwjIzuXGmF+PNu9HmufvZWPBrbkprrhWHQhWREpZwz982Z2djabNm1i9OjRrm1ms5lOnTqxZs2ayz7f4XDw22+/sXv3bt54440C98nKyiIr668rh6ekpABgs9mw2WxX+Q6u3vkaSkMt5ZHG171K0/iGWEN4vOnjDK43mDl75vDF7i+ITY1l7JqxfLjlQwbVG8Q9te7B1+prdKl/uel5TBFNsPzwGKaDy3B83IGce6dDpaZA6Rrf8kjjWzh2u4NVB04xd+NRft2V6LqOkrfVTPdGkfRuGUXLqsGu5bF/H1eNr3tofN1L4+tepWl8i1KDyeG42LW23e/YsWNERUWxevVq2rZt69r+1FNPsWzZMtatW1fg85KTk4mKiiIrKwuLxcKHH37IsGHDCtz3pZdeYuzYsfm2z5o1C1/fUvQBSkSKVZYji41ZG1mVtYoUh/MPJj4mH9p6teV6z+vxNZee//4Dzh7huoP/wz8rgVyTla3RQ4mr2N7osuQadyYL1iWaWHfCzOmsv2aPov0ctI2w06KiAx+tLhWRMi4jI4MBAwaQnJxMYGDgJfctk7/yAgIC2LJlC2lpaSxevJhRo0ZRo0YNbrrppnz7jh49mlGjRrm+T0lJITo6mi5dulx2cEqCzWZj0aJFdO7cWWvA3UDj616lfXzv5m6yc7OZf2g+n+74lLi0OH7L/I01OWvoVasXA+sNJNw3/7mUhsjsi/27f2DZt4gWsZ/QNNxBVscXWPTb0lI7vmVdaf/3a4TsHDu/7T7B3E1HWLHvFOf/tBro7UHPZpXp3SKK+pUCCvVaGl/30vi6l8bXvUrT+J5fjVYYhgan0NBQLBYLCQkJebYnJCQQGRl50eeZzWZq1aoFQLNmzdi5cyfjxo0rMDh5eXnh5ZX/auJWq9XwH9SFSls95Y3G171K8/harVZ61+vNPXXuYVHsIib/MZndZ3Yzc9dM5uyZ47qYbtXAqgYXGgoDvoRl/4Vlb2DZOAnvhG14B/Yt1eNbHmh8YV9iGl9ujOOrTUfyXJC2bY2K9Lsumq4NI/G2XlmjFY2ve2l83Uvj616lYXyLcnxDg5OnpyctW7Zk8eLF3HXXXQDY7XYWL17MyJEjC/06drs9z3lMIiJ/ZzFb6FatG11jurLy6Eomb5vM5sTNfLX3K77Z9w1dY7ryQOMHqFuhrnFFms1w87NQqRl8/SDmuLV0Zj3YfoFWw6DWrVDaugRKmZWRncNPfxxnzoY4Nh4+49oeHuBF71ZV6NMqmpiKfgZWKCJSuhi+VG/UqFEMHjyYVq1acd111/Huu++Snp7O0KFDAbj//vuJiopi3LhxAIwbN45WrVpRs2ZNsrKymD9/PjNmzOCjjz4y8m2ISBlhMpm4scqN3FjlRjYnbGbytsmsOLqCnw/9zM+HfqZDlQ4Mbzyc5uHNjSuyXnd4cAn27x/DHLsG9vzsvAVWgRaDoPlACKpiXH1SZjkcDv44kszsDXH8sPUYaVk5AFjMJm6uG06/1tHcVDcMD4vhTXdFREodw4NT3759OXHiBGPGjCE+Pp5mzZqxYMECIiIiAIiNjcVs/usXeHp6Oo888ghHjhzBx8eHevXqMXPmTPr27WvUWxCRMqpFRAs+jPiQXad3MWXbFH45/AvLjyxn+ZHltAhvwYgmI2hXuZ0xF9MNrU3uoB9Y+tUkOgYexrJtDqQcgaXjYNkbULsLtBjs/KrrP8llJGVk8+3vR5m9IY5d8amu7TEVfenbOpp7W1QhPNDbwApFREq/UvF/25EjR150ad7SpUvzfP/qq6/y6quvlkBVInKtqFehHv/X8f8YmTKST7d/ynf7v2Nz4mYe/vVh6leoz7DGw+hctbMhF9NN9YnC3nkEls5jYecPsHk6HFoBexY4bwGVoPkg50xUsMHnaUmpYrc7WHvgFLM3xLFgRzzZOXYAvDzMdG9ciT6torm+RgVj/jAgIlIGlYrgJCJSGsQExvDSDS/xj6b/4LM/P2PennnsPL2T/yz7DzGBMQxrNIweNXpgtRhwIqvVG5r0dt5O7nUGqC2zIPU4LH8Tlv+f8xyolkOgTjcwokYpFRJSMpm36QhzNsQRezrDtb1+pUD6XxdNz6ZRBPnq34eISFEpOImI/E2kXyRPtX6KBxs/yKxds/h85+ccTjnMi6tfZMKWCQxpOIRetXsZdzHd0NrQ5VW45QXY9RNsmgYHl8G+X503/wjneVAt7oeQasbUKCXKlmtnya5E5myIY8nuROzn2ogHeHnQs3ll+raqSqOoQM0uiYhcBQUnEZGLCPYO5pFmjzC44WDm7ZnH9B3TScxI5M0Nb/LJH59wX/376F+vP0FeQcYU6OEFje5x3k7th82fwZbPIS0BVox33mrc7JyFqtsdPDyNqVPc5uDJdL7cGMe8TUc4kfpXd9nrqlWgb+toujeuhI+nOjGKiBQHBScRkcvws/oxuOFg+tfrz3f7v+PT7Z8SlxrHhC0T+HT7p/Sp24f7G9xPmG+YcUVWrAmdx8LNzzk78G2aBvt/gwNLnDffUGh+n7OhRMWaxtUpVy3TlsvP248ze30c6w6edm0P9fekV0tnG/GaYf4GVigiUj4pOIkIdruD1KwcUs7aSD5rc339+y0lM+ev+2dtpGflUMFsJiH4MLc2iKRGqF+5XgrkafGkd53e3F3rbhYdXsTkbZPZc2YP03ZM4/Odn3NXrbsY2mgo0QHRxhXp4QkNejpvZw7B5hnw+wznLNSq/zlv1Ts4A1T9Hs5ZKykTth9N5suNcXzz+1FSM51txM0m6FgnjL6tq3Jr/XCsaiMuIuI2Ck4i5USu3XGJwFNwIEo56wxCqZk21zkRRZWImdd/3s3rP+8muoIPHeuEcVOdcNrWrIifV/n8FeNh9uC26rfRrVo3VhxdwaQ/JrHlxBbm7pnLV3u/olu1bjzQ+AHqhNQxttCQanDrC3DTM7BnobOhxN5FcHC58+ZTAZoNcC7lC61tbK1SoOSzNr7feow5G2LZfjTFtb1KiA99W0Vzb6sqVAryMbBCEZFrR/n8VCNSRmXn2C8edjLybnfe/polOn8hy6vhbTUT6G0lyCfvLfDc7e/bTY5cPl+4hkSPMDYeSiLu9Flmro1l5tpYrBYTratV4Ka6YXSsE06dCP9yNxtlMpnoUKUDN0bdyKaETUzePplVR1cx/+B85h+cT8cqHRneeDjNwpsZW6jFCvXvcN6SYuH3mc6ZqNRjsOYD5y2mnTNA1b/T2cFPDONwOFh/8DRzNsQxf/txMm3ONuKeFjNdGkbQr3VVbqhZEbO5fP33JPnl2nNJs6WRZksjNTuV1OxUUrJTSM1OJflsMsk5yUaXKHJNUXASKUYOh4OsC8LPxQOP7YJlcX8tfztry73qGvw8La6wE3SRwOPc7pE3GHlb8bYW7SRym83GscoOundvhc1hYs3+Uyzbc4Klu08QezqD1ftPsXr/KV6fv4tKQd7O2ai6YdxQK5RA7/LTDtlkMtEqshWtIlvx56k/mbJtCosOL2LZkWUsO7KMVhGtGN54ODdUvsH48BhcFW5+Fjo85ezAt2ka7F0Ih1c5bz5PQZN+0HIwhNc3ttZrTGJqJl9vPsqXG+I4cDLdtb1uRAB9W0dzd/MoQvzU4KMsybHnkG5Ld4WdC28p2SkFBqILb2m2tMse48z6M/znuv8Y1+VT5Bqi4CTyNw6Hg/TsXFfouTDwpBQQfP4++5Oda7+q45tMzhbCFw88Fw9DAd4ehp3j4Ovpwa31I7i1fgQOh4NDpzJYtjuRpXtOsGb/KY4nZzJ7QxyzN8ThYTbRIibEFaQaVCo/bZIbVGzA+JvGczD5IJ9u/5QfDvzAxoSNbEzYSP0K9RneeDi3Vr3VkIvp5mHxgLrdnLfko85ZqN9nQHIcrPvIeYu+3jkL1aAneOpDmTvk5NpZvvcEs9fHsXhXIrnn1sz6eVq4s1ll+rSKpll0cLn576OssdltpGWnkZadRoqt4PDz922ptr/up9vSL3+QQvC2eBPgGZDnhgNWHlvJvH3zWJewjtfbv2787LZIOafgJOVWpi2X42fOEpcGq/efIt3muGjjg5QLGh+knLWRc6Un/JxjMZsI9M47o3PJ2Z8Llsf5e3tgKeNLcEwmE9VD/ageWp0h7aqTactl3cHTLNt9gqV7EjlwIp31B0+z/uBp/m/hbsICvOhYJ4yOdcK4sXYowb5l/6/q1YOq83K7l3mk2SNM3zGdr/Z+xc7TO/nXsn9RLbAawxoN444adxhzMd2/C4qCm56GDv92duLbNA12/wxxa523n5+Gpn2dISqiodHVlguxpzJcbcTjUzJd21tUDaZf66rc3qRSuT1HsCTZcm15gsyFQSctO+2v720FB6KzOWeLpQ4fDx8CrAH5wk+AZwCBnoF5txWwn6cl/+9Em83G+9+9z8+On4lLjWPwgsE80OgBHm76cOn4vSJSDum3spQ5druDU+nZJKRkEp+cSUJqJgnJmSSkZBGfkknCuduZDNu5Z3jAtk1FPo6nxXwu6Fxi9sf7b2HI1/nVz9OivxBfwNtqcQWjMTQg7nQGS/ecYNnuE6zef5ITqVnM23SEeZuOYDZBs+hgbqobTsc6YTSOCirT53JE+kXy9HVP82CTB/l85+fM2jWLQymHGLN6DB9u/ZAhDYdwT+178PEoBSf4my1Qu7PzlnLceU2ozdOd50Wt/8R5q9La2ZGv0T3g6Wd0xWVKpi2XX/5MYM6GWFbtO+XaHuJrpVeLKvRtHU3tiAADKyx9snOz88/yXGLmJy07Lc/MT3EFH18P3zxBx9/TP0/I+Xv4ufB7f09/rGb3BJma1prM6TSH8b+P5/v93zNp2ySWH1nO6ze+bnxzGpFySMFJSpXUTBsJKVmu8BOfkjcUJaZkkpiaVegZIU8PMz6mXMJD/An29cxzPk++IOSbd7u31azw4ybRFXwZdH0Mg66PISsnl02HzriC1O6EVDbHJrE5Nom3F+2hgp8nHWqH0rFuGB1qh1HRv2y2zw7xDmFk85EMaTiEuXvmMn3HdOLT4/nv+v/y8daPua/+ffSr18+4i+n+XWAl5wxU+1HO60Btng67foIjG5y3hc9C497OWahKTYyutlTbFZ/CnA3ONuJJ5/6gYzJB+1qh9GtdlU4NwvHyKJ8XqbU5bJw8e5KzGWfzL2krRCDKys26/EEKwc/ql2dGJ98sT0EzQdZAV/DxMJfej0sBngG81v41bo6+mZfXvMzuM7vp92M/Hmv+GPc3uN/4ZcEi5Ujp/U0g5Up2jp0TaVnOGaILQlFiSlaeWaP07MI1RzCZIMzfi4hAbyICvYkM8iIiwJuIoHPfB3oTEeiFrwf8/PPPdO/eDqtVSxdKIy8PCzfUCuWGWqE8270+x5LOsvxcg4lV+05yOj2bb7cc49stxzCZoHFUEDfVCaNj3TCaRYeUuWWN/p7+DG00lAH1B/Ddvu+Yun0qR9OO8sGWD/h0x18X0w31CTW6VCezGWrd6rylJTpnoTZNhzMHYeMU561yc2eAatQLvDRjApCWlcMPW48xe0McW+OSXNsrB3nTu1U0vVtVoUpI+ThvzO6wcyztGAeSD3Ag6QD7k/dzIOkAB5IPOJsbfHP1xwiwBvw1y1PQEre/zfyc3zfQMxA/q1+pDj7FpVNMJ5qFN2Ps6rEsPbKUtze9zdK4pbzW/jWqBFQxujyRcqH8/yYRt3I4HJxOz84/S3Tu+/jkTBJTMzmZll3o1wzw9jgXfM7fvIgM8iY8wJvIIGcoCvX3xKMQTRBsNttl95HSpXKwD/2uq0q/66piy7Wz+fAZV6e+P4+n8MeRZP44ksx7v+0jyMdK+9qhziBVJ4zwwLLTRtvL4kWfun24p/Y9LDi0gCnbprAvaR+fbv+Uz//8nLtr383AugONLjMv/3Bo/yTc8AQcWuE8F2rnD3Dsd+dt4XPO8NRyiDNMXWMztg6Hg82xZ5i9Po6fth0n49wfgjzMJjo3iKBv62hurB1W5sL+ebn2XI6kHWF/0n4OJB9gf9J+9ift51DKoUsuiTNhwt/TP1/QybftIuf8+Hn4adakkEJ9Qnnvlvf4dt+3/Hf9f9mcuJle3/fiqdZPcU/te7SKQuQqKTjJRWVk5ziXyJ0LP/HJF8wSnQtJiSlZhe4i52kxEx7o5ZoRCg/0IjLQO08oigj0wtdT/yzFyWox06ZGRdrUqMhT3eqRmJLJsj0nWLbnBCv2niT5rI2f/jjOT38cB6BBpUA61g3jpjphtIgJMazDYFF4mD24o8YddK/enWVxy5i8fTJ/nPiDObvnMG/PPCLMESxbuYxqQdWIDogmOiCaqoFVCfMJM+5DkNkMNTo6b+knYcss51K+U/ucXzdPh8gmzgDVuDd4BxpTZwk5lZbFN78fZfaGOPYl/tU+umaYH/1aV+XuFlGElqElpja7jbiUOPYnO4PR+VmkQ8mHyLYX/Ecwq9lKTGAMNYNrUjOoJjWCa1DVryp/rPqDu7rfhZdn2Xn/ZZ3JZOLu2nfTOrI1z696nk0Jm3hpzUssiVvCSze8VHpms0XKIH1CvQbl5No5mZZN/AUzQvHJF8wSnQtFqZmFv6BqqL/nBeHn3CzRBbNGkUHehPha9dcuuSrhgeeXOUWTk2tn65Fklu1OZNmeE/xxNJk/j6fw5/EUPlq6nwAvD9rVcp4b1bFOGJWDS0HzhUswm8zcXPVmboq+iY0JG5n0xyTWHF/DsdxjHIs9lm9/Hw8fqgRUoWpAVaoGVCU68FyoCqhKhG9Eyf2F3i8U2j0ONzzmvA7Upmnw53cQ/wf8NAp+ed7ZSKLlUIhqWW5moXLtDlbuO8mcDbEs+jMBW67zvEsfq4Xbm1SiX+toWsaElOrfeVm5WRxKPuSaPTr/NTYllhxHwb//vSxe1AiqQY3gGq6AVDOoJlUCquRbDmez2dhj2oPZVPr/gFEeVQmowtSuU5nx5wz+t/l/LDuyjLu/u5sxbcfQOaaz0eWJlEkKTuWIw+Fst52nu1xy3qVzCSmZnEzLorDdtv08Lc7zhs6FItcsUaA34ecCUZi/F54e+h+jlCwPi5mWMSG0jAlhVJe6nErLYsXekyzbc4Lle05wKj2bBTviWbAjHoA6Ef6uTn2tqoWU2pPxTSYTrSNb0zqyNQdOH+DL374kok4ERzOOEpsSS2xqLMfTj3M25yx7z+xl75m9+V7Dara6QtX5Garz9yv5V3JPhy+TCaq1d95uexO2znaGqJO7z10jaiZENHJ25GvSB3yCi7+GEnA06SxzN8Yxd+MRjib9tTytaZUg+rauSo+mlQgoZRd3PptzloPJB/OEowPJB4hLjcPuKHjFgK+H718B6YJZpMp+lbVsrgwxm8wMbjiYGyrfwLMrn2XX6V2MWjqKHjV68EybZwj0LN+zwSLFTcGpjMi05bqWyJ3vLudsqpB1QTjKJCuncMvmPMwmwgO8nOEnMG8ouvDcotL2AUDkYir6e3FX8yjuah6F3e5g+7Fklu52Luv7PfYMexLS2JOQxifLD+DraeGGmhXPXYA3nOgKpfMk/eiAaOpb69O9fvc8zU1suTaOpR9zBam41DhiU5xfj6QdwWa3cTD5IAeTD+Z7TYvJQmX/ygWGqqiAKLwsxbCkyrcCtH0Ern8YYtc6l+7t+AYStsPP/4FFY6Dh3c6lfNHXlfpZqOwcO7/uTGD2hjhW7D2B49wfnoJ8rNzdPIo+raJpUNn4D6Bp2Wn5Zo8OJB/gWNoxHBT817IAa4AzGAXXpEZQDdf9CN+IUj1bJkVTO6Q2s7rP4qOtHzFl+xR+OPAD6+PX80q7V2hbua3R5YmUGQpOBsu1O0jOhu1HUziZkfNXg4ULQlFCaqarhW1hhPha/1oidy4AXThrFBHoTUU/zzJ9bRyRSzGbTTSpEkyTKsE8fmttkjKyWbnvpCtInUjN4tedify6MxHYQY1QP9eSvutrVMTbWrr/om61OM8niQmMyfdYrj2X+Ix4V5C6MFzFpcaRlZvluv93JkxE+kW6lv6dXwZYJaAK0QHR+FqLGDBNJohp67x1Gwd/fOmchUr8E7bOct7C6jkDVJO+zsBViuxNSGXOhji+/v0op9P/OrfnhpoV6ds6mq4NIw35t5KclZynOcP5+wkZCRd9TohXSN7ldedmkUJ9QhWQrhFWi5XHWzxOhyodeG7lc8SmxvLgogcZUG8A/2z5z9JxLTmRUk7ByUDj5u9k8sqD5No9YNPay+7vbTX/tUTO1VTByxWGIgO9CQvwKvUf+kRKWrCvJ3c0qcwdTSrjcDj483iKq1PfpsNnOHAynQMn0/l01SG8PMxcX6MiN50LUtVD/crUB0uL2UKUfxRR/lG0Je9fku0OOycyTuSZpbrwfkZOBsfTj3M8/Tjr4tfle+0wn7C8s1QXnFcV4HmZNuQ+IdDmIbjuQTiy0Rmgtn8FJ3bBgmdg0YvQoKczRMXcYNgsVHpWDj9tO86cDXFsOnzGtT0i0IveLZ1txGMquv/Cvw6Hg9OZp/PMHJ1v0nDy7MmLPi/MJ8wVkM7PItUIrkEF79IVSsU4zcKbMbfHXN7e9DZzds9h1q5ZrD62mnE3jqNRaCOjyxMp1RScDOTjaSHX7sCEg/ACrkF0YWOFiEBvAr09ytQHOJHSyGQy0bByEA0rB/HITbVIybSxet9JV5A6nvxX5z6AqhV8zy3pC6NtzYpluuuj2WQmwi+CCL8IWke2zvPY+Q/qcalxxKbG/hWqUuKIS4sjOSuZE2dPcOLsCTYnbs732iFeIXlmqc7fjw6IJtgr+K/fXSYTRLd23rq9fm4WajokbINtXzpvFWs7A1TT/uBX0e3j4nA42BKXxJwNsXy/5ZjrenIWs4lb6oXTr3U0HeuEFeoSCFdy7BNnT+Rr8X0g+QBJWUkXfV6kX2Se5gw1g2tSPah66bmAspRqvlZfnr/+eW6Ovpkxq8ZwKOUQA+cPZESTETzY5EH3nAcpUg6U3U8A5cD9batxb/NKrF/xGz1u76gLtIoYINDbSrdGlejWqBIOh4O9iWksPdepb/3B08SezmDG2sPMWHsYT4uZ66pXcAWpWuH+5eaPGSaTiYo+FanoU5Fm4c3yPZ6clVzgLFVcahynMk9xJusMZ06c4Y8Tf+R7boA1IE+QqhpY1TVTFdp6OKbWw+HYZucs1Lav4NRe+OU5WDwW6vdwhqhqNxbrLJTD4eBUWhbLjpv4cMIadif81Ua8WkVf+rauSq8WUcV2bTC7w058enz+c5CSDpBqSy3wOSZMRPlHOWeOzi+zC6pB9aDq+Hv6F0tdcm1rF9WOr3t+zWvrXuPngz8zcetElh9Zzrj246gRXMPo8kRKHQUnA1Xw8yTA04SlfHzuEinzTCYTdSICqBMRwIMdapKelcOa/adYuieRpbtPcOTMWVbuO8nKfSd5bf5OooJ96HDu4rvtalUs181UgryCCPIKKnApT7otvcBQFZsaS2JGIqm2VP489Sd/nvoz33N9PHxcISo6qjpVa75J1ZP7id61iIjj2zBv/8q5pK9CTWg5GJoOAP+wfK+Tk2vnTIaNMxnZnErL5nR6Nqczsjmdlu3clp7N6fQsTqfbOJ2exZl027lr0FmANLw8zHRvXIm+raNpU73CFQfiXHsux9KO/XUNpAuC0sUuEms2makaUNXVnOF8SKoWVE3nnYjbBXkF8WaHN7kl+hZeWfsKf576kz4/9uGfLf7JgPoD1E5e5AIKTiIiF+Hn5UGnBhF0ahCBw+HgwMl0lu0+wdI9J1h74BRHk87yxfpYvlgfi4fZRMuYEFfL8/qVAsrNbNTl+Fn9qFehHvUq1Mv3WGZOJkdSjxR4XtX5tup7zuxhz5k9eZ/oDdYaNaiMJzEZScRkn6Lq2jeJWvkGWd7N2eJ1O+vsTTiVkcOp9GySzxa+gc6Fqvg5GH5zfe5uWZUgn8IH3xx7DnGpca7zjs6Ho4PJB8nKzSrwOR5mD6oFVvsrIJ07/6haYDU8LZ5XVL9IcelWvRstIlowZvUYVh1dxRsb3mBJ3BJebfcqlfwrGV2eSKmg4CQiUggmk4maYf7UDPNnWPvqnM3OZe3BUyw716nv4Ml01h08zbqDp3ljwS7CA7xc7c7b1wolyLf8zkZdireHNzWCalLBsypVvbOp75vN6QDnzM+JtDSOpB7jePoRTmYdJSUnngxHAjnmE2A9jY0cDpPDYR9P8LkwWMTi4fiQcJsDq28FTJYaWL0rY7eF4m8Op4JXJKF+foT4elLR35MQX08q+P11q+jnRYiflUBPM0t+XUj3NlUvulQ6OzebwymH2Z/sXFZ3PiAdSjlEjr3gi8R6mj2pHlQ9b5OG4BpEB0Tr3BEp1cJ9w/no1o+Yu2cub218i/Xx67nn+3t45rpnuLPmndfMH4NELkbBSUTkCvh4Wri5bjg31w0H4PCpdGdTid0nWL3/FImpWczddIS5m45gNkGLqiGuINWwcmCZvhxApi3XuRSuoNu55XGnM/7alpSRfZmLboedu10oF0+vVIICk/HxPYOH9ykclpPkcoQ0+0lsJjjmaQLPJPDbjDfOhhV24BQmPP0qERQYjU9AVcIvaFZRJaCia/mbzfbXLFVmTiaHUg7la/EdlxpHriO3wKp9PHycs0bnLxR7LiRF+UfpIrFSZplMJvrU7cP1la7n2ZXPsvXEVp5f9TxL4pYwpu0YdWiUa5qCk4hIMYip6Mf9bf24v201Mm25bDx0hmXnzo3am5jGxsNn2Hj4DOMX7aGinycdzjWYuLF2GBX8jFum5XA4SDmbcy7oZHHqwnOCLghAZ9LPnyeUTUZ2wUHicgK9PfLM/DhvXlTws+b5WtHPkxA/T/w8LQX+hdvusJOYfJi4bV8Qu+cnYtPiiLNaifXwIM7TkwyTg2PpxziWfox1x/O3VQ/3CSc6MJrKfpXZm7aXid9P5Gja0YteJNbf6p+vxXfN4JpE+kXq/A8pt6oGVmV6t+l8uuNTJmyZwOLYxfye+DsvtX2Jm6vebHR5IoZQcBIRKWbeVgvta4fSvnYoz90OR5POnlvSl8iqfac4lZ7NN78f5Zvfj2IyQZMqwa5OfU2rBGO5itmo7Bw7Zy6Y7Tl1Qeg549rmbI5w6txsUM6lp4MK5GE25QlAIX6eVPx7KPL1pIL/ucd9PbEWUztvs8lMZHB1Im98ltY3PgsJf8Lm6bD1CxyZ8Zwym4nz9CK2SjNiI+sTZ/Ug9lyb9dTsVBLPJpJ4NpFNbHK+4LmGekFeQXlafJ//Gu4briVKck2ymC0Mbzyc9lHtGb1iNPuS9vH4kse5u9bdPNX6KXV3lGuOgpOIiJtFBfswoE1VBrSpSnaOnc2xZ1h67tyoncdT2BqXxNa4JN5bvJdgXys31nZ26ruhejCZOXD4dAapWfZLL487N0OUmlXweTeX4+/lkScAnT8/yBWALgxH/p4EeJWi68pFNIDb3oBOL2H68ztCN00nNHY1zfetgX1rILAKtBgEN75FsneAq0FFbHIscXvj6HFDD+pUrEMF7yvvpidSntWrUI85d8zhgy0fMG37NL7Z9w3r49fzSrtX8l0TTqQ8U3ASESlBnh5mrq9RketrVOSZ2+qRkJLpOjdqxd4TJGXY+GHrMX7YeuzcMzxgw8oiHcNs4q+ZoAsaJFTMMzvkbJBQ0c+LYF8r3tZycE6O1Qea9nPeTux2Xlh36yxIOQJLx8GyNwiq1ZnGLYfQuHZXbHYH82Pn0yqila6jJ3IZnhZPRrUcRccqHXlu5XMcTTvKAwsf4P4G9/NYi8fwsngZXaKI2yk4iYgYKCLQmz6tounTKpqcXDtb4pJYtucES3efYNvRZAB8rGbnuT8XBKAQV4e4C2aJzn0N9LaW6eYTxSKsLnR7HW4dA7t+dF5c99AK2LvQeQuohLnJAColZWPaZQdLOQiOpYwpN5dKSZs0vm5iys3FJ/t0iR+3ZURLvrrzK/5vw//x1d6vmP7ndFYeXcm4G8dRv2L9Eq9HpCQpOImIlBIeFjOtqlWgVbUK/KtLXU6nnmXxol+4q0d3zYhcKas3NL7XeTu5z3ku1JbPIfU4llXjuQ7goNFFlk8eoPF1Iw/gFpMn1PKF5v1L9Nh+Vj9euuElbo6+mRdXv8j+5P0M+GkADzd7mGGNhuFh1sdLKZ/0L1tEpJQK8PbAU3+oLz6htaDLK3DL87DrJ+xb53Dm2H5CQipg1rlNxc7ucHDmzGmNr5s4Mk7hcWovfPcPSNgGnV8GS8l+rOsY3ZFven7DK2tfYdHhRbz/+/ssi1vGa+1fo1pQtRKtRaQkKDiJiMi1xcMLGt1Dbt0erJw/n+7du2PWjF6xy7XZNL5ulJOVycGpw6mT8AOsnQDxf8C9n4L/36+J5l4h3iGM7zieHw/8yLh14/jj5B/0/qE3/2r1L/rW7auGK1Ku6AIUIiIiImWN2cLOyr3J6TUNPP2d5/B9chMc3VzipZhMJnrU7MHXPb+mTaU2ZOZm8tq61/jHr/8gIT2hxOsRcRcFJxEREZEyylHvDhi+GCrUdHaQnNoNfv/ckFoi/SL5pPMnPHPdM3hZvFh9bDV3f3838w/Mx+Eo+vXiREobBScRERGRsiy8Hjy4BOrcBrn/3969x/dc//8fv713NjbmPCxjzoUV0cgpk1IO4eMYIiT0iXVAKodyqil9PilyjA+NsiRnxpRTGItGziIMEcbY8fX74/2zb4vMZu/3a+/37tfL5XW5eL/22t7398M7uXu+Xq93Enw3EFa8BqnJdo/iYnGhe/XuLG69mIeKPURCcgLDfhzGGz+8weWbl+2eRyQ3qTiJiIiIODqvwtBlITQdYX28cyZ82RoSzDlVrmLhisxvNZ+BwQNxs7ix5sQa2i9rz4+//2hKHpHcoOIkIiIi4gxcXKDpcOi6CDx94dR2mN4YTu0wJY6bixsv136Z/7X6HxUKV+DCjQsMjBrI2G1jSUxJNCWTyP1QcRIRERFxJlWfgn4boUQ1uBYPc1rBrjmmxXmw+IMsfnYxz1d/HoCvD31Nx+87Ens+1rRMIjmh4iQiIiLibIpXgr7roXobSE+B5UNg2SuQmmRKHC83L4bVG8asJ2dRumBpTiWcotfqXkyJmUJymv2vxRLJCRUnEREREWfk6QOd5kHzUYAFds+DOU/DldOmRarnX4/INpG0CWpDupHOrF9m0XVFVw5eOmhaJpF7peIkIiIi4qwsFmgUBs9/A15F4HQMfNEETmwxLZKPhw/jHh/HlKZT8PP049Cfh+i6oiuzf5lNWnqaablEsqLiJCIiIuLsKoVC/2go9RBcvwDz2sD2aWDi5ys1L9+cyLaRNC3XlJT0FD6O+Zg+a/pwKuGUaZlE7kbFSURERCQ/KFoBXlwLD3WE9FRYPQy+HQApN0yLVLxAcf7zxH8Y22AsBd0Lsvv8bjos68A3h77Rh+ZKnqPiJCIiIpJfeBSEDjOh5XiwuMLeCJj1JPz5m2mRLBYLz1V+jiVtllC3VF1upN5gzLYxDIoaxIXEC6blEvk7FScRERGR/MRigZBB0HMpeBeD+L3wRVM4Fm1qrLKFyjKr5Sxer/s6Hi4e/Hj6R9ova8/aE2tNzSVyi4qTiIiISH5UoTH03wT+wXDjEsx/Drb8x9TrnlwsLvR6sBcRz0ZQvWh1Lidd5rVNrzH8x+FcSbpiWi4RUHESERERyb+KBECf1VC7GxjpsO4d+KYPJF83NVZlv8osaLWA/rX642JxYcWxFbRf1p6tZ7aamkvytzxRnKZOnUpgYCBeXl7Ur1+fHTt2/OOxM2bMoFGjRvj5+eHn50doaOhdjxcRERGRu3AvAO0+g1bh4OIGcZEwswVcOmZuLFd3Xnn4FeY9PY/yvuU5n3iel9a9xPifxnMj1bwbWkj+ZXpxWrRoEWFhYYwaNYrdu3dTu3ZtWrZsyfnz5+94fHR0NF27dmXjxo1s27aNgIAAnnzySU6fNu/D3EREREQcmsUC9fpBr++hYEk4H2e97unwerOTUbtEbRY/u5guVbsA8NWvX9Hp+07su7DP5GSS35henD766CP69etH7969qVGjBtOmTcPb25vZs2ff8fgFCxYwcOBAgoODqVatGjNnziQ9PZ2oqCg7JxcRERFxMuUbwEuboNyjcPMKLOgIP4Sbet0TgLe7NyMfG8n00OmU9C7Jiasn6LGqB5/u+ZSU9BRTs0n+4WbmkycnJxMTE8OIESMy9rm4uBAaGsq2bdvu6WckJiaSkpJC0aJF7/j1pKQkkpKSMh5fvXoVgJSUFFJSzP8P7VaGvJDFGWm+tqX52pbma1uar21pvrZl0/kWKAHdl+Ky9i1c93wJG94j/fRu0lp/Cp4+uf982fBoyUdZ3Goxk3ZOYtVvq5i+dzqbTm3i/QbvU7FwxVx7Hr1/bSsvzTc7GSyGiZ8udubMGcqWLcvWrVsJCQnJ2P/mm2+yadMmfvrppyx/xsCBA1mzZg1xcXF4eXnd9vXRo0czZsyY2/YvXLgQb2/v+3sBIiIiIk7sgT+iqfX7PFyNVBK8yrCjwqtc8/I3OxYA+5L3sezGMm4YN3DDjRZeLQjxDMHFYvoJVeJAEhMT6datG1euXMHX1/eux5q64nS/Jk6cSEREBNHR0XcsTQAjRowgLCws4/HVq1czrovKajj2kJKSwrp162jRogXu7u5mx3E6mq9tab62pfnaluZrW5qvbdlvvq0wTnfGWPICPglneOLY+6S1+QyjytM2fM57TdaKPol9GPvTWLac3cKqm6u44HuB0SGjKVOwzH39bL1/bSsvzffW2Wj3wtTiVLx4cVxdXTl37lym/efOnaN06dJ3/d7w8HAmTpzI+vXrqVWr1j8e5+npiaen52373d3dTf+N+qu8lsfZaL62pfnaluZrW5qvbWm+tmWX+QY+Bi/9AIt7YTm5Fbeve0CTYdBkOLiYu7pTpnAZPm/xOV8f+prwXeHsOr+Lzis7M7zecNoGtcVisdzXz9f717bywnyz8/ymvts9PDyoU6dOphs73LrRw19P3fu7Dz74gPfee4/Vq1dTt25de0QVERERyb8KlYRey6DeS9bHmybBV13gxmVTYwFYLBY6Ve3EN62/IbhEMNdTrvPOlncYsnEIF29cNDueOBHTTwINCwtjxowZfPnllxw4cICXX36Z69ev07t3bwB69uyZ6eYRkyZN4p133mH27NkEBgYSHx9PfHw8165dM+sliIiIiDg/V3do9QG0mwZuXnB4DcxoBucPmJ0MgAd8H2DuU3MZ8sgQ3Fzc2HBqA+2XtWfDyQ1mRxMnYXpx6ty5M+Hh4bz77rsEBwcTGxvL6tWrKVWqFAAnT57k7NmzGcd//vnnJCcn07FjR/z9/TO28PBws16CiIiISP4R3BX6rIbCAdYPyZ3RHOKWmp0KAFcXV16s+SIRz0RQ2a8yl25e4tWNr/L25re5lqx/ZJf7kyduDjF48GAGDx58x69FR0dnenzixAnbBxIRERGRf1bmYegfDd/0huM/wNe94MwQaP4uuLianY6qRasS8UwEn8Z+ytxf5vLd0e/YGb+T9x9/n0dLP2p2PHFQpq84iYiIiIgDKlgcnv8WQv7/P35vmWL9wNzES6bGusXD1YOwOmHMfWouZQuV5cz1M/RZ04cPdn5AUlpS1j9A5G9UnEREREQkZ1zdoOU46DAL3ArA0Q3wRRM4u9fsZBkeKfUIS9osoUPlDgDM3z+fzt93Zv/F/SYnE0ej4iQiIiIi96dmR+i7HvwC4fJJmPUk7P3a7FQZCroXZHSD0UxtPpViXsU4euUo3Vd0Z/rP00lNTzU7njgIFScRERERuX+lH4J+G6FSKKTegMi+sPotSMs7xaRxucZ82/ZbWpRvQaqRyqexn9JzVU+OXzludjRxACpOIiIiIpI7vItCt8XQ6DXr4+1TYX47uHbB1Fh/5eflx+Qmk5nQaAI+7j7s+2Mfnb7vxMIDC0k30s2OJ3mYipOIiIiI5B4XV+vd9TrNB49CcOJH+KIpnN5tdrIMFouFZys+S2TbSB7zf4ybaTeZsGMCA9YNIP56vNnxJI9ScRIRERGR3FejDfSNgmKV4OrvMPsp2LPA7FSZlC5YmuktpjOi3gi8XL3YdnYb7b9rz8rjKzEMw+x4kseoOImIiIiIbZSsBv02QJWnIS0JvhsIK16D1GSzk2VwsbjQrXo3FrdeTM3iNUlISeDtbW+z8PpCjlw+YnY8yUNUnERERETEdrwKQ5eF0PQt6+OdM+HL1pCQt06Jq1C4AvOenseg4EG4Wdw4kHqATis78Vr0axz+87DZ8SQPUHESEREREdtycYGmw6DrIvD0hVPbYXoTOLXD7GSZuLm4MaD2ABY+vZAH3R8EYO1va2m/rL0KlKg4iYiIiIidVH3KesvyEtXgWjzMaQW7ZkMeu56oUpFKdC3YlUWtFvFk+SeB/ytQYdFhHPrzkMkJxQwqTiIiIiJiP8UrWT8st3obSE+B5UNh2SuQctPsZLepXKQyk5tOZkmbJRkFat1v6+iwrIMKVD6k4iQiIiIi9uXpA53mQfNRgAX2zIe5reDKabOT3VEVvyoqUKLiJCIiIiImsFigURg8/w14FYHTMfBFEzixxexk/+hWgYpsE0nLwJZYsGQqUAcvHTQ7otiQipOIiIiImKdSKPSPhlI14foFmNcGtk/Lc9c9/VVlv8qENwlnSZslmQpUx+87qkA5MRUnERERETFX0Qrw4lqo+S9IT4XVw+DbAZByw+xkd6UClb+oOImIiIiI+Ty8of0MaDkeLK6wNwJmPQl//mZ2sizdrUAN3ThUBcpJqDiJiIiISN5gsUDIIOi5FLyLQfxe+KIpHIs2Odi9uVWgIttE8lTgU1iwsP7kehUoJ6HiJCIiIiJ5S4XG0H8T+AfDjUsw/znY8p88fd3TX1Xyq8SHTT5UgXIyKk4iIiIikvcUCYA+qyG4OxjpsO4d+KYPJF83O9k9u1uBGrJxCL9e+tXsiJINKk4iIiIikje5F4C2U6FVOLi4QVwkzGwBl46ZnSxbbhWob9t+y9OBT2PBQtTJKP71/b9UoByIipOIiIiI5F0WC9TrB72WQ8GScD7Oet3T4fVmJ8u2oCJBfNDkAxUoB6XiJCIiIiJ5X/kQeGkTlHsUbl6BBR3hhw8hPd3sZNl2twL16oZXVaDyKBUnEREREXEMvmXghRVQpzdgwIb3YXEPuHnV7GQ5kqlAVbAWqA2nNmQUqAMXD5gdUf5CxUlEREREHIebJ7SeAq3/A64e8OtymNkc/jhsdrIcCyoSxAeNP2Bp26WZClSn5Z1UoPIQFScRERERcTx1ekHvVeBTBv44BF80g19XmJ3qvlQsUvEfC9S/N/xbBcpkKk4iIiIi4pjK1bVe9/RAA0hOgIhusGGcQ1739Fd/LVCtKrTCgoWNpzaqQJlMxUlEREREHFehktBrGdQfYH38wwfwVRe4cdnUWLmhYpGKTGo8SQUqj1BxEhERERHH5uoOT0+C56aDmxccXgMzmsF55ygWdytQr2x4hf0X95sdMV9QcRIRERER51C7C/RZA4UDrB+SO6M5xC01O1WuyShQ7ZbyTMVncLG4EH0qms7LO6tA2YGKk4iIiIg4jzLB0H8TVGgCKdfh616wbhSkp5mdLNdULFyRiY0m8m3bb1Wg7EjFSUREREScS8Fi8HwkNHjF+njLFOsH5iZeMjVWbrtrgYp6hbiLcWZHdCoqTiIiIiLifFzd4Mn3ocMscPeGoxvgiyZwdq/ZyXLdrQK1tO1Snq34rLVA/R5Nl+VdVKBykYqTiIiIiDivmh3hxXXgFwiXT8KsJ2Hv12ansokKhSswodGEOxaowVGDiftDBep+qDiJiIiIiHMr/RD02wiVQiH1BkT2hdVvQVqq2cls4k4FatPvm+iyQgXqfqg4iYiIiIjz8y4K3RZDo9esj7dPhfnt4NoFU2PZkgpU7lJxEhEREZH8wcUVmr8LneaDRyE48aP1uqfTMWYns6lbBeq7tt/RumLrTAVqUNQgfvnjF7MjOgQVJxERERHJX2q0gb5RUKwSXD0Ns5+GPf8zO5XNBRYOZHyj8ZkK1A+//0DXFV1VoO6BipOIiIiI5D8lq0G/DVC1FaQlwXeDYMVrkJpsdjKbU4HKGRUnEREREcmfvApD5wXQbCRggZ0z4cvWkBBvdjK7+GuBahPUJlOBGrh+IPsu7DM7Yp6i4iQiIiIi+ZeLCzR5E7otAs/CcGo7brObUyzhV7OT2U1g4UDGPT6OZe2WZRSoH0//SLeV3VSg/kLFSURERESkSkvovxFKVMNy7RyPHxmP66zmsGsOJCWYnc4uyvuWV4G6CxUnERERERGAYkHQN4r02t1Js7jhEv8zLB8C4VVh2SvWu+8Zhtkpbe5uBerl9S+z98JesyOaQsVJREREROQWz0KkPfsJax+cQlrzMVCsMqRch93zYMYTML0R7JgBN6+YndTm7lSgNp/eTPeV3fNlgVJxEhERERH5m2R3X9IfGwSDd8ILK6FmJ3D1hPh9sPJ1mFwNlg6CUzudfhXq7wXK1eKaLwuUipOIiIiIyD+xWCCwIXSYAa/9Ck9NhBLVICURYv8Hs0Lh8wbw03S48afZaW3qrwWqbVDbTAVqwPoB/HzhZ7Mj2pSKk4iIiIjIvfAuCo+9DAO3Q5+1ULsbuHnB+f2w6k3rKtS3A+DkdqdehXrA9wHef/z9TAVqy+ktPL/yeacuUCpOIiIiIiLZYbHAA/Xhuc+tq1BPfwglH4TUm/DzVzC7JUytD9s+g8RLZqe1mfxWoEwvTlOnTiUwMBAvLy/q16/Pjh07/vHYuLg4OnToQGBgIBaLhSlTptgvqIiIiIjI3xXwg/r94eUt0DcKHn4e3L3hj4OwZoR1FWpJPzix2WlXoW4VqO/bfU+7Su0yF6h1A4g9H2t2xFxhanFatGgRYWFhjBo1it27d1O7dm1atmzJ+fPn73h8YmIiFStWZOLEiZQuXdrOaUVERERE/oHFAuXqQtup1lWoZz6C0jUhLQn2LYa5z8Cnj8LW/8L1i2antYkA3wDea/he5gJ1Zgs9VvVwigJlanH66KOP6NevH71796ZGjRpMmzYNb29vZs+efcfjH330UT788EO6dOmCp6enndOKiIiIiNwDr8Lw6Ivw0o/QbyPUeQE8CsHFw7D2bfioGnzdG45tgvR0s9PmuqwKlKOewudm1hMnJycTExPDiBEjMva5uLgQGhrKtm3bcu15kpKSSEpKynh89epVAFJSUkhJScm158mpWxnyQhZnpPnaluZrW5qvbWm+tqX52pbma1u5Ot+SNeGpcGg2Csv+b3HZMw+Xs7EQFwlxkRh+FUgP7kF6rS5QqOT9P18eUrpAad6t9y69q/dmVtwsVhxfwZYzW9hyZguV3CpR9VJVgooGmZoxO7/HFsMw52TLM2fOULZsWbZu3UpISEjG/jfffJNNmzbx008/3fX7AwMDGTJkCEOGDLnrcaNHj2bMmDG37V+4cCHe3t45yi4iIiIiklOFE09Q/mI05S5txT39JgDpuHK2yCP8VqwZF3xqgMX0WxHkuotpF9mUtInY5FgsWHjN9zV8XXxNzZSYmEi3bt24cuUKvr53z2LaipO9jBgxgrCwsIzHV69eJSAggCeffDLL4dhDSkoK69ato0WLFri7u5sdx+lovral+dqW5mtbmq9tab62pfnaln3mOxCSr5O6f6l1FepMDGUv76Ts5Z0YRcqTHvw86bW6go9zXdffgx6c+PMEX236ig4tO5j+/r11Ntq9MK04FS9eHFdXV86dO5dp/7lz53L1xg+enp53vB7K3d3d9N+ov8preZyN5mtbmq9tab62pfnaluZrW5qvbdl8vu5F4NEXrFv8L7D7S/h5EZbLv+EaPQ7XTROh6tPWa6SCngAXV9tlsaNAv0Bqe9TOE+/f7Dy/aWuAHh4e1KlTh6ioqIx96enpREVFZTp1T0RERETE6ZV+CFp9aL0jX7vPIeAxMNLg1+WwoCN8Uhs2fQBXz5idNN8y9VS9sLAwevXqRd26dalXrx5Tpkzh+vXr9O7dG4CePXtStmxZJkyYAFhvKLF///6MX58+fZrY2FgKFSpEpUqVTHsdIiIiIiK5wsMbgrtZt/MHIOZL64fqXjkFG8dB9ASo3NK6ClW5hdOsQjkCU4tT586duXDhAu+++y7x8fEEBwezevVqSpUqBcDJkydxcfm/RbEzZ87w8MMPZzwODw8nPDycJk2aEB0dbe/4IiIiIiK2U7I6PD0RQkfDgWUQMxd+2wKHVlk337LwcA/rh+4WCTA7rdMz/eYQgwcPZvDgwXf82t/LUGBgICbdBFBERERExBzuXlCrk3W7cMh6LVTsQrh6GjZNhE2TrKtPdV6wrka5mv5XfKfkfPc5FBERERFxViWqQMtx1muhOsyCwEaAAYfXQkQ3+PhBiHoP/vzN7KROR8VJRERERMTRuHlCzY7wwnJ4ZTc0fBW8i8O1ePgx3HozifntYf93kKYPSs4NKk4iIiIiIo6sWBC0GAthB+BfX0LFZoABR6NgcU/4qAasHw2Xjpmd1KHpBEgREREREWfg5gEPtrNul47D7nkQuwCunYPNH1u3ik3hkV5Q7Vnr8XLPVJxERERERJxN0QoQOgqavQWHVlvvyHckCo5FWzfv4tZbnj/SC4rrY33uhYqTiIiIiIizcnWH6q2t25+/wZ7/wZ75kHAWtv7HugU2st6Rr3pr67VTckcqTiIiIiIi+YFfeXhiJDQZZr0LX8xcOLIOTvxo3QoUhdpdoU4vKFHV7LR5joqTiIiIiEh+4uoG1VpZtyu/W1ehds+zfi7U9qnW7YEG1lWoGm3AvYDZifME3VVPRERERCS/KlwOmg6HIfug29dQ9RmwuMLJrfBtf5hcFVYNg3P7zU5qOq04iYiIiIjkdy6uUOVJ63b1DOxZYF2FunISfppm3QLqW28m8eBz4OFtdmK704qTiIiIiIj8H98y0OQNeDUWnl9ivWmEixuc+gm+GwiTq8GK1yF+n9lJ7UorTiIiIiIicjsXV6gUat0Szlk/E2r3l/DnCdg5w7qVrWO9FurB9uBZyOzENqUVJxERERERuTufUtAoDF7ZAz2WQo124OIOp2Ng2SvWVajlQ+FMrMlBbUcrTiIiIiIicm9cXCComXW7dgF+Xmi9rfmlY7BrtnXzD7auQtXsCJ4+JgfOPVpxEhERERGR7CtUAhq+Cq/shl7L4aGO4OoBZ2Nh+RAIr2pdjTodA4Zhdtr7phUnERERERHJOYsFKjSybtcvws9fWa+F+uOQ9c58u+dB6ZrWO/LV6gSujnlHPq04iYiIiIhI7ihYDBoMhkE7oPcqqNUZXD2td+Bb+TpMrobr9//G7/oRh1uF0oqTiIiIiIjkLosFyjewbk9NhL2LrddCXTiAy96FNAZSf68PFR83O+k9U3ESERERERHb8S4Kjw2A+i/BqR2k75pDwqHNeJd71Oxk2aLiJCIiIiIitmexwAP1SfN/hOgVy2llcayrhhwrrYiIiIiIOD4HK02g4iQiIiIiIpIlFScREREREZEsqDiJiIiIiIhkQcVJREREREQkCypOIiIiIiIiWVBxEhERERERyYKKk4iIiIiISBZUnERERERERLKg4iQiIiIiIpIFFScREREREZEsqDiJiIiIiIhkQcVJREREREQkCypOIiIiIiIiWVBxEhERERERyYKKk4iIiIiISBZUnERERERERLKg4iQiIiIiIpIFN7MD2JthGABcvXrV5CRWKSkpJCYmcvXqVdzd3c2O43Q0X9vSfG1L87Utzde2NF/b0nxtS/O1rbw031ud4FZHuJt8V5wSEhIACAgIMDmJiIiIiIjkBQkJCRQuXPiux1iMe6lXTiQ9PZ0zZ87g4+ODxWIxOw5Xr14lICCAU6dO4evra3Ycp6P52pbma1uar21pvral+dqW5mtbmq9t5aX5GoZBQkICZcqUwcXl7lcx5bsVJxcXF8qVK2d2jNv4+vqa/sZxZpqvbWm+tqX52pbma1uar21pvral+dpWXplvVitNt+jmECIiIiIiIllQcRIREREREcmCipPJPD09GTVqFJ6enmZHcUqar21pvral+dqW5mtbmq9tab62pfnalqPON9/dHEJERERERCS7tOIkIiIiIiKSBRUnERERERGRLKg4iYiIiIiIZEHFSUREREREJAsqTjY2depUAgMD8fLyon79+uzYseMfj42Li6NDhw4EBgZisViYMmWK/YI6sOzMeMaMGTRq1Ag/Pz/8/PwIDQ296/GSvflGRkZSt25dihQpQsGCBQkODmb+/Pl2TOt4sjPfv4qIiMBisdCuXTvbBnRw2Znv3LlzsVgsmTYvLy87pnU82X3/Xr58mUGDBuHv74+npydVqlRh5cqVdkrreLIz36ZNm972/rVYLDzzzDN2TOxYsvv+nTJlClWrVqVAgQIEBAQwdOhQbt68aae0jic7801JSWHs2LEEBQXh5eVF7dq1Wb16tR3T3iNDbCYiIsLw8PAwZs+ebcTFxRn9+vUzihQpYpw7d+6Ox+/YscN4/fXXja+++sooXbq08fHHH9s3sAPK7oy7detmTJ061dizZ49x4MAB44UXXjAKFy5s/P7773ZO7hiyO9+NGzcakZGRxv79+40jR44YU6ZMMVxdXY3Vq1fbObljyO58bzl+/LhRtmxZo1GjRkbbtm3tE9YBZXe+c+bMMXx9fY2zZ89mbPHx8XZO7TiyO9+kpCSjbt26RqtWrYzNmzcbx48fN6Kjo43Y2Fg7J3cM2Z3vxYsXM713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sGFDDhw4cMfXcODAAerXr59pX0hIyD3PQEREzKcVJxERydP+egqdxWIBrNcY3VKwYMFMx1+7dg1/f3+io6Nv+1m3bjM+evRounXrxooVK1i1ahWjRo0iIiKC55577rbnvPW8hmHkxssREREHpRUnERFxKo888gjx8fG4ublRqVKlTFvx4sUzjqtSpQpDhw5l7dq1tG/fnjlz5tzTz/f19aVMmTJs2bIl0/4tW7ZQo0aNO35P9erV2bFjR6Z927dvz+YrExERM6k4iYiIUwkNDSUkJIR27dqxdu1aTpw4wdatWxk5ciS7du3ixo0bDB48mOjoaH777Te2bNnCzp07qV69+j0/xxtvvMGkSZNYtGgRBw8eZPjw4cTGxvLqq6/e8fgBAwZw+PBh3njjDQ4ePMjChQuZO3duLr1iERGxB52qJyIiTsVisbBy5UpGjhxJ7969uXDhAqVLl6Zx48aUKlUKV1dXLl68SM+ePTl37hzFixenffv2jBkz5p6f49///jdXrlzhtdde4/z589SoUYNly5bddpOJWx544AGWLFnC0KFD+e9//0u9evUYP378bXcIFBGRvMti6KRtERERERGRu9KpeiIiIiIiIllQcRIREREREcmCipOIiIiIiEgWVJxERERERESyoOIkIiIiIiKSBRUnERERERGRLKg4iYiIiIiIZEHFSUREREREJAsqTiIiIiIiIllQcRIREREREcmCipOIiIiIiEgW/h/Pf98QLOoYAAAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"code","source":["predicted_classes_test = (predictions_test >= best_threshold).astype(int)\n","\n","# Imprimir el reporte de clasificación con el mejor threshold\n","print(\"Test set classification report with custom threshold:\")\n","print(classification_report(y_test, predicted_classes_test, target_names=['Clase 0', 'Clase 1']))\n","\n","# Calcular la precisión y el recall con el mejor threshold\n","precision = precision_score(y_test, predicted_classes_test)\n","recall = recall_score(y_test, predicted_classes_test)\n","\n","print(\"Precision (Test Set, Class 1) with custom threshold:\", precision)\n","print(\"Recall (Test Set, Class 1) with custom threshold:\", recall)\n","\n","# AUC Score no se afecta por el threshold, pero se puede recalcular para referencia\n","auc_score_test = roc_auc_score(y_test, predictions_test)\n","print(\"Test set AUC Score:\", auc_score_test)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zPz7eo8nnaJE","executionInfo":{"status":"ok","timestamp":1732048479830,"user_tz":300,"elapsed":467,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"19a1f357-2609-407e-9d47-932a7d6ae7d6"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Test set classification report with custom threshold:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.88      0.43      0.58        67\n","     Clase 1       0.25      0.76      0.38        17\n","\n","    accuracy                           0.50        84\n","   macro avg       0.57      0.60      0.48        84\n","weighted avg       0.75      0.50      0.54        84\n","\n","Precision (Test Set, Class 1) with custom threshold: 0.2549019607843137\n","Recall (Test Set, Class 1) with custom threshold: 0.7647058823529411\n","Test set AUC Score: 0.636523266022827\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import roc_curve, auc\n","import matplotlib.pyplot as plt\n","\n","# Calcular la curva ROC y el AUC\n","fpr, tpr, _ = roc_curve(y_test, predictions_test)\n","roc_auc = auc(fpr, tpr)\n","\n","# Graficar la curva ROC\n","plt.figure(figsize=(10, 6))\n","plt.plot(fpr, tpr, color='blue', label=f'ROC Curve (AUC = {roc_auc:.4f})')\n","plt.plot([0, 1], [0, 1], color='gray', linestyle='--')  # Línea de referencia (clasificador aleatorio)\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic (ROC) Curve')\n","plt.legend(loc='lower right')\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"8QzeEIg3naBl","executionInfo":{"status":"ok","timestamp":1732048483439,"user_tz":300,"elapsed":520,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"2bdd695c-c49e-420f-9265-f71ec23d13d2"},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#RESULTADOS ANTERIORES"],"metadata":{"id":"F66PYyQJnarz"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":26344,"status":"ok","timestamp":1731534639196,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"},"user_tz":300},"id":"4-LSwrhIkB7e","outputId":"f45ec43a-755a-4fc0-ccdd-6f2fb1e1d2b6"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 4s/step\n","Test set classification report after fine-tuning:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.83      0.87      0.85        67\n","     Clase 1       0.36      0.29      0.32        17\n","\n","    accuracy                           0.75        84\n","   macro avg       0.59      0.58      0.58        84\n","weighted avg       0.73      0.75      0.74        84\n","\n","Test set AUC Score after fine-tuning: 0.543459174714662\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 700ms/step\n","Train set classification report after fine-tuning:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.78      0.87      0.82       265\n","     Clase 1       0.13      0.07      0.09        70\n","\n","    accuracy                           0.70       335\n","   macro avg       0.45      0.47      0.46       335\n","weighted avg       0.64      0.70      0.67       335\n","\n","Train set AUC Score after fine-tuning: 0.4877628032345014\n"]}],"source":["from sklearn.metrics import classification_report, roc_auc_score\n","import matplotlib.pyplot as plt\n","\n","predictions_test = model.predict(test_data)\n","predicted_classes_test = np.round(predictions_test).astype(int)\n","\n","y_test = test_data.classes\n","\n","print(\"Test set classification report after fine-tuning:\")\n","print(classification_report(y_test, predicted_classes_test, target_names=['Clase 0', 'Clase 1']))\n","\n","auc_score_test = roc_auc_score(y_test, predictions_test)\n","print(\"Test set AUC Score after fine-tuning:\", auc_score_test)\n","\n","predictions_train = model.predict(train_data, steps=len(train_data), verbose=1)\n","predicted_classes_train = np.round(predictions_train).astype(int)\n","\n","y_train = train_data.classes\n","\n","print(\"Train set classification report after fine-tuning:\")\n","print(classification_report(y_train, predicted_classes_train, target_names=['Clase 0', 'Clase 1']))\n","\n","auc_score_train = roc_auc_score(y_train, predictions_train)\n","print(\"Train set AUC Score after fine-tuning:\", auc_score_train)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-XZD7a7bS_E-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731534662304,"user_tz":300,"elapsed":1416,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"87e80e40-d861-4489-e920-0db644b69a8d"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 320ms/step\n","Precision (Test Set, Class 1): 0.07142857142857142\n","Recall (Test Set, Class 1): 0.058823529411764705\n"]}],"source":["from sklearn.metrics import precision_score, recall_score\n","\n","predictions_test = model.predict(test_data)\n","predicted_classes_test = np.round(predictions_test).astype(int)\n","y_test = test_data.classes\n","\n","precision = precision_score(y_test, predicted_classes_test, average='binary', pos_label=1)\n","recall = recall_score(y_test, predicted_classes_test, average='binary', pos_label=1)\n","\n","print(\"Precision (Test Set, Class 1):\", precision)\n","print(\"Recall (Test Set, Class 1):\", recall)\n"]},{"cell_type":"code","source":[],"metadata":{"id":"qLL7HjFKgiMA"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"1kdpr_foeqbTxD5zgDDQx-9kaQCZjL-49","timestamp":1730257202045},{"file_id":"1wiAvHd6P1FPC4aPrsq5OZhTyP0ftiHKi","timestamp":1730255537619},{"file_id":"1vl4l6OhHGWn5I8H14IjbaarKtpWQlZ4j","timestamp":1730253865801},{"file_id":"1aS69bruyWTjkALtyqFDyL5WdXbs1cotQ","timestamp":1730251799274},{"file_id":"1XIQFivksNtyQmwqnxks8C3ziza499LmP","timestamp":1730227391477},{"file_id":"1bjaSRpUcyvdW5ToIZOb6Chi25LFZdZfA","timestamp":1730224807557},{"file_id":"1iW4qIigqB1uLTToYyPiOVwfgxmCnYXu9","timestamp":1729724070861},{"file_id":"14fteFtlnQAPiYwhAGEJVG3hHVHd9Fws5","timestamp":1729721692840},{"file_id":"14Z8LyP99xukHAoKBlOND6lfaRzOw024N","timestamp":1729719207228},{"file_id":"1hIS32OaEWe-ub6AUubjHFbCV-8Z9u3e9","timestamp":1729717024634},{"file_id":"1Dy-ngKQNSjbvLSnW9IYEw7uWEdMIUFgq","timestamp":1729713437883},{"file_id":"1OiHTrqHFB4BjQ4f7IPOxietIlC52S_-i","timestamp":1729710879543},{"file_id":"1iai0MKDIBpG8pBwceGufqM_mQrDGZK7p","timestamp":1729633654784},{"file_id":"1wthMRVFFFGVjNES7VdM8WmkjT1qoCcMK","timestamp":1729632597533},{"file_id":"1EuTB-NizY2iH3JrbCqFE3YPuNjKEQw8-","timestamp":1729622886260}],"collapsed_sections":["F66PYyQJnarz"],"authorship_tag":"ABX9TyMECccyGek86eWPmNsQORyo"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}