{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1iai0MKDIBpG8pBwceGufqM_mQrDGZK7p","timestamp":1729633654784},{"file_id":"1wthMRVFFFGVjNES7VdM8WmkjT1qoCcMK","timestamp":1729632597533},{"file_id":"1EuTB-NizY2iH3JrbCqFE3YPuNjKEQw8-","timestamp":1729622886260}],"gpuType":"T4","collapsed_sections":["H0-_m4AFJwgM"],"authorship_tag":"ABX9TyNhdlGt+A+eX4GnlxeaO0f+"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"boX8ZPtfYMuE","executionInfo":{"status":"ok","timestamp":1732034997049,"user_tz":300,"elapsed":25083,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"1aef7b27-50b1-492e-a8f1-a43620552b51"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mQzpyzneXrW8","executionInfo":{"status":"ok","timestamp":1732035009324,"user_tz":300,"elapsed":6314,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"205c207c-867f-42b8-eacb-85734faf8114"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train DataFrame:\n","                                             filename   id eye Diagnosis\n","2   /content/drive/My Drive/Proyecto de Grado G/Pr...  004  OD         1\n","3   /content/drive/My Drive/Proyecto de Grado G/Pr...  004  OS         1\n","4   /content/drive/My Drive/Proyecto de Grado G/Pr...  005  OD         1\n","5   /content/drive/My Drive/Proyecto de Grado G/Pr...  005  OS         1\n","14  /content/drive/My Drive/Proyecto de Grado G/Pr...  010  OD         1\n","\n","Test DataFrame:\n","                                             filename   id eye Diagnosis\n","20  /content/drive/My Drive/Proyecto de Grado G/Pr...  015  OD         1\n","21  /content/drive/My Drive/Proyecto de Grado G/Pr...  015  OS         1\n","32  /content/drive/My Drive/Proyecto de Grado G/Pr...  023  OD         1\n","33  /content/drive/My Drive/Proyecto de Grado G/Pr...  023  OS         1\n","42  /content/drive/My Drive/Proyecto de Grado G/Pr...  028  OD         0\n"]}],"source":["import pandas as pd\n","from sklearn.model_selection import StratifiedShuffleSplit\n","import numpy as np\n","import os\n","\n","# Ruta al directorio con las imágenes\n","directorio_imagenes = '/content/drive/My Drive/Proyecto de Grado G/ProcessedImages_Disc_Exp2'\n","\n","imagenes_info = []\n","for filename in os.listdir(directorio_imagenes):\n","    if filename.endswith('.jpg') or filename.endswith('.png'):\n","        base = filename.split('_')[0]\n","        id_paciente = base[3:-2]  # Extrae correctamente el ID del paciente\n","        tipo_ojo = base[-2:]\n","        full_path = os.path.join(directorio_imagenes, filename)\n","        imagenes_info.append({'filename': full_path, 'id': id_paciente, 'eye': tipo_ojo})\n","\n","imagenes_df = pd.DataFrame(imagenes_info)\n","\n","# Cargar y preparar los datos clínicos\n","data_od = pd.read_excel('/content/drive/My Drive/Proyecto de Grado G/patient_data_od.xlsx')\n","data_os = pd.read_excel('/content/drive/My Drive/Proyecto de Grado G/patient_data_os.xlsx')\n","\n","data_od['id'] = data_od['Unnamed: 0'].str.replace('#', '').astype(str)\n","data_os['id'] = data_os['Unnamed: 0'].str.replace('#', '').astype(str)\n","\n","data_od['eye'] = 'OD'\n","data_os['eye'] = 'OS'\n","\n","data_clinica = pd.concat([data_od[['id', 'eye', 'Diagnosis']], data_os[['id', 'eye', 'Diagnosis']]])\n","\n","full_df = pd.merge(imagenes_df, data_clinica, on=['id', 'eye'], how='left')\n","full_df = full_df[full_df['Diagnosis'] != 2]\n","\n","dominant_diagnosis = full_df.groupby('id')['Diagnosis'].agg(lambda x: x.mode()[0])\n","\n","\n","patient_df = pd.DataFrame(dominant_diagnosis).reset_index()\n","\n","splitter = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n","train_patients, test_patients = next(splitter.split(patient_df, patient_df['Diagnosis']))\n","\n","train_ids = patient_df.iloc[train_patients]['id']\n","test_ids = patient_df.iloc[test_patients]['id']\n","\n","train_df = full_df[full_df['id'].isin(train_ids)]\n","test_df = full_df[full_df['id'].isin(test_ids)]\n","\n","print(\"Train DataFrame:\")\n","print(train_df[['filename', 'id', 'eye', 'Diagnosis']].head())\n","\n","print(\"\\nTest DataFrame:\")\n","print(test_df[['filename', 'id', 'eye', 'Diagnosis']].head())"]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import os\n","from tensorflow.keras.applications.inception_v3 import InceptionV3, preprocess_input\n","from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Input\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n","from sklearn.metrics import roc_auc_score\n","from sklearn.model_selection import StratifiedShuffleSplit\n","from sklearn.utils.class_weight import compute_class_weight\n","# Preparar los generadores de datos\n","train_datagen = ImageDataGenerator(\n","    preprocessing_function=preprocess_input,\n","    rotation_range=10,\n","    width_shift_range=0.2,\n","    height_shift_range=0.2,\n","    horizontal_flip=True,\n","    vertical_flip=True,\n","    shear_range=0.2,\n","    zoom_range=0.2,\n","    validation_split=0.2\n",")\n","\n","test_datagen = ImageDataGenerator(\n","    preprocessing_function=preprocess_input,\n",")\n","\n","train_df['Diagnosis'] = train_df['Diagnosis'].astype(str)\n","test_df['Diagnosis'] = test_df['Diagnosis'].astype(str)\n","\n","train_data = train_datagen.flow_from_dataframe(\n","    dataframe=train_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=20,\n","    class_mode='binary'\n",")\n","\n","test_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode='binary'\n",")\n","\n","valid_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='filename',\n","    y_col='Diagnosis',\n","    target_size=(299, 299),\n","    batch_size=32,\n","    class_mode='binary'\n",")\n"],"metadata":{"id":"4YD6q2Ue5XkZ","colab":{"base_uri":"https://localhost:8080/"},"outputId":"0d91d752-1a7f-4d13-c0d9-b5a4672779ab","executionInfo":{"status":"ok","timestamp":1732035018705,"user_tz":300,"elapsed":3672,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}}},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 335 validated image filenames belonging to 2 classes.\n","Found 84 validated image filenames belonging to 2 classes.\n","Found 84 validated image filenames belonging to 2 classes.\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-3-32b89a1f5abf>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train_df['Diagnosis'] = train_df['Diagnosis'].astype(str)\n","<ipython-input-3-32b89a1f5abf>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_df['Diagnosis'] = test_df['Diagnosis'].astype(str)\n"]}]},{"cell_type":"code","source":["from sklearn.utils.class_weight import compute_class_weight\n","import pandas as pd\n","\n","# Convertir 'Diagnosis' de cadena a enteros\n","train_df['Diagnosis'] = train_df['Diagnosis'].astype(int)\n","test_df['Diagnosis'] = test_df['Diagnosis'].astype(int)\n","\n","# Verificar que la conversión fue exitosa\n","print(\"Valores únicos en 'Diagnosis' después de la conversión:\", train_df['Diagnosis'].unique())\n","\n","# Calcular los pesos de clases\n","class_weights = compute_class_weight(\n","    class_weight='balanced',\n","    classes=np.unique(train_df['Diagnosis']),\n","    y=train_df['Diagnosis']\n",")\n","class_weights = dict(enumerate(class_weights))\n","\n","print(\"Class weights:\", class_weights)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j6-13qP2n_02","executionInfo":{"status":"ok","timestamp":1732035020491,"user_tz":300,"elapsed":249,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"6c1739d4-57fb-40dc-c6ec-5205353c309a"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Valores únicos en 'Diagnosis' después de la conversión: [1 0]\n","Class weights: {0: 0.6320754716981132, 1: 2.392857142857143}\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-4-5d28dd34677d>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train_df['Diagnosis'] = train_df['Diagnosis'].astype(int)\n","<ipython-input-4-5d28dd34677d>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_df['Diagnosis'] = test_df['Diagnosis'].astype(int)\n"]}]},{"cell_type":"code","source":["input_tensor = Input(shape=(299, 299, 3))\n","base_model = InceptionV3(input_tensor=input_tensor, weights='imagenet', include_top=False, pooling='avg')\n","\n","x = base_model.output\n","x = Dense(2048, activation='relu')(x)\n","predictions = Dense(1, activation='sigmoid')(x)\n","model = Model(inputs=base_model.input, outputs=predictions)\n","\n","for layer in base_model.layers:\n","    layer.trainable = False\n","\n","model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy')\n","\n","checkpoint = ModelCheckpoint('best_model_warmup.keras', monitor='val_loss', save_best_only=True, mode='min', verbose=1)\n","early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True, mode='min')\n","\n","print(\"Inicio de Warm-Up Training...\\n\")\n","warmup_history = model.fit(\n","    train_data,\n","    validation_data=valid_data,\n","    epochs=50,\n","    callbacks=[checkpoint, early_stop],\n","    class_weight=class_weights\n",")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RNcbG_WLm8Ma","executionInfo":{"status":"ok","timestamp":1732035389914,"user_tz":300,"elapsed":367980,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"5183a74e-6876-4732-b615-17ead9a95b95"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/inception_v3/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n","\u001b[1m87910968/87910968\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 0us/step\n","Inicio de Warm-Up Training...\n","\n","Epoch 1/50\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:122: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 931ms/step - loss: 1.5899\n","Epoch 1: val_loss improved from inf to 3.29370, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m59s\u001b[0m 2s/step - loss: 1.6040 - val_loss: 3.2937\n","Epoch 2/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 277ms/step - loss: 1.1902\n","Epoch 2: val_loss improved from 3.29370 to 0.69372, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 399ms/step - loss: 1.1772 - val_loss: 0.6937\n","Epoch 3/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 276ms/step - loss: 0.6711\n","Epoch 3: val_loss improved from 0.69372 to 0.48548, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 380ms/step - loss: 0.6750 - val_loss: 0.4855\n","Epoch 4/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 378ms/step - loss: 0.5837\n","Epoch 4: val_loss did not improve from 0.48548\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 411ms/step - loss: 0.5857 - val_loss: 0.7782\n","Epoch 5/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 279ms/step - loss: 0.6042\n","Epoch 5: val_loss improved from 0.48548 to 0.44100, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 417ms/step - loss: 0.6024 - val_loss: 0.4410\n","Epoch 6/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 279ms/step - loss: 0.5314\n","Epoch 6: val_loss did not improve from 0.44100\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 311ms/step - loss: 0.5318 - val_loss: 0.8066\n","Epoch 7/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 336ms/step - loss: 0.5529\n","Epoch 7: val_loss did not improve from 0.44100\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 368ms/step - loss: 0.5525 - val_loss: 0.6030\n","Epoch 8/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 317ms/step - loss: 0.4394\n","Epoch 8: val_loss did not improve from 0.44100\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 360ms/step - loss: 0.4432 - val_loss: 1.1945\n","Epoch 9/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 283ms/step - loss: 0.5766\n","Epoch 9: val_loss improved from 0.44100 to 0.43310, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 388ms/step - loss: 0.5767 - val_loss: 0.4331\n","Epoch 10/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 277ms/step - loss: 0.6801\n","Epoch 10: val_loss did not improve from 0.43310\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 311ms/step - loss: 0.6744 - val_loss: 0.5886\n","Epoch 11/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 375ms/step - loss: 0.5397\n","Epoch 11: val_loss did not improve from 0.43310\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 408ms/step - loss: 0.5367 - val_loss: 0.4609\n","Epoch 12/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 290ms/step - loss: 0.5216\n","Epoch 12: val_loss did not improve from 0.43310\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 330ms/step - loss: 0.5231 - val_loss: 0.9581\n","Epoch 13/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 269ms/step - loss: 0.6644\n","Epoch 13: val_loss did not improve from 0.43310\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 302ms/step - loss: 0.6604 - val_loss: 0.5517\n","Epoch 14/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 345ms/step - loss: 0.5401\n","Epoch 14: val_loss did not improve from 0.43310\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 376ms/step - loss: 0.5384 - val_loss: 0.5403\n","Epoch 15/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 288ms/step - loss: 0.4228\n","Epoch 15: val_loss did not improve from 0.43310\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 328ms/step - loss: 0.4233 - val_loss: 0.8438\n","Epoch 16/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 293ms/step - loss: 0.4531\n","Epoch 16: val_loss improved from 0.43310 to 0.40290, saving model to best_model_warmup.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 397ms/step - loss: 0.4542 - val_loss: 0.4029\n","Epoch 17/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 360ms/step - loss: 0.4494\n","Epoch 17: val_loss did not improve from 0.40290\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 393ms/step - loss: 0.4488 - val_loss: 0.8347\n","Epoch 18/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 276ms/step - loss: 0.4463\n","Epoch 18: val_loss did not improve from 0.40290\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 356ms/step - loss: 0.4483 - val_loss: 0.4073\n","Epoch 19/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 273ms/step - loss: 0.4540\n","Epoch 19: val_loss did not improve from 0.40290\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 305ms/step - loss: 0.4559 - val_loss: 0.7843\n","Epoch 20/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 350ms/step - loss: 0.4838\n","Epoch 20: val_loss did not improve from 0.40290\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 384ms/step - loss: 0.4861 - val_loss: 0.5972\n","Epoch 21/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 514ms/step - loss: 0.4100\n","Epoch 21: val_loss did not improve from 0.40290\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 547ms/step - loss: 0.4109 - val_loss: 0.6775\n","Epoch 22/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 278ms/step - loss: 0.4529\n","Epoch 22: val_loss did not improve from 0.40290\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 358ms/step - loss: 0.4526 - val_loss: 0.7654\n","Epoch 23/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 270ms/step - loss: 0.5147\n","Epoch 23: val_loss did not improve from 0.40290\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 303ms/step - loss: 0.5141 - val_loss: 0.5044\n","Epoch 24/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 304ms/step - loss: 0.4392\n","Epoch 24: val_loss did not improve from 0.40290\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 336ms/step - loss: 0.4392 - val_loss: 0.5539\n","Epoch 25/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 328ms/step - loss: 0.3985\n","Epoch 25: val_loss did not improve from 0.40290\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 370ms/step - loss: 0.3992 - val_loss: 0.4993\n","Epoch 26/50\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 281ms/step - loss: 0.4771\n","Epoch 26: val_loss did not improve from 0.40290\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 315ms/step - loss: 0.4766 - val_loss: 0.5344\n"]}]},{"cell_type":"code","source":["from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n","\n","model.load_weights(\"best_model_warmup.keras\")\n","\n","for layer in base_model.layers:\n","    layer.trainable = True\n","\n","model.compile(optimizer=Adam(learning_rate=0.00001), loss='binary_crossentropy')\n","\n","checkpoint_finetune_path = \"best_model_finetune.keras\"\n","checkpoint_finetune = ModelCheckpoint(\n","    checkpoint_finetune_path,\n","    save_best_only=True,\n","    monitor=\"val_loss\",\n","    mode='min',\n","    verbose=1\n",")\n","early_stopping = EarlyStopping(\n","    monitor='val_loss',\n","    patience=50,\n","    restore_best_weights=True,\n","    mode='min'\n",")\n","\n","print(\"Inicio de Fine-Tuning Training...\\n\")\n","history_finetune = model.fit(\n","    train_data,\n","    validation_data=valid_data,\n","    epochs=200,\n","    callbacks=[checkpoint_finetune, early_stopping],\n","    class_weight=class_weights\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kEOK8le1nAVq","executionInfo":{"status":"ok","timestamp":1732037072552,"user_tz":300,"elapsed":1414869,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"94571a6f-4b30-4438-a5da-442ea6dd0e71"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Inicio de Fine-Tuning Training...\n","\n","Epoch 1/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3s/step - loss: 0.7726\n","Epoch 1: val_loss improved from inf to 0.42338, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m160s\u001b[0m 4s/step - loss: 0.7709 - val_loss: 0.4234\n","Epoch 2/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - loss: 0.7276\n","Epoch 2: val_loss improved from 0.42338 to 0.41891, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 574ms/step - loss: 0.7238 - val_loss: 0.4189\n","Epoch 3/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 384ms/step - loss: 0.6690\n","Epoch 3: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 417ms/step - loss: 0.6679 - val_loss: 0.4598\n","Epoch 4/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 438ms/step - loss: 0.6197\n","Epoch 4: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 472ms/step - loss: 0.6178 - val_loss: 0.5346\n","Epoch 5/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 487ms/step - loss: 0.5555\n","Epoch 5: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 519ms/step - loss: 0.5556 - val_loss: 0.5342\n","Epoch 6/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 399ms/step - loss: 0.5420\n","Epoch 6: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 440ms/step - loss: 0.5417 - val_loss: 0.5564\n","Epoch 7/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 382ms/step - loss: 0.4850\n","Epoch 7: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 422ms/step - loss: 0.4860 - val_loss: 0.5452\n","Epoch 8/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 424ms/step - loss: 0.5119\n","Epoch 8: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 458ms/step - loss: 0.5124 - val_loss: 0.5070\n","Epoch 9/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 467ms/step - loss: 0.5571\n","Epoch 9: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 499ms/step - loss: 0.5562 - val_loss: 0.5222\n","Epoch 10/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 384ms/step - loss: 0.5509\n","Epoch 10: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 424ms/step - loss: 0.5488 - val_loss: 0.5380\n","Epoch 11/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 418ms/step - loss: 0.4215\n","Epoch 11: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 449ms/step - loss: 0.4232 - val_loss: 0.5482\n","Epoch 12/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 392ms/step - loss: 0.4402\n","Epoch 12: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 435ms/step - loss: 0.4405 - val_loss: 0.5403\n","Epoch 13/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 380ms/step - loss: 0.4154\n","Epoch 13: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 411ms/step - loss: 0.4170 - val_loss: 0.5654\n","Epoch 14/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 466ms/step - loss: 0.4580\n","Epoch 14: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 498ms/step - loss: 0.4585 - val_loss: 0.5470\n","Epoch 15/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 387ms/step - loss: 0.3793\n","Epoch 15: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 418ms/step - loss: 0.3805 - val_loss: 0.5249\n","Epoch 16/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 414ms/step - loss: 0.3750\n","Epoch 16: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 447ms/step - loss: 0.3764 - val_loss: 0.5262\n","Epoch 17/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 473ms/step - loss: 0.3539\n","Epoch 17: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 506ms/step - loss: 0.3551 - val_loss: 0.5240\n","Epoch 18/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 437ms/step - loss: 0.3769\n","Epoch 18: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 469ms/step - loss: 0.3770 - val_loss: 0.5262\n","Epoch 19/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 379ms/step - loss: 0.3885\n","Epoch 19: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 411ms/step - loss: 0.3890 - val_loss: 0.5262\n","Epoch 20/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 408ms/step - loss: 0.3684\n","Epoch 20: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 439ms/step - loss: 0.3675 - val_loss: 0.5065\n","Epoch 21/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 470ms/step - loss: 0.3158\n","Epoch 21: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 502ms/step - loss: 0.3157 - val_loss: 0.5112\n","Epoch 22/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 435ms/step - loss: 0.2992\n","Epoch 22: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 466ms/step - loss: 0.3001 - val_loss: 0.5102\n","Epoch 23/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 392ms/step - loss: 0.2902\n","Epoch 23: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 472ms/step - loss: 0.2909 - val_loss: 0.4977\n","Epoch 24/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 387ms/step - loss: 0.3685\n","Epoch 24: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 419ms/step - loss: 0.3654 - val_loss: 0.4857\n","Epoch 25/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 481ms/step - loss: 0.2859\n","Epoch 25: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 512ms/step - loss: 0.2879 - val_loss: 0.4804\n","Epoch 26/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 376ms/step - loss: 0.2857\n","Epoch 26: val_loss did not improve from 0.41891\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 416ms/step - loss: 0.2864 - val_loss: 0.4428\n","Epoch 27/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 390ms/step - loss: 0.3022\n","Epoch 27: val_loss improved from 0.41891 to 0.41714, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 608ms/step - loss: 0.3028 - val_loss: 0.4171\n","Epoch 28/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 397ms/step - loss: 0.2634\n","Epoch 28: val_loss did not improve from 0.41714\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 431ms/step - loss: 0.2640 - val_loss: 0.4465\n","Epoch 29/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 408ms/step - loss: 0.2638\n","Epoch 29: val_loss improved from 0.41714 to 0.41449, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 580ms/step - loss: 0.2639 - val_loss: 0.4145\n","Epoch 30/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 452ms/step - loss: 0.2845\n","Epoch 30: val_loss improved from 0.41449 to 0.40725, saving model to best_model_finetune.keras\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 1s/step - loss: 0.2834 - val_loss: 0.4073\n","Epoch 31/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 408ms/step - loss: 0.2406\n","Epoch 31: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 442ms/step - loss: 0.2419 - val_loss: 0.4298\n","Epoch 32/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - loss: 0.2960\n","Epoch 32: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 445ms/step - loss: 0.2939 - val_loss: 0.4571\n","Epoch 33/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 497ms/step - loss: 0.2383\n","Epoch 33: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 532ms/step - loss: 0.2375 - val_loss: 0.4174\n","Epoch 34/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 399ms/step - loss: 0.1858\n","Epoch 34: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 439ms/step - loss: 0.1863 - val_loss: 0.4104\n","Epoch 35/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 451ms/step - loss: 0.2251\n","Epoch 35: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 485ms/step - loss: 0.2230 - val_loss: 0.4245\n","Epoch 36/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 512ms/step - loss: 0.1623\n","Epoch 36: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 546ms/step - loss: 0.1614 - val_loss: 0.4358\n","Epoch 37/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 396ms/step - loss: 0.1522\n","Epoch 37: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 432ms/step - loss: 0.1548 - val_loss: 0.4332\n","Epoch 38/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 418ms/step - loss: 0.1657\n","Epoch 38: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 455ms/step - loss: 0.1661 - val_loss: 0.4579\n","Epoch 39/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 493ms/step - loss: 0.1512\n","Epoch 39: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 527ms/step - loss: 0.1515 - val_loss: 0.4576\n","Epoch 40/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 408ms/step - loss: 0.1701\n","Epoch 40: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 444ms/step - loss: 0.1698 - val_loss: 0.4400\n","Epoch 41/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 425ms/step - loss: 0.1852\n","Epoch 41: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 460ms/step - loss: 0.1838 - val_loss: 0.4866\n","Epoch 42/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 450ms/step - loss: 0.1390\n","Epoch 42: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 493ms/step - loss: 0.1406 - val_loss: 0.4515\n","Epoch 43/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 416ms/step - loss: 0.1599\n","Epoch 43: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 456ms/step - loss: 0.1599 - val_loss: 0.4274\n","Epoch 44/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 439ms/step - loss: 0.2334\n","Epoch 44: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 473ms/step - loss: 0.2301 - val_loss: 0.4963\n","Epoch 45/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 428ms/step - loss: 0.0913\n","Epoch 45: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 470ms/step - loss: 0.0914 - val_loss: 0.4881\n","Epoch 46/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 418ms/step - loss: 0.1336\n","Epoch 46: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 462ms/step - loss: 0.1335 - val_loss: 0.4799\n","Epoch 47/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 460ms/step - loss: 0.1370\n","Epoch 47: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 492ms/step - loss: 0.1364 - val_loss: 0.4608\n","Epoch 48/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 411ms/step - loss: 0.1038\n","Epoch 48: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 455ms/step - loss: 0.1034 - val_loss: 0.4821\n","Epoch 49/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 406ms/step - loss: 0.1023\n","Epoch 49: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 439ms/step - loss: 0.1022 - val_loss: 0.4791\n","Epoch 50/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 501ms/step - loss: 0.1042\n","Epoch 50: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 536ms/step - loss: 0.1051 - val_loss: 0.5102\n","Epoch 51/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 459ms/step - loss: 0.1107\n","Epoch 51: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 495ms/step - loss: 0.1109 - val_loss: 0.5308\n","Epoch 52/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 413ms/step - loss: 0.0770\n","Epoch 52: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 494ms/step - loss: 0.0779 - val_loss: 0.5041\n","Epoch 53/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 426ms/step - loss: 0.2021\n","Epoch 53: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 461ms/step - loss: 0.2003 - val_loss: 0.4845\n","Epoch 54/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 493ms/step - loss: 0.0749\n","Epoch 54: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 534ms/step - loss: 0.0747 - val_loss: 0.4854\n","Epoch 55/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 403ms/step - loss: 0.0782\n","Epoch 55: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 444ms/step - loss: 0.0791 - val_loss: 0.5522\n","Epoch 56/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 398ms/step - loss: 0.0865\n","Epoch 56: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 433ms/step - loss: 0.0883 - val_loss: 0.5128\n","Epoch 57/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 496ms/step - loss: 0.0645\n","Epoch 57: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 528ms/step - loss: 0.0638 - val_loss: 0.5027\n","Epoch 58/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 400ms/step - loss: 0.0827\n","Epoch 58: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 441ms/step - loss: 0.0827 - val_loss: 0.5450\n","Epoch 59/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 396ms/step - loss: 0.0812\n","Epoch 59: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 431ms/step - loss: 0.0816 - val_loss: 0.5249\n","Epoch 60/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 444ms/step - loss: 0.0553\n","Epoch 60: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 481ms/step - loss: 0.0561 - val_loss: 0.5269\n","Epoch 61/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 417ms/step - loss: 0.0420\n","Epoch 61: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 455ms/step - loss: 0.0423 - val_loss: 0.5029\n","Epoch 62/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 406ms/step - loss: 0.0596\n","Epoch 62: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 438ms/step - loss: 0.0591 - val_loss: 0.5147\n","Epoch 63/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 479ms/step - loss: 0.0687\n","Epoch 63: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 512ms/step - loss: 0.0685 - val_loss: 0.5268\n","Epoch 64/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 391ms/step - loss: 0.0532\n","Epoch 64: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 431ms/step - loss: 0.0532 - val_loss: 0.4932\n","Epoch 65/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 389ms/step - loss: 0.0460\n","Epoch 65: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 419ms/step - loss: 0.0462 - val_loss: 0.5050\n","Epoch 66/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 475ms/step - loss: 0.0965\n","Epoch 66: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 515ms/step - loss: 0.0964 - val_loss: 0.5415\n","Epoch 67/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 446ms/step - loss: 0.0729\n","Epoch 67: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 480ms/step - loss: 0.0725 - val_loss: 0.5384\n","Epoch 68/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 400ms/step - loss: 0.1509\n","Epoch 68: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 443ms/step - loss: 0.1477 - val_loss: 0.5810\n","Epoch 69/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 388ms/step - loss: 0.0484\n","Epoch 69: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 423ms/step - loss: 0.0494 - val_loss: 0.5690\n","Epoch 70/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 406ms/step - loss: 0.0828\n","Epoch 70: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 460ms/step - loss: 0.0826 - val_loss: 0.6233\n","Epoch 71/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 482ms/step - loss: 0.0315\n","Epoch 71: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 516ms/step - loss: 0.0319 - val_loss: 0.6819\n","Epoch 72/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 402ms/step - loss: 0.1036\n","Epoch 72: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 441ms/step - loss: 0.1025 - val_loss: 0.5673\n","Epoch 73/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 401ms/step - loss: 0.0537\n","Epoch 73: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 436ms/step - loss: 0.0544 - val_loss: 0.5104\n","Epoch 74/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 497ms/step - loss: 0.0347\n","Epoch 74: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 530ms/step - loss: 0.0360 - val_loss: 0.5720\n","Epoch 75/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 446ms/step - loss: 0.0622\n","Epoch 75: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 479ms/step - loss: 0.0625 - val_loss: 0.5356\n","Epoch 76/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 429ms/step - loss: 0.0698\n","Epoch 76: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 510ms/step - loss: 0.0690 - val_loss: 0.5196\n","Epoch 77/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 422ms/step - loss: 0.0710\n","Epoch 77: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 457ms/step - loss: 0.0699 - val_loss: 0.5361\n","Epoch 78/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 483ms/step - loss: 0.0525\n","Epoch 78: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 517ms/step - loss: 0.0523 - val_loss: 0.5241\n","Epoch 79/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 395ms/step - loss: 0.0354\n","Epoch 79: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 437ms/step - loss: 0.0362 - val_loss: 0.5560\n","Epoch 80/200\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 434ms/step - loss: 0.0909\n","Epoch 80: val_loss did not improve from 0.40725\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 467ms/step - loss: 0.0894 - val_loss: 0.5623\n"]}]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.metrics import precision_score, recall_score, f1_score, classification_report, roc_auc_score\n","import matplotlib.pyplot as plt\n","\n","predictions_test = model.predict(test_data)\n","y_test = test_data.classes\n","\n","thresholds = np.arange(0.1, 1.0, 0.1)\n","best_threshold = 0.5\n","best_f1 = 0\n","\n","for threshold in thresholds:\n","    predicted_classes_test = (predictions_test >= threshold).astype(int)\n","    f1 = f1_score(y_test, predicted_classes_test)\n","    precision = precision_score(y_test, predicted_classes_test)\n","    recall = recall_score(y_test, predicted_classes_test)\n","\n","    print(f'Threshold: {threshold:.2f}')\n","    print(f'Precision: {precision:.4f}, Recall: {recall:.4f}, F1 Score: {f1:.4f}\\n')\n","\n","    if f1 > best_f1:\n","        best_f1 = f1\n","        best_threshold = threshold\n","\n","print(f'Mejor threshold: {best_threshold} con F1 Score: {best_f1}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fZeR1TJvJgPj","executionInfo":{"status":"ok","timestamp":1732037105065,"user_tz":300,"elapsed":21018,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"4850d4ed-2a9b-47fa-f0a9-c80b29653ca8"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 3s/step\n","Threshold: 0.10\n","Precision: 0.1364, Recall: 0.3529, F1 Score: 0.1967\n","\n","Threshold: 0.20\n","Precision: 0.1351, Recall: 0.2941, F1 Score: 0.1852\n","\n","Threshold: 0.30\n","Precision: 0.1724, Recall: 0.2941, F1 Score: 0.2174\n","\n","Threshold: 0.40\n","Precision: 0.2273, Recall: 0.2941, F1 Score: 0.2564\n","\n","Threshold: 0.50\n","Precision: 0.2222, Recall: 0.2353, F1 Score: 0.2286\n","\n","Threshold: 0.60\n","Precision: 0.1765, Recall: 0.1765, F1 Score: 0.1765\n","\n","Threshold: 0.70\n","Precision: 0.1429, Recall: 0.1176, F1 Score: 0.1290\n","\n","Threshold: 0.80\n","Precision: 0.2222, Recall: 0.1176, F1 Score: 0.1538\n","\n","Threshold: 0.90\n","Precision: 0.3333, Recall: 0.0588, F1 Score: 0.1000\n","\n","Mejor threshold: 0.4 con F1 Score: 0.2564102564102564\n"]}]},{"cell_type":"code","source":["precisions = []\n","recalls = []\n","f1_scores = []\n","\n","for threshold in thresholds:\n","    predicted_classes_test = (predictions_test >= threshold).astype(int)\n","    precisions.append(precision_score(y_test, predicted_classes_test))\n","    recalls.append(recall_score(y_test, predicted_classes_test))\n","    f1_scores.append(f1_score(y_test, predicted_classes_test))\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(thresholds, precisions, label='Precision')\n","plt.plot(thresholds, recalls, label='Recall')\n","plt.plot(thresholds, f1_scores, label='F1 Score')\n","plt.xlabel('Threshold')\n","plt.ylabel('Metric Value')\n","plt.title('Metrics vs. Threshold')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"xl1HR1vTJtYy","executionInfo":{"status":"ok","timestamp":1732037110059,"user_tz":300,"elapsed":613,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"256e40b9-9ce4-44ac-9dd4-734b70a10392"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["predicted_classes_test = (predictions_test >= best_threshold).astype(int)\n","\n","# Imprimir el reporte de clasificación con el mejor threshold\n","print(\"Test set classification report with custom threshold:\")\n","print(classification_report(y_test, predicted_classes_test, target_names=['Clase 0', 'Clase 1']))\n","\n","# Calcular la precisión y el recall con el mejor threshold\n","precision = precision_score(y_test, predicted_classes_test)\n","recall = recall_score(y_test, predicted_classes_test)\n","\n","print(\"Precision (Test Set, Class 1) with custom threshold:\", precision)\n","print(\"Recall (Test Set, Class 1) with custom threshold:\", recall)\n","\n","# AUC Score no se afecta por el threshold, pero se puede recalcular para referencia\n","auc_score_test = roc_auc_score(y_test, predictions_test)\n","print(\"Test set AUC Score:\", auc_score_test)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NWqEHzf5JvQU","executionInfo":{"status":"ok","timestamp":1732037141460,"user_tz":300,"elapsed":234,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"60e178b1-4c9b-4198-bc51-8f4d313c0030"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Test set classification report with custom threshold:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.81      0.75      0.78        67\n","     Clase 1       0.23      0.29      0.26        17\n","\n","    accuracy                           0.65        84\n","   macro avg       0.52      0.52      0.52        84\n","weighted avg       0.69      0.65      0.67        84\n","\n","Precision (Test Set, Class 1) with custom threshold: 0.22727272727272727\n","Recall (Test Set, Class 1) with custom threshold: 0.29411764705882354\n","Test set AUC Score: 0.3863037752414399\n"]}]},{"cell_type":"markdown","source":["#RESULTADOS ANTERIORES"],"metadata":{"id":"H0-_m4AFJwgM"}},{"cell_type":"code","source":["from sklearn.metrics import classification_report, roc_auc_score\n","import matplotlib.pyplot as plt\n","\n","predictions_test = model.predict(test_data)\n","predicted_classes_test = np.round(predictions_test).astype(int)\n","\n","y_test = test_data.classes\n","\n","print(\"Test set classification report after fine-tuning:\")\n","print(classification_report(y_test, predicted_classes_test, target_names=['Clase 0', 'Clase 1']))\n","\n","auc_score_test = roc_auc_score(y_test, predictions_test)\n","print(\"Test set AUC Score after fine-tuning:\", auc_score_test)\n","\n","predictions_train = model.predict(train_data, steps=len(train_data), verbose=1)\n","predicted_classes_train = np.round(predictions_train).astype(int)\n","\n","y_train = train_data.classes\n","\n","print(\"Train set classification report after fine-tuning:\")\n","print(classification_report(y_train, predicted_classes_train, target_names=['Clase 0', 'Clase 1']))\n","\n","auc_score_train = roc_auc_score(y_train, predictions_train)\n","print(\"Train set AUC Score after fine-tuning:\", auc_score_train)\n"],"metadata":{"id":"4-LSwrhIkB7e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731447540661,"user_tz":300,"elapsed":34046,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"17a15be4-b16a-4d0d-87d4-6c7255424449"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 4s/step\n","Test set classification report after fine-tuning:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.83      0.79      0.81        67\n","     Clase 1       0.30      0.35      0.32        17\n","\n","    accuracy                           0.70        84\n","   macro avg       0.56      0.57      0.57        84\n","weighted avg       0.72      0.70      0.71        84\n","\n","Test set AUC Score after fine-tuning: 0.517998244073749\n","\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 720ms/step\n","Train set classification report after fine-tuning:\n","              precision    recall  f1-score   support\n","\n","     Clase 0       0.78      0.84      0.81       265\n","     Clase 1       0.12      0.09      0.10        70\n","\n","    accuracy                           0.68       335\n","   macro avg       0.45      0.46      0.45       335\n","weighted avg       0.64      0.68      0.66       335\n","\n","Train set AUC Score after fine-tuning: 0.48479784366576817\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import precision_score, recall_score\n","\n","predictions_test = model.predict(test_data)\n","predicted_classes_test = np.round(predictions_test).astype(int)\n","y_test = test_data.classes\n","\n","precision = precision_score(y_test, predicted_classes_test, average='binary', pos_label=1)\n","recall = recall_score(y_test, predicted_classes_test, average='binary', pos_label=1)\n","\n","print(\"Precision (Test Set, Class 1):\", precision)\n","print(\"Recall (Test Set, Class 1):\", recall)\n"],"metadata":{"id":"Fss5eSlHLzh2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731447961808,"user_tz":300,"elapsed":1182,"user":{"displayName":"Valentina Acosta","userId":"10836141805216422219"}},"outputId":"8188af15-e9f9-4592-e1f6-adcf41d31c11"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 159ms/step\n","Precision (Test Set, Class 1): 0.25\n","Recall (Test Set, Class 1): 0.29411764705882354\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"Gk4szjyUUOzC"},"execution_count":null,"outputs":[]}]}